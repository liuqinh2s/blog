<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序</title>
      <link href="/blog/2019/02/19/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2019/02/19/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>快速排序算法是一个原理非常简单易懂的算法，但如果现场手写的话又有多少人能写得出来呢？我今天又试了一下，发现还是存在一些认知上的问题。首先我明白快排的核心操作是：<strong>选取一个中枢，然后把小于中枢的放到左边，大于中枢的放到右边</strong>。但我发现时隔仅仅一年多，我居然已经忘了这个操作的英文名字了。直到我在写这篇文章的时候才突然想起来：partition操作。</p><p>在使用partition操作的前提下，递归解决问题就OK了。</p><a id="more"></a><p>partition具体操作如下：</p><p>我选取的中枢是第一个元素，且从前往后遍历数组。遇到小于中枢的，我要交换当前结点和中枢。遇到大于中枢的，直接略过。</p><p>第一个分支也就是遇到小于中枢的结点，这里才是操作比较复杂的部分，仔细想想其实这里要交换两次。将小于中枢的结点与中枢交换之后，中枢跑到了最后面，此时的结构相当于：<code>小小小..大大大..中枢</code>。<strong>我们还要将中枢塞到中间去</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin&gt;=end-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pivotIndex = partition(array, begin, end);</span><br><span class="line">    qsort(array, begin, pivotIndex);</span><br><span class="line">    qsort(array, pivotIndex+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = array[begin];</span><br><span class="line">    <span class="keyword">int</span> pivotIndex = begin;</span><br><span class="line">    <span class="keyword">int</span> index = begin+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(index&lt;end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[index]&lt;pivot)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[index];</span><br><span class="line">            array[index] = array[pivotIndex];</span><br><span class="line">            array[pivotIndex++] = temp;</span><br><span class="line">            temp = array[index];</span><br><span class="line">            array[index] = array[pivotIndex];</span><br><span class="line">            array[pivotIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pivotIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以思考一下：</p><ul><li>选第一个元素做中枢，从后往前遍历</li><li>选最后一个元素做中枢，从前往后遍历</li><li>选最后一个元素做中枢，从后往前遍历</li></ul><p>所以最后我发现快速排序确实是一个简单易懂的算法，难点在于partition操作的具体问题具体分析。四类partition全部写一遍。应该差不多了。</p><p>上面的方法归根结底都是使用 <strong>一个中枢</strong> 来划分，实际上也可以用两个指针来划分：一个记录小部的末尾，一个记录大部的首部。这两个指针一个从前往后，一个从后往前，直到相遇，本轮划分操作就结束。</p><p>于是我又抽空写了一下这个两个指针往中间靠的，结果并没有一遍写对，原因是边界检查，居然要不停的检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition1</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = array[begin];</span><br><span class="line">    <span class="keyword">int</span> smallEnd = begin;</span><br><span class="line">    <span class="keyword">int</span> bigBegin = end-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(smallEnd&lt;bigBegin)&#123;</span><br><span class="line">        <span class="keyword">while</span> (smallEnd&lt;bigBegin &amp;&amp; array[bigBegin]&gt;pivot)&#123;</span><br><span class="line">            bigBegin--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(smallEnd&lt;bigBegin)&#123;</span><br><span class="line">            array[smallEnd++] = array[bigBegin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(smallEnd&lt;bigBegin &amp;&amp; array[smallEnd]&lt;pivot)&#123;</span><br><span class="line">            smallEnd++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(smallEnd&lt;bigBegin)&#123;</span><br><span class="line">            array[bigBegin--] = array[smallEnd];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array[smallEnd] = pivot;</span><br><span class="line">    <span class="keyword">return</span> smallEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样感觉就太不美了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/blog/2019/01/19/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/blog/2019/01/19/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="什么是并查集"><a href="#什么是并查集" class="headerlink" title="什么是并查集"></a>什么是并查集</h3><p>并查集的核心是<code>parent</code>指针，一个结点可以找到自己所属的结点。从而把结点<strong>归类</strong>。有两个核心操作：</p><ul><li>Union（用来合并两个并查集）</li><li>Find（用于查找一个结点的<code>parent</code>）</li></ul><p>所以并查集可以叫做：union-find data structure。</p><a id="more"></a><h3 id="什么是路径压缩"><a href="#什么是路径压缩" class="headerlink" title="什么是路径压缩"></a>什么是路径压缩</h3><p>我们看两个结点是否属于同一个并查集，实际上只看最顶层的那个<code>parent</code>，如果这两个结点属于同一个最顶层<code>parent</code>，那么它们就在同一个并查集中。</p><p>所以我们实际上只需要两层的树结构，让所有其他结点的<code>parent</code>指针指向最顶层<code>parent</code>，这样就能达到扁平化并查集的目的，从而使<code>Find</code>操作从<code>O(logN)</code>的时间复杂度变成<code>O(1)</code>。这就叫：<strong>路径压缩</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findParent</span><span class="params">(UnionFindSetNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.parent!=node)&#123;</span><br><span class="line">        node.parent = findParent(node.parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很巧妙，可以在查找本结点父亲的时候，将路径上的所有祖先扁平化。</p><h3 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h3><p>核心目标是：尽可能减少深度。所以需要注意的点是：把深度小的并查集归并到深度大的并查集。我们给并查集多添加一个深度属性：rank，比如两层的并查集，parent的rank就是1，叶子节点们的rank就是0。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(UnionFindSetNode node1, UnionFindSetNode node2)</span></span>&#123;</span><br><span class="line">    UnionFindSetNode parent1 = findParent(node1);</span><br><span class="line">    UnionFindSetNode parent2 = findParent(node2);</span><br><span class="line">    <span class="keyword">if</span>(parent1!=parent2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent1.rank&gt;parent2.rank)&#123;</span><br><span class="line">            parent2.parent = parent1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent1.rank&lt;parent2.rank)&#123;</span><br><span class="line">            parent1.parent = parent2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parent1.parent = parent2;</span><br><span class="line">            parent2.rank++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/blog/2019/01/17/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/blog/2019/01/17/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>KMP算法用来在一个文本中查找模式串，如下图所示：</p><p>文本匹配例子：</p><p><img src="https://i.loli.net/2019/02/01/5c545a0ceea57.jpg#align=left&amp;display=inline&amp;height=78&amp;linkTarget=_blank&amp;originHeight=78&amp;originWidth=392&amp;width=392" alt=""></p><p>我们把上面那个长字符串的称为<strong>文本</strong>，下面这个短的称为<strong>模式串</strong>。我们的目的是查看<code>ABADABAD</code>是否出现在文本中。</p><p>不必要的比较：</p><p><img src="https://i.loli.net/2019/02/01/5c545a0d27686.jpg#align=left&amp;display=inline&amp;height=100&amp;linkTarget=_blank&amp;originHeight=100&amp;originWidth=418&amp;width=418" alt=""></p><p>跳过不必要的比较：</p><p><img src="https://i.loli.net/2019/02/01/5c545a0cf058c.jpg#align=left&amp;display=inline&amp;height=90&amp;linkTarget=_blank&amp;originHeight=90&amp;originWidth=410&amp;width=410" alt=""></p><p>KMP算法的核心作用在于帮助模式串顺利的跳过很多不必要的比较（模式串没有任何前缀与文本匹配），直接后移到一部分前缀已经匹配的位置，开始下一次的比较。更准确的讲是移动到：最长真前后缀匹配的位置，如上图所示的<code>ABA</code>。</p><a id="more"></a><h3 id="什么是真前后缀"><a href="#什么是真前后缀" class="headerlink" title="什么是真前后缀"></a>什么是真前后缀</h3><p>前缀和后缀我们都不陌生，比如单词<code>ABA</code>，它有三个前缀：<code>A</code>、<code>AB</code>、<code>ABA</code>，和三个后缀：<code>A</code>、<code>BA</code>、<code>ABA</code>。</p><p>真前后缀的意思是，前后缀必须是单词的<strong>真子集</strong>，也就是说不能是单词本身。所以上面那个单词<code>ABA</code>的真前缀是：<code>A</code>、<code>AB</code>，真后缀是：<code>A</code>、<code>BA</code>。</p><p>那么单词<code>ABA</code>真前后缀的最长匹配是：<code>A</code>。</p><h4 id="那么真前后缀是否匹配有什么用？"><a href="#那么真前后缀是否匹配有什么用？" class="headerlink" title="那么真前后缀是否匹配有什么用？"></a>那么真前后缀是否匹配有什么用？</h4><p>我们仔细观察文章最开头的文本匹配例子。在不必要的比较中，我们拿<code>BADABA</code>和<code>ABADAB</code>比较。而这两个，前者是模式串<code>ABADABA</code>部分的后缀，后者则是前缀。如果我们算得了<code>ABADABA</code>的真前后缀的最长匹配，就已经知道了<code>BADABA</code>和<code>ABADAB</code>不相等。而且还知道<code>ADABA</code>和<code>ABADA</code>也不相等，等等。</p><p><strong>只要我们知道了真前后缀的最长匹配是什么，我们可以直接跳过所有这些没必要的比较。</strong></p><p>KMP的核心就是：<strong>在每一次失配的时候</strong>，利用最长真前后缀匹配长度，直接跳过不必要的比较。</p><h3 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h3><p>next数组也就是：部分匹配表（Partial Match Table）。<strong>就是一个最长真前后缀匹配长度表。</strong></p><p><strong>首先next数组只需要用模式串得出，它是对模式串的解析，跟要匹配的文本没有半毛钱关系。</strong>其次next数组记录的其实就是<strong>最长真前后缀匹配长度</strong>，但错开了一位。</p><blockquote><p>真前后缀的意思是，前后缀不能是字符串本身，只能是字符串的真子集</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">模式串</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">\0</td></tr><tr><td style="text-align:center">next[i]</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table></div><ol><li>i = 0，<code>next[0]</code>，我们填-1；</li><li>i = 1，前面的字符串为<code>A</code>，其最长相同真前后缀长度为0，即<code>next[1] = 0</code>；</li><li>i = 2，前面的字符串为<code>AB</code>，其最长相同真前后缀长度为0，即<code>next[2] = 0</code>；</li><li>i = 3，前面的字符串为<code>ABA</code>，其最长相同真前后缀为<code>A</code>，即<code>next[3] = 1</code>；</li><li>i = 4，前面的字符串为<code>ABAD</code>，其最长相同真前后缀长度为0，即<code>next[4] = 0</code>；</li><li>i = 5，前面的字符串为<code>ABADA</code>，其最长相同真前后缀长度为<code>A</code>，即<code>next[5] = 1</code>；</li><li>i = 6，前面的字符串为<code>ABADAB</code>，其最长相同真前后缀长度为<code>AB</code>，即<code>next[6] = 2</code>；</li><li>i = 7，前面的字符串为<code>ABADABA</code>，其最长相同真前后缀为<code>ABA</code>，即<code>next[7] = 3</code>；</li><li>i = 8，前面的字符串为<code>ABADABAD</code>，其最长相同真前后缀为<code>ABAD</code>，即<code>next[8]=4</code>；</li></ol><p>这张next表及其有用，前面说了，在字符串匹配的每一次失配的时候，我们都可以用已经匹配上的这段字符串的最长真前后缀匹配长度来定位将要跳转的位置。还是拿最开始的文本匹配例子：</p><p>当图一失配的时候，我们查<code>ABADABAD</code>的失配位置的next数组，也就是<code>next[7]</code>，得到<code>ABADABA</code>的最长真前后缀匹配长度<code>3</code>，然后拿<code>&quot;ABADABAD&quot;.charAt(3)</code>也就是<code>D</code>跟文本中失配处的字符<code>&#39; &#39;</code>继续匹配。如果又失配，那么递归处理。递归的边界是什么？答案是<code>next[0]</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个代码并不难写，我简单讲一下。</p><p>首先我们需要构造next数组，需要的参数只有一个：模式串。</p><p>然后我们使用一个指针遍历模式串，另一个指针负责记录匹配深度。</p><p>分支只有两个，一个是<strong>递归的边界</strong>或者<strong>匹配的时候</strong>：i++，j++，next[i]=j。一个是<strong>非递归边界且不匹配的时候</strong>，递归查找下一个必要的匹配：j=next[j]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getNextArray(String pattern)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()+<span class="number">1</span>];</span><br><span class="line">    nextArray[<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==-<span class="number">1</span> || pattern.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            nextArray[i]=j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nextArray[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = getNextArray(pattern);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==-<span class="number">1</span> || text.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nextArray[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pattern.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然这种错开，和<code>next[0]=-1</code>的设定，不那么自然。其实可以有更自然的设计：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">模式串</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">\0</td></tr><tr><td style="text-align:center">next[i]</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table></div><p>这样一一对应就行了，next数组也与模式串等长。</p><p>这种next表的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getNextArray(String pattern)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; pattern.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;pattern.length() &amp;&amp; pattern.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            nextArray[i++] = ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            nextArray[i++] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = getNextArray(pattern);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; text.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length() &amp;&amp; text.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pattern.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来远不如上面第一种next表的代码简洁清晰。下面做一个简化，去掉内部的循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getNextArray(String pattern)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; pattern.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pattern.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            nextArray[i++] = ++j;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            nextArray[i++] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = getNextArray(pattern);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; text.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pattern.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看代码很容易知道，文本的指针是只增不减的，而且只在<strong>失配且匹配深度大于0</strong>的时候递归处理失配情况。但如何精确分析算法复杂度呢？</p><h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>这个算法的分析属于平摊分析。引入一个变量k，<code>k=2*i-j</code>。观察下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(j&lt;m &amp;&amp; i&lt;n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>&gt;j || T[i]==P[j])&#123;</span><br><span class="line">        i++;j++;    <span class="comment">// k加1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        j = next[j];    <span class="comment">// j至少减一，i不变，那么k至少加1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上述注释分析得出：k单调递增。k的最大值是<code>2*n+1</code>，而k是迭代次数的上界，所以算法最坏时间是：<code>2*n+1</code>，所以这是一个<code>O(n)</code>的算法。同理可得算出<code>next</code>表的时间复杂度是<code>O(m)</code>。所以总的算法复杂度是<code>O(m+n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>蓄水池算法</title>
      <link href="/blog/2019/01/15/%E8%93%84%E6%B0%B4%E6%B1%A0%E7%AE%97%E6%B3%95/"/>
      <url>/blog/2019/01/15/%E8%93%84%E6%B0%B4%E6%B1%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="蓄水池算法-Reservoir-Sampling"><a href="#蓄水池算法-Reservoir-Sampling" class="headerlink" title="蓄水池算法(Reservoir Sampling)"></a>蓄水池算法(Reservoir Sampling)</h2><p>这个算法真的很奇妙，它的核心是一个<strong>数学证明</strong>。外延，或者说应用场景是：</p><ol><li>$C_n^k$，也就是从大小为n的样本集中随机取k个不同的样本</li><li>流式数据，或者说无法直接根据索引拿到数据（更加不可能一遍加载到内存）</li></ol><a id="more"></a><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>算法的描述其实很简单：<a href="https://zh.wikipedia.org/zh-cn/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A8%A3" target="_blank" rel="noopener">维基百科：水塘抽样</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">问题描述：从包含n个不同的项目的集合S中随机选取k个不同的样本。</span><br><span class="line">算法：</span><br><span class="line">从S中取首k个放入[水塘]中</span><br><span class="line">对每个S[j]项（j&gt;=k，数组从0开始）：</span><br><span class="line">true随机产生一个范围从0到j的整数r</span><br><span class="line">true若r&lt;k则把水塘中的第r项换成S[j]项</span><br><span class="line">最后得到的水塘就是抽样结果</span><br></pre></td></tr></table></figure><p>这个算法保证了每一项最后可能存在于水塘中的概率都是一样的。</p><p>单看算法，你肯定不知道为什么是等概率，其实数学证明并不难，请看下面的证明：</p><h3 id="数学证明"><a href="#数学证明" class="headerlink" title="数学证明"></a>数学证明</h3><p>我们把样本分为两类：</p><ol><li>一类是首k个，它们一开始就在水塘中</li><li>一类是其他，它们一开始并不在水塘中</li></ol><p>我们发现两个简单的逻辑：</p><ol><li><strong>对于水塘中的样本，只要随机数不选到该样本，该样本就不会被替换</strong></li><li><strong>水塘的某个项一旦被替换，就不可能再回到水塘</strong>，不会出现被替换掉，然后再回到水塘的局面，这样就保证了问题不会进一步变得复杂。所以：<strong>某个项被保留的概率 = 被选中到水塘的概率 * 后续不被替换的概率</strong></li></ol><p>分类讨论，首k个样本最终存在于水塘中的概率，和其余样本最终存在于水塘中的概率：</p><ol><li>首k个样本，随便选一个做研究对象。被选中到水塘的概率为：1。（数组从1开始）从j=k+1开始考虑替换，第一次不被替换的概率是$\frac{k}{k+1}$，第二次不被替换的概率是$\frac{k+1}{k+2}$，第三次…，一直到最后一次不被替换的概率是$\frac{n-1}{n}$。<br><br>所以该项被保留的概率 = $1\times\frac{k}{k+1}\times\frac{k+1}{k+2}\times\frac{k+2}{k+3}\times\cdots\times\frac{n-1}{n}=\frac{k}{n}$</li><li>一开始不在水塘中的那一部分，随便选一个做研究对象。被选中到水塘的概率为：$\frac{k}{j}$，后续不被替换的概率$\frac{j}{j+1}$，一直到$\frac{n-1}{n}$。<br><br>所以该项被保留的概率 = $\frac{k}{j}\times\frac{j}{j+1}\times\cdots\frac{n-1}{n}=\frac{k}{n}$</li></ol><p>到此我们就证明了所以样本最终存在于水塘中的概率都是$\frac{k}{n}$，这也完全符合了我们的数学期望。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>弄个流式数据我们这里没有条件，只能用伪代码模拟一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Data[] reservoirSampling(<span class="keyword">int</span> k, DataStream dataStream)&#123;</span><br><span class="line">    Data[] reservoir = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init pool</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;reservoir.length;i++)&#123;</span><br><span class="line">        reservoir[i] = dataStream.getCurrentData();</span><br><span class="line">        dataStream.toNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;!dataStream.isFinish();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> d = random.nextInt(i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(d&lt;k)&#123;</span><br><span class="line">            reservoir[d] = dataStream.getCurrentData();</span><br><span class="line">        &#125;</span><br><span class="line">        dataStream.toNext();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> reservoir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自己写json解释器</title>
      <link href="/blog/2019/01/10/%E8%87%AA%E5%B7%B1%E5%86%99Json%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
      <url>/blog/2019/01/10/%E8%87%AA%E5%B7%B1%E5%86%99Json%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近发现自己似乎除了公司的项目外，基本没什么别的项目。有一个gitbook正在制作（严格来说并不是项目）：<a href="https://liuqinh2s.gitbooks.io/leetcode/" target="_blank" rel="noopener">leetcode刷题笔记</a>。最近一直在语雀上看阮一峰的每周分享，在第四期中看到这个：<a href="http://seriot.ch/parsing_json.php#1" target="_blank" rel="noopener">Douglas Crockford 的名片</a>。想来想去，觉得可以做几个解析器，比如<strong>json解析器</strong>，<strong>markdown解析器</strong>，<strong>正则表达式解析器</strong>等等，然后可以回过头再去看看编译原理，夯实基础。</p><p>说干就干，先深入了解一下json，并看看别人如何实现json的解析。</p><ul><li><a href="https://www.json.org/" target="_blank" rel="noopener">https://www.json.org/</a></li><li><a href="https://zhuanlan.zhihu.com/p/28049617" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28049617</a></li></ul><a id="more"></a><h2 id="json知识"><a href="#json知识" class="headerlink" title="json知识"></a>json知识</h2><p>json（JavaScript Object Notation，JavaScript对象记法），是一种数据交换语言（data-interchange format，也就是在传输数据的时候用的标记语言）。相比XML更加简洁易读。尽管json脱胎于JavaScript，但json已经是独立于语言的文本格式了。常见的应用场景有：<strong>WEB开发</strong>，<strong>NoSql数据库</strong>。</p><p><strong>json的结构有两种：</strong></p><ul><li>键值对。在其他语言中，又叫做：object（对象），record（记录），struct（结构体），dictionary（字典），hash table（哈希表），keyed list（键列），associative array（关联数组）。</li><li>数组。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/243235/1548817346559-bec98671-6891-4e18-9c1b-f7495f20fba7.gif#align=left&amp;display=inline&amp;height=113&amp;linkTarget=_blank&amp;originHeight=113&amp;originWidth=598&amp;size=0&amp;width=598" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/243235/1548817346985-ad605362-85e9-4122-873c-3ea760702448.gif#align=left&amp;display=inline&amp;height=113&amp;linkTarget=_blank&amp;originHeight=113&amp;originWidth=598&amp;size=0&amp;width=598" alt=""></p><p><strong>对于具体的值而言，有七种：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/243235/1548817346509-3ff705a1-3d80-4bb9-a007-6d7351d2ccc2.gif#align=left&amp;display=inline&amp;height=278&amp;linkTarget=_blank&amp;originHeight=278&amp;originWidth=598&amp;size=0&amp;width=598" alt=""></p><p>其中<code>true</code>、<code>false</code>、<code>null</code>这三种都是极其容易解析的，这里就不展示铁路图。下面展示一下<code>string</code>和<code>number</code>的铁路图。</p><p><strong>string：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/243235/1548817346617-bbaece81-ac6b-44c5-8f3b-c812282d09bb.gif#align=left&amp;display=inline&amp;height=413&amp;linkTarget=_blank&amp;originHeight=413&amp;originWidth=598&amp;size=0&amp;width=598" alt=""></p><p><code>string</code>只有两种特殊情况，且都比较简单：</p><ol><li>遇到<code>\</code>且后面是<code>u</code>，那么说明接下来的4个字节是一组的，组成一个unicode编码。<br></li><li>遇到<code>\</code>且后面不是<code>u</code>，那么只对后面紧跟的一个字节转义。<br></li></ol><p><strong>number：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/243235/1548817346858-d84fda0d-6473-44b3-b68e-e94d7e9de14a.gif#align=left&amp;display=inline&amp;height=266&amp;linkTarget=_blank&amp;originHeight=266&amp;originWidth=598&amp;size=0&amp;width=598" alt=""></p><p>这个图其实也很简单，首先是有负号或者没负号（如果是正数，不用写正号）；然后是数字部分，要么是0，要么是非0开头的一串数字。然后是小数点，然后是小数部分，然后是指数部分。</p><h2 id="开始写代码"><a href="#开始写代码" class="headerlink" title="开始写代码"></a>开始写代码</h2><p>代码地址：<a href="https://gist.github.com/liuqinh2s/9cdae8d5d6e476259d82d92c7da1cb93" target="_blank" rel="noopener">json解析器（java版）</a><br><strong>在json中解析一个值只需要看第一个字符就知道了，json的解析不需要先做tokenize。</strong><br>我们先对json字符串进行<code>trim()</code>操作，去除掉首位多余的空白符。<br>我们使用一个全局变量<code>index</code>，来记录读到哪个位置了。使用<code>ignoreWhiteSpace()</code>方法来略过空白符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ignoreWhiteSpace</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; json.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (json.charAt(index) &lt;= <span class="string">' '</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= json.length()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing value ArrayIndexOutOfBounds"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先针对模式进行匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">parseValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ignoreWhiteSpace();</span><br><span class="line">    <span class="keyword">switch</span> (json.charAt(index)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">            <span class="keyword">return</span> parseObject();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">            <span class="keyword">return</span> parseArray();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'n'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'N'</span>:</span><br><span class="line">            <span class="keyword">return</span> parseNull();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'T'</span>:</span><br><span class="line">            <span class="keyword">return</span> parseTrue();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">            <span class="keyword">return</span> parseFalse();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">            <span class="keyword">return</span> parseString();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> parseNumber();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当遇到一个<code>{</code>就代表接下来是一个键值对结构；当遇到一个<code>[</code>就知道接下来是一个数组结构。代码很清晰这里就不做解释了。我们看每种模式下的处理方法：<br>先挑最简单的，<code>null</code>、<code>true</code>、<code>false</code>的解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">parseNull</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (json.substring(index, index + <span class="number">4</span>).equals(<span class="string">"null"</span>)) &#123;</span><br><span class="line">        index += <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">parseTrue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (json.substring(index, index + <span class="number">4</span>).equals(<span class="string">"true"</span>) || json.substring(index, index + <span class="number">4</span>).equals(<span class="string">"True"</span>)) &#123;</span><br><span class="line">        index += <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">parseFalse</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (json.substring(index, index + <span class="number">5</span>).equals(<span class="string">"false"</span>) || json.substring(index, index + <span class="number">5</span>).equals(<span class="string">"False"</span>)) &#123;</span><br><span class="line">        index += <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很简单呢？我这里对首字母的大小写做了兼容，实际上官方的json规定是必须小写。<br>然后我们看看<code>string</code>的解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">parseString</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> firstChar = json.charAt(index);</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">int</span> recordIndex = index;</span><br><span class="line">    <span class="keyword">for</span> (; index &lt; json.length() &amp;&amp; json.charAt(index) != firstChar; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (json.charAt(index) == <span class="string">'\\'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.charAt(index + <span class="number">1</span>) == <span class="string">'u'</span>) &#123;</span><br><span class="line">                index += <span class="number">5</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (json.charAt(index) != firstChar) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing string"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.substring(recordIndex, index++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同样对单引号的字符串做了兼容，官方标准是必须用双引号。可以看到其实代码非常简单，遇到反斜杠就转义，并跳过转义的部分就行了。<br>然后我们看看<code>number</code>的解析，虽然我们把<code>parseNumber()</code>放在了default分支中，但其实合法的<code>number</code>的开头必须是在字符集：<code>-</code>、<code>0~9</code>里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">parseNumber</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ignoreWhiteSpace();</span><br><span class="line">    <span class="keyword">int</span> recordIndex = index;</span><br><span class="line">    <span class="keyword">boolean</span> hasDot = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; json.length() &amp;&amp; isNumberChar(json.charAt(index))) &#123;</span><br><span class="line">        <span class="keyword">if</span>(json.charAt(index)==<span class="string">'.'</span>)&#123;</span><br><span class="line">            hasDot = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    ignoreWhiteSpace();</span><br><span class="line">    <span class="keyword">return</span> hasDot?Double.parseDouble(json.substring(recordIndex, index)):Integer.parseInt(json.substring(recordIndex, index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">isNumberChar</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numChars.get(c) != <span class="keyword">null</span> || c &lt;= <span class="string">'9'</span> &amp;&amp; c &gt;= <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;Character, Boolean&gt; numChars = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parse</span><span class="params">(String json)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = &#123;<span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'e'</span>, <span class="string">'E'</span>, <span class="string">'.'</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">        numChars.put(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.json = json.trim();</span><br><span class="line">    <span class="keyword">return</span> parseValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，我只对<code>number</code>的字符集进行了校验，字符集包括：<code>-</code>、<code>+</code>、<code>e</code>、<code>E</code>、<code>.</code>以及<code>0~9</code>。所以它可以兼容<code>+05</code>这样的数字。<br>最后我们解析两种基本结构，这两种结构都可以包含子json对象，可想而知里面肯定要递归调用<code>parseValue</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map <span class="title">parseObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    index++;</span><br><span class="line">    ignoreWhiteSpace();</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (index &lt; json.length() &amp;&amp; json.charAt(index) != <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">        String key = parseString();</span><br><span class="line">        ignoreWhiteSpace();</span><br><span class="line">        <span class="keyword">if</span> (json.charAt(index++) != <span class="string">':'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing :"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object value = parseValue();</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        ignoreWhiteSpace();</span><br><span class="line">        <span class="keyword">if</span> (json.charAt(index) == <span class="string">','</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        ignoreWhiteSpace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (json.charAt(index++) != <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List <span class="title">parseArray</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    index++;</span><br><span class="line">    ignoreWhiteSpace();</span><br><span class="line">    List&lt;Object&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (index &lt; json.length() &amp;&amp; json.charAt(index) != <span class="string">']'</span>) &#123;</span><br><span class="line">        arrayList.add(parseValue());</span><br><span class="line">        <span class="keyword">if</span> (json.charAt(index) == <span class="string">','</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        ignoreWhiteSpace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (json.charAt(index++) != <span class="string">']'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"illegal json string, while parsing array"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrayList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到这儿，一个简单且完整的json解析器就完成了。代码中需要注意的是<code>index</code>的增加，解析完了一个部分，就要加一。</p><p>如果有任何问题或者建议欢迎联系我，<img src="http://wx2.sinaimg.cn/mw690/006zFO3ggy1fzofc13iqfj30ku0fv0su.jpg" width="40px" style="display: inline!important; margin: 0; border: none;">：1479001484</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$的证明</title>
      <link href="/blog/2019/01/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9E%81%E9%99%90%E7%9A%84%E8%AF%81%E6%98%8E/"/>
      <url>/blog/2019/01/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9E%81%E9%99%90%E7%9A%84%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>高数中的第一个证明，可能就是这个$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$的证明了。下面给出这个极限的证明，用到了解析几何（作图法）。</p><a id="more"></a><blockquote><p>作图工具 Geometry</p></blockquote><p><img src="https://i.loli.net/2019/01/07/5c3351ce31372.jpg" alt="1546867129927.jpg"></p><p>如图我们可以看到，有一个单位圆，圆心为 $A$ ，线段 $CE$ 的长度等于 $\sin x$，线段 $CB$ 是 <strong>弦</strong>（我们令他等于 $a$），弧 $\overset{\frown} {CB}$ 的长度就是 $x$，线段DB的长度等于 $\tan x$。</p><p>它们的长度的大小关系我们很容易得出：</p><ol><li>$\sin x &lt; a$，因为三角形的直角边小于斜边</li><li>$a &lt; x$，因为两点之间线段最短</li><li>$x &lt; \tan x$，这个略微不那么直接，可以用面积法（通过比较面积继而得到表达式中两个未知数的大小关系），扇形 $CAB$ 的面积：$\frac{1}{2} \cdot 1 \cdot x$ ，三角形 $\triangle DAB$ 的面积：$\frac{1}{2} \cdot 1 \cdot \tan x$ 。而 $CAB$ 的面积小于 $DAB$ 的面积。所以得到 $x &lt; \tan x$</li></ol><p>由此我们得到不等式：$\sin x &lt; x &lt; \tan x$ (当 $x&gt;0$ )，同时除以 $\sin x$，得到：$1 &lt; \frac{x}{\sin x} &lt; \frac{1}{\cos x}$。</p><p>当 $x<0$ 时，显然="" $\sin="" x=""> x &gt; \tan x$，同时除以 $\sin x$（除以负数要变号），得到：$1 &lt; \frac{x}{\sin x} &lt; \frac{1}{\cos x}$。</0$></p><p>令 $x\rightarrow 0^{-}$，由夹逼定理得到左极限 $\lim\limits_{x\rightarrow 0^{-}} \frac{\sin x}{x} = 1$ </p><p>令 $x\rightarrow 0^{+}$，由夹逼定理得到右极限 $\lim\limits_{x\rightarrow 0^{+}} \frac{\sin x}{x} = 1$ </p><p>最终可以得到：$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$ （左右极限都等于1）</p>]]></content>
      
      
      <categories>
          
          <category> 高数 </category>
          
          <category> 证明 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js实现sleep方法的最佳实践</title>
      <link href="/blog/2018/11/22/js%E5%AE%9E%E7%8E%B0sleep%E6%96%B9%E6%B3%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/blog/2018/11/22/js%E5%AE%9E%E7%8E%B0sleep%E6%96%B9%E6%B3%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p><code>setTimeout</code>是异步的，跟其他语言里的<code>sleep</code>和<code>delay</code>并不一样，不能阻塞住程序。上网查了之后发现js没有自带的sleep方法，那么如何自己实现sleep方法呢？</p><p><a href="https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep" target="_blank" rel="noopener">What is the JavaScript version of sleep()?</a></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Taking a break...'</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Two seconds later'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo();</span><br></pre></td></tr></table></figure><p><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">async</a></p><p><code>await</code> 表达式会暂停当前 async function 的执行，等待 Promise 处理完成。若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 async function。</p><p>若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</p><p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p><blockquote><p>如果你对箭头函数不了解，可以先去了解一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>。</p></blockquote><p>这里利用了<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise</a>对象。有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise本身是一个容器，这个对象里面有两个回调方法和三种状态：</p><p>回调方法：<code>resolve</code>（此函数的作用是：将Promise对象的状态从“未完成”变为“成功”，即从pending变为fulfilled，并将value作为操作的结果返回出去）和<code>reject</code>（此函数的作用是：将将Promise对象的状态从“未完成”变为”失败“，即从pending变为rejected，并将value作为操作的结果返回出去）<br>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved（也就是fulfilled）时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p><h2 id="JavaScript是单线程的"><a href="#JavaScript是单线程的" class="headerlink" title="JavaScript是单线程的"></a>JavaScript是单线程的</h2><p><a href="https://developers.google.com/web/fundamentals/primers/promises?hl=zh-cn" target="_blank" rel="noopener">JavaScript Promise：简介</a></p><h2 id="JavaScript生成一个对象"><a href="#JavaScript生成一个对象" class="headerlink" title="JavaScript生成一个对象"></a>JavaScript生成一个对象</h2><p>var a = new Object;</p><h2 id="JavaScript继承机制"><a href="#JavaScript继承机制" class="headerlink" title="JavaScript继承机制"></a>JavaScript继承机制</h2><p><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">Javascript继承机制的设计思想</a></p><p>阮一峰这篇文章并没有将彻底，他少了一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOG</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　DOG.prototype = &#123; <span class="attr">species</span> : <span class="string">'犬科'</span> &#125;;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> dogA = <span class="keyword">new</span> DOG(<span class="string">'大毛'</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> dogB = <span class="keyword">new</span> DOG(<span class="string">'二毛'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  DOG.prototype.species = <span class="string">'猫科'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 　　console.log(dogA.species); // 猫科</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 　　console.log(dogB.species); // 猫科</span></span><br><span class="line"></span><br><span class="line">　　dogA.species = <span class="string">"犬科"</span></span><br><span class="line"></span><br><span class="line">　　dogA.__proto__.species = <span class="string">"hhhhh"</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(dogA.species); <span class="comment">// 猫科</span></span><br><span class="line"></span><br><span class="line">　　<span class="built_in">console</span>.log(dogB.species); <span class="comment">// 猫科</span></span><br></pre></td></tr></table></figure><p>如果真的想理解，应该从对象的内存模型入手。</p><h2 id="JavaScript作用域"><a href="#JavaScript作用域" class="headerlink" title="JavaScript作用域"></a>JavaScript作用域</h2><p>let是局部声明的，var是全局声明</p><h2 id="JavaScript-单线程与异步"><a href="#JavaScript-单线程与异步" class="headerlink" title="JavaScript 单线程与异步"></a>JavaScript 单线程与异步</h2><p><img src="https://juejin.im/entry/598d21d251882548bd4dbf53#comment" alt="JavaScript 单线程与异步"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程珠玑系列笔记 -- 第二章 啊哈！算法</title>
      <link href="/blog/2018/11/06/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B02/"/>
      <url>/blog/2018/11/06/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<p>本书的另一个中心思想显而易见：<strong>良好的算法是程序性能提升的关键。</strong></p><p>下面还是通过探讨几个实例，来领会一下算法的重要性。</p><a id="more"></a><h2 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h2><p>A. 给定一个最多包含40亿个随机排列的32位整数的顺序文件，找出一个不在文件中的32位整数(在文件中至少缺失一个这样的数 - - 为什么? )。在具有足够内存的情况下，如何解决该问题?如果有几个外部的“临时”文件可用，但是仅有几百字节的内存，又该如何解决该问题?</p><p>至少缺失一个这样的数是因为：32位无符号整数的表示范围是<code>0 到 4,294,967,295</code>，比40亿大：。如果有足够的内存，可以采用第一章的位图表示法，需要的内存是：<code>4 000 000 000/8 = 500 000 000</code>，500MB的内存。而且我们需要使用二分查找来加速查找过程，顺序遍历500MB的空间是很慢的。使用二分查找对这种量大的数据集是非常重要的手段，但 <strong>二分查找的基础是数据集有序</strong>。所以初看这里是没法直接使用二分法的，但是如果我们这样想：32位整数的每一位不是0就是1，我们按照第1位划分的话，就可以划分出两个集合（需要遍历全部数据一遍），如果某个集合小于 $2^{31}$ 个数就选中成为我们下一次划分的对象（如果两个集合都小于 $2^{31}$ 就随便选一个），直到我们得到一个空集，而这个空集中本来应该存在的那些数，就是缺失的数了。在划分集合的时候，我们实际上要把数据存到硬盘中，可以使用buffer来减少IO次数。最坏时间复杂度是一个等比数列：</p><script type="math/tex; mode=display">n+\frac{1}{2}n+\cdots+1 = 2n</script><p>可见这里的二分法并没有起到<code>logN</code>的效果。需要遍历的二分法还算什么二分法呢？但庆幸的是，我们至少可以解决这一题。</p><p>B. 将一个n元一维向量左旋转i个位置。例如，当n=8且i=3时，向量abcdefgh旋转为defghabc。简单的代码使用一个n元的中间向量在n步内完成该工作。你能否仅使用数十个额外字节的存储空间，在正比于n的时间内完成向量的旋转？</p><p>方法1：将前i个元素复制到一个临时空间，余下的n-i个元素向左移i个位置，最后将最初的i个元素从临时空间复制到x中余下的位置。时间复杂度：2i+(n-i)=n+i，也就是O(n)；空间复杂度：i，也就是O(n)。</p><p>方法2：使用类似方法1的办法，但只使用一个元素大小的临时空间，每次只移动一位，总共需要移动i次。时间复杂度：(n+1)*i，也就是O(n^2)；空间复杂度：O(1)。</p><p>方法3：杂技算法。第一步：移动<code>x[0]</code>到临时变量t，然后移动<code>x[i]</code>到<code>x[0]</code>，<code>x[2i]</code>到<code>x[i]</code>，依此类推（将x中的所有下标对n取模），直至返回到取<code>x[0]</code>中的元素，此时改为从t取值然后终止过程。第二步：如果该过程没有移动全部元素，就从<code>x[1]</code>开始再次进行移动（执行第一步的算法操作），直到所有的元素都已经移动为止。</p><p>这个算法的核心思想应该是这样的：<strong>将该数组序列看成是一个环状队列，每次执行第一步的算法都可以使一组元素落到它们最终的位置上，而又不影响到其它元素。</strong></p><p>第二步执行的次数是<a href="https://zh.wikipedia.org/zh-hans/%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B8" target="_blank" rel="noopener"><code>GCD(n,i)</code></a>（n和i的最大公约数）。这样一来我们就不用记录元素是否移动过这个状态了，直接就可以知道循环多少次。</p><p>该算法的时间复杂度：n+GCD(n,i)，也就是O(n)。空间复杂度：O(1)。</p><p>这个算法虽然表现不错，但是不便于理解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a%b?gcd(b, a%b): b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acrobat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">20</span>, i=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;gcd(n,i);j++)&#123;</span><br><span class="line">        temp = a[j];</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*(count+<span class="number">1</span>)%n == <span class="number">0</span>)&#123;</span><br><span class="line">                a[j+i*count%n] = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                a[j+i*count%n] = a[j+i*(count+<span class="number">1</span>)%n];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    acrobat();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"out"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法4：递归算法。旋转向量x其实就是交换向量ab的两段，得到向量ba。这里a代表x中的前i个元素。假设a比b短，将b分为$b_l$和$b_r$，使得$b_r$具有与a相同的长度。交换a和$b_r$，也就将$ab_l b_r$转换为$b_r b_l a$。序列a此时已处于其最终的位置，因此现在的问题就集中到交换b的部分。由于新的问题与原来的问题具有相同的形式，我们可以递归解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别从i和j位置开始，交换k个元素</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;k;p++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a[i+p];</span><br><span class="line">        a[i+p] = a[j+p];</span><br><span class="line">        a[j+p] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从i位置开始，处理左leni，右lenj的旋转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> leni, <span class="keyword">int</span> lenj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(leni == lenj)&#123;</span><br><span class="line">        swap(a, i, i+leni, leni);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(leni&lt;lenj)&#123;</span><br><span class="line">        swap(a, i, i+lenj, leni);</span><br><span class="line">        first(a, i, leni, lenj-leni);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        swap(a, i, i+leni, lenj);</span><br><span class="line">        first(a, i+lenj, leni-lenj, lenj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法5：三次翻转: $(a^r b^r)^r = ba$。从ab开始，首先对a求逆，得到$a^r b$，然后对b求逆，得到$a^r b^r$。最后对整体求逆，得到$(a^r b^r)^r$，此时恰好就是ab。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reverse(0, i-1) /* cbadefgh */</span><br><span class="line">reverse(i, n-1) /* cbahgfed */</span><br><span class="line">reverse(0, n-1) /* defghabc */</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从i位置开始，到j位置结束(包含j)，翻转这一段的a中的元素</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(j+<span class="number">1</span>-i)/<span class="number">2</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a[k+i];</span><br><span class="line">        a[k+i] = a[j-k];</span><br><span class="line">        a[j-k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//i位置是b段的开始，总长度n</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">res</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    reverse(a, <span class="number">0</span>, i<span class="number">-1</span>);</span><br><span class="line">    reverse(a, i, n<span class="number">-1</span>);</span><br><span class="line">    reverse(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C. 给定一个英语字典，找出其中的所有变位词集合。例如，“pots”、“stop”、“tops”互为变位词，因此每一个单词都可以通过改变其他单词中字母的顺序来得到。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《编程珠玑》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编程珠玑系列笔记 -- 第一章 开篇</title>
      <link href="/blog/2018/11/05/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B01/"/>
      <url>/blog/2018/11/05/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>本书的中心思想：<strong>对实例研究的深入思考不仅有趣，而且可以获得实际的益处。</strong></p><p>规律和智慧都隐藏在实例之中，而我们通过实例来窥探它们。实例是道的载体。</p><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>明确问题，一旦问题明确，这场战役就成功了90%。</p><p>确定用户的真实需求是程序设计的根本。</p><p>简单的程序通常比具有相同功能的复杂程序更可靠、更安全、更健壮、更高效，而且易于实现和维护。因为简单的程序往往更具有概括性、更抽象、更能洞悉问题的本质。</p><a id="more"></a><h3 id="具体问题具体分析"><a href="#具体问题具体分析" class="headerlink" title="具体问题具体分析"></a>具体问题具体分析</h3><p>A：怎样给一个磁盘文件排序？<br>B：为什么非要自己写排序程序呢？为什么不用系统提供的排序程序呢？<br>A：我需要在一个大系统中排序。由于不明的技术原因，我不能使用系统中的文件排序程序。<br>B：需要排序的内容是什么？文件中有多少条记录？每条记录的格式是什么？<br>A：文件最多包含1千万条记录，每条记录都是7位的整数。<br>B：等一下，既然文件这么小，何必非要在非要在磁盘上进行排序呢？为什么不在内存里进行排序呢？<br>A：尽管机器有许多兆字节的内存，但排序功能只是大系统中的一部分，所以估计到时候只有1MB的内存可用。<br>B：你还能告诉我其他一些与记录相关的信息吗？<br>A：每条记录都是7位的正整数，再无其他相关数据。每个整数最多出现一次。</p><p>实际上问了这么多，提问者都没有主动将自己的问题无保留的告诉被求助对象，反而是被求助对象耐心的一点一点询问。问题的真实背景是这样的：</p><p>在美国，电话号码由3位区号后再跟7位数字组成，拨打含免费区号800（当时只有这一个号码）的电话是不收费的。这位程序员正在开发这类数据库处理系统的一小部分，需要排序的整数就是免费电话号码。输入文件是电话号码列表，号码重复出现算出错。期望的输出文件是以升序排列的电话号码列表。应用背景同时定义了相应的性能需求。当与系统的会话时间较长时，用户大约每小时请求一次有序文件，并且在排序未完成之前什么都做不了。因此，排序最多只允许执行几分钟，10秒钟是比较理想的运行时间。</p><h3 id="准确的问题描述"><a href="#准确的问题描述" class="headerlink" title="准确的问题描述"></a>准确的问题描述</h3><p><strong>输入：</strong> 一个最多包含n个正整数的文件，每个数都小于n，其中n=$10^7$。如果在输入文件中有任何整数重复出现就是致命错误。没有其他数据与该整数相关联。</p><p><strong>输出：</strong> 按升序排列的输入整数的列表。</p><p><strong>约束：</strong> 最多有（大约）1MB的内存可用，有充足的磁盘存储空间。运行时间最多几分钟，运行时间为10秒钟就不需要再优化了。</p><h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>传统的排序有归并排序、快速排序，一般人想到的都是使用一个4字节的int型来表示数据，但1000万的数据就需要40MB的内存，所以需要至少40趟排序，需要读取输入文件至少40次，这将会是非常大的开销。</p><p>很显然，我们真正要做的应该是压缩数据表示，如果能让所有数据一次读入内存（仅1MB）就好了。考虑到这一题的特殊性，我们使用长度为1000万位的位图来表示所有数据，每个整数都只占1bit，可以说是极限的数据表示法了。这样一来我们只需要125万个字节，也就是1.25MB内存。满足了一次读入内存的要求。</p><p>这种数据表示，利用了该问题的三个在排序问题中不常见的属性：</p><ol><li>输入数据限制在相对较小的范围内</li><li>数据没有重复</li><li>对每条记录而言，除了单一整数外，没有任何其他关联数据</li></ol><p>排序伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* phase 1: initialize set to empty */</span><br><span class="line">for i = [0, n)</span><br><span class="line">    bit[i]=0</span><br><span class="line">/* phase 2: insert present elements into the set */</span><br><span class="line">for each i in the input file</span><br><span class="line">    bit[i]=1</span><br><span class="line">/* phase 3: write sorted output */</span><br><span class="line">for i = [0, n)</span><br><span class="line">    if b[i]==1</span><br><span class="line">        write i on the output file</span><br></pre></td></tr></table></figure><p><strong>时间-空间折中与双赢：</strong> 随着现在存储器的空间越来越大，我们往往倾向于用空间换时间的算法，这种折中非常常见。但减少程序的运行空间需求也会减少其运行时间。空间需求的减少之所以会导致运行时间的减少，有两个原因：需要处理的数据变少了，意味着处理这些数据所需的时间也变少了。同时可以将这些数据保存在内存中而不是磁盘上，进一步避免了磁盘访问的时间（IO是巨大的开销，网络传递数据是更大的开销）。当然了，只有在设计远非最优的时候，才有可能时空双赢。</p><blockquote><p>折中在所有工程领域都存在。例如，汽车设计者可能会通过增加沉重的部件，用行驶里程的减少来换取更快的加速。但双赢是更好的结果。我对自己驾驶过的一辆小轿车做过一番研究，我观察到：“轿车基本结构重量的减少会使各底盘部件的重量进一步减少—甚至消除了对某些底盘部件的需求，例如转向助力系统。”</p></blockquote><h4 id="真实代码"><a href="#真实代码" class="headerlink" title="真实代码"></a>真实代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITSPERWORD 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIFT 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK 0x1F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N/BITSPERWORD];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    a[i&gt;&gt;SHIFT] |= (<span class="number">1</span>&lt;&lt;(i&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    a[i&gt;&gt;SHIFT] &amp;= ~(<span class="number">1</span>&lt;&lt;(i&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[i&gt;&gt;SHIFT] &amp; (<span class="number">1</span>&lt;&lt;(i&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        clear(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">set</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(test(i))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对移位操作熟悉的话就会知道，<code>i&gt;&gt;SHIFT</code>的意思就是<code>i/32</code>。<code>a[i&gt;&gt;SHIFT]</code>也就是定位到i所属的数组单元（每个数组单元4个字节）。而<code>i&amp;MASK</code>的意思是<code>i%32</code>，然后<code>(1&lt;&lt;(i&amp;MASK))</code>就定位了i在所属的数组单元中的具体位置。</p><p>但我们手上没有数据来测试我们的代码是否正确，测试数据可以用随机生成的办法产生，具体会在<a href="#">《编程珠玑第12章 取样问题》</a>中讲解。</p><p>接下来我们来看看习题：</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ol><li>如果不缺内存，如何使用一个具有库的语言来实现一种排序算法以表示和排序集合？</li></ol><p>使用C语言的标准库函数<code>qsort</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intcompare</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *x - *y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[n])!=EOF)&#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a, n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), intcompare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用C++的标准模板库中的容器<code>set</code>来完成相同任务：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator j;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; i)&#123;</span><br><span class="line">        S.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=S.begin();j&lt;S.end();j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如何使用位逻辑运算（例如与、或、移位）来实现位向量？</li></ol><p>代码上面已经给出：<a href="#真实代码">真实代码</a></p><ol><li><p>运行时效率是设计目标的一个重要组成部分，所得到的程序需要足够高效。在你自己的系统上实现位图排序并度量其运行时间。该时间与系统排序的运行时间以及习题1中排序的运行时间相比如何？假设n为10000000，且输入文件包含10000000个整数。</p></li><li><p>如果认真考虑了习题3，你将会生成小于n且没有重复的k个整数的问题。最简单的方法就是使用前k个正整数。这个极端的数据集合将不会明显地改变位图方法的运行时间，但是可能会歪曲系统排序的运行时间。如何生成位于0至n-1之间的k个不同的随机顺序的随机整数？尽量使你的程序简短且高效。</p></li><li><p>那个程序员说他有1MB的内存空间可用，但是我们概要描述的代码需要1.25MB内存。他可以不费力的索取到额外的空间。如果1MB空间是严格的边界，你会推荐如何处理呢？你的算法的运行时间又是多少？</p></li></ol><p>使用位图表示1 000万个数需要1000万个位，或者说125万字节。考虑到没有以数字0或1打头<br>的电话号码，我们可以将内存需求降低为100万字节。另一种做法是采用两趟算法，首先使用<br>5 000 000/8=625 000个字的存储空间来排序0~4 999 999之间的整数，然后在第二趟排序5 000 000~9 999 999的整数。k趟算法可以在kn的时间开销和n/k的空间开销内完成对最多n个小于n的无重复正整数的排序。</p><ol><li>如果那个程序员说的不是每个整数最多出现一次，而是每个整数最多出现10次，你又如何建议他呢？你的解决方案如何随着可用存储空间总量的变化而变化？</li></ol><p>如果每个整数最多出现10次，那么我们就可以使用4位的半字节来统计它出现的次数。利用习题5的答案，我们可以使用10 000 000/2个字节在1趟内完成对整个文件的排序，或使用10 000 000/2k个字节在k趟内完成对整个文件的排序。</p><ol><li>使用更多的空间来换取更少的运行时间存在一个问题：初始化空间本身需要消耗大量的时间。说明如何设计一种技术，在第一次访问向量的项时将其初始化为0。你的方案应该使用常量时间进行初始化和向量访问，使用的额外空间应正比于向量的大小。因为该方法通过进一步增加空间来减少减少初始化的时间，所以仅在空间很廉价、时间很宝贵且向量很稀疏的情况下才考虑使用。</li></ol><p>借助于两个额外的n元向量from、to和一个整数top，from和to也都没有初始化过，top初始化为0。当我们访问索引为i的data元素，想要知道<code>data[i]</code>有没有初始化过。如果<code>from[i]&lt;top</code>且<code>to[from[i]]=i</code>，那么说明已经初始化过。to数组就是用来记录已经访问过哪些data元素的，实际上to数组可以是一个<a href="https://zh.wikipedia.org/zh/Vector_(STL" target="_blank" rel="noopener">动态数组</a>)。</p><p><img src="../../../../images/2018/编程珠玑第一章1.png" width="300px"></p><p>下面代码实现对data[i]的首次访问：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from[i] = top;</span><br><span class="line">to[top] = i;</span><br><span class="line">data[i] = <span class="number">0</span>;</span><br><span class="line">top++;</span><br></pre></td></tr></table></figure><ol><li>在成本低廉的隔日送达时代之前，商店允许顾客通过电话订购商品，并在几天后上门自取。商店的数据库使用客户的电话号码作为其检索的主关键字（客户知道他们自己的电话号码，而且这些关键字几乎都是唯一的）。你如何组织商店的数据库，以允许高效的插入和检索操作？</li></ol><p>商店将纸质订单表格放在10x10的箱数组中，使用客户电话号码的最后两位作为散列索引。当客户打电话下订单时，将订单放到适当的箱中。当客户来取商品时，销售人员顺序搜索对应箱中的订单—这就是经典的“用顺序搜索来解决冲突的开放散列”。电话号码的最后两位数字非常接近于随机，因此是非常理想的散列函数，而最前面的两位数字则很不理想 - - 为什么?一些市政机关使用类似的方案在记事本中记录信息。</p><ol><li>在20世纪80年代早期，洛克希德公司加利福尼亚州桑尼维尔市工厂的工程师每天都要将许多由计算机辅助设计（CAD）系统生成的图纸从工厂送到位于圣克鲁斯市的测试站。虽然仅有40公里远，但使用汽车快递服务每天都需要一个多小时的时间（由于交通阻塞和山路崎岖），花费100美元。请给出新的数据传输方案并估计每一种方案的费用。</li></ol><p>两地的计算机原先是通过微波连接的，但是当时测试站打印图纸所需的打印机却非常昂贵。因此，该团队在主厂绘制图纸，然后拍摄下来并通过信鸽把35毫米的底片送到测试站，在测试站进行放大并打印成图片。鸽子来回一.次需要45分钟，是汽车所需时间的一半，并且每天只需要花费几美元。在项目开发的16个月中，信鸽传送了几百卷底片，仅丢失了两卷(当地有鹰，因此没有让信鸽传送机密数据)。由于现在打印机比较便宜，因此可以使用微波链路解决该问题。</p><ol><li>载人航天的先驱们很快就意识到需要在外太空的极端环境下实现顺利书写。民间盛传美国国<br>家宇航局(NASA)花费100万美元研发出了一种特殊的钢笔来解决这个问题。那么，前苏联又会如何解决相同的问题呢?</li></ol><p>看过三傻大闹宝莱坞的都知道，前苏联用的是铅笔，但铅笔的碎屑由于失重漂浮在空中会是很麻烦的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《编程珠玑》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是回调</title>
      <link href="/blog/2018/11/04/%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9E%E8%B0%83/"/>
      <url>/blog/2018/11/04/%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9E%E8%B0%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/11/04/5bdeaff01640b.png" alt="回调2.png"></p><p>打个比方，有一家旅馆提供叫醒服务，但是要求旅客自己决定叫醒的方法。可以是打客房电话，也可以是派服务员去敲门，睡得死怕耽误事的，还可以要求往自己头上浇盆水。这里，“叫醒”这个行为是旅馆提供的，相当于库函数，但是叫醒的方式是由旅客决定并告诉旅馆的，也就是回调函数。而旅客告诉旅馆怎么叫醒自己的动作，也就是把回调函数传入库函数的动作，称为登记回调函数（to register a callback function）。</p><p>在回调中，我们利用某种方式，把回调函数像参数一样传入中间函数。可以这么理解，在传入一个回调函数之前，中间函数是不完整的。换句话说，程序可以在运行时，通过登记不同的回调函数，来决定、改变中间函数的行为。这就比简单的函数调用要灵活太多了。</p><a id="more"></a><h2 id="什么是回调函数？"><a href="#什么是回调函数？" class="headerlink" title="什么是回调函数？"></a>什么是回调函数？</h2><p>我们绕点远路来回答这个问题。<br>编程分为两类：系统编程（system programming）和应用编程（application programming）。所谓系统编程，简单来说，就是编写库；而应用编程就是利用写好的各种库来编写具某种功用的程序，也就是应用。系统程序员会给自己写的库留下一些接口，即API（application programming interface，应用编程接口），以供应用程序员使用。所以在抽象层的图示里，库位于应用的底下。<br>当程序跑起来时，一般情况下，应用程序（application program）会时常通过API调用库里所预先备好的函数。但是有些库函数（library function）却要求应用先传给它一个函数，好在合适的时候调用，以完成目标任务。这个被传入的、后又被调用的函数就称为回调函数（callback function）。<br>打个比方，有一家旅馆提供叫醒服务，但是要求旅客自己决定叫醒的方法。可以是打客房电话，也可以是派服务员去敲门，睡得死怕耽误事的，还可以要求往自己头上浇盆水。这里，“叫醒”这个行为是旅馆提供的，相当于库函数，但是叫醒的方式是由旅客决定并告诉旅馆的，也就是回调函数。而旅客告诉旅馆怎么叫醒自己的动作，也就是把回调函数传入库函数的动作，称为登记回调函数（to register a callback function）。如下图所示（图片来源：维基百科）：</p><p><img src="https://i.loli.net/2018/11/04/5bdeaff0d9711.png" alt="回调1.png"></p><p>可以看到，回调函数通常和应用处于同一抽象层（因为传入什么样的回调函数是在应用级别决定的）。而回调就成了一个高层调用底层，底层再回过头来调用高层的过程。（我认为）这应该是回调最早的应用之处，也是其得名如此的原因。<br>回调机制的优势<br>从上面的例子可以看出，回调机制提供了非常大的灵活性。请注意，从现在开始，我们把图中的库函数改称为中间函数了，这是因为回调并不仅仅用在应用和库之间。任何时候，只要想获得类似于上面情况的灵活性，都可以利用回调。<br>这种灵活性是怎么实现的呢？乍看起来，回调似乎只是函数间的调用，但仔细一琢磨，可以发现两者之间的一个关键的不同：在回调中，我们利用某种方式，把回调函数像参数一样传入中间函数。可以这么理解，在传入一个回调函数之前，中间函数是不完整的。换句话说，程序可以在运行时，通过登记不同的回调函数，来决定、改变中间函数的行为。这就比简单的函数调用要灵活太多了。请看下面这段Python写成的回调的简单示例：</p><p><code>even.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回调函数1</span></span><br><span class="line"><span class="comment">#生成一个2k形式的偶数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#回调函数2</span></span><br><span class="line"><span class="comment">#生成一个4k形式的偶数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadruple</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>callback_demo.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> even <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#中间函数</span></span><br><span class="line"><span class="comment">#接受一个生成偶数的函数作为参数</span></span><br><span class="line"><span class="comment">#返回一个奇数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOddNumber</span><span class="params">(k, getEvenNumber)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + getEvenNumber(k)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#起始函数，这里是程序的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>    </span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="comment">#当需要生成一个2k+1形式的奇数时</span></span><br><span class="line">    i = getOddNumber(k, double)</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment">#当需要一个4k+1形式的奇数时</span></span><br><span class="line">    i = getOddNumber(k, quadruple)</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment">#当需要一个8k+1形式的奇数时</span></span><br><span class="line">    i = getOddNumber(k, <span class="keyword">lambda</span> x: x * <span class="number">8</span>)</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行<code>callback_demp.py</code>，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>上面的代码里，给<code>getOddNumber</code>传入不同的回调函数，它的表现也不同，这就是回调机制的优势所在。值得一提的是，上面的第三个回调函数是一个匿名函数。</p><blockquote><p>编程思想中有一条很重要的原则就是：<strong>尽量少的改动已有的代码</strong>，原因有很多，比如改动一个被多处使用的函数有可能会对很多地方造成影响。所以我们就要 <strong>尽量让我们的代码灵活起来，可重复用起来</strong>，Java的反射就起到了这个作用，Spring框架最重要的作用就是让灵活的部分变成配置，程序动态加载配置就能改变代码的行为。回调也同样是在贯彻这一思想。<strong>可重用</strong> 是编程思想的精髓之一，甚至所有的抽象就都是为了这一目的，无论是<code>变量</code>、<code>函数</code>、<code>对象</code>、<code>数据结构</code>、<code>库</code>、<code>API</code>都是把死的代码变成活的，把不能重复使用的代码变成可以重复使用的代码。<a href="#阿里和蚂蚁八荣八耻">阿里和蚂蚁八荣八耻</a></p><p>其实面向对象的语言中传递回调函数并不是直接传函数，而是传对象，然后使用对象就可以引用到里面的回调方法了。</p></blockquote><h2 id="易被忽略的第三方"><a href="#易被忽略的第三方" class="headerlink" title="易被忽略的第三方"></a>易被忽略的第三方</h2><p>通过上面的论述可知，中间函数和回调函数是回调的两个必要部分，不过人们往往忽略了回调里的第三位要角，就是中间函数的调用者。绝大多数情况下，这个调用者可以和程序的主函数等同起来，但为了表示区别，我这里把它称为起始函数（如上面的代码中注释所示）。<br>之所以特意强调这个第三方，是因为我在网上读相关文章时得到一种印象，很多人把它简单地理解为两个个体之间的来回调用。譬如，很多中文网页在解释“回调”（callback）时，都会提到这么一句话：“If you call me, I will call you back.”我没有查到这句英文的出处。我个人揣测，很多人把起始函数和回调函数看作为一体，大概有两个原因：第一，可能是“回调”这一名字的误导；第二，给中间函数传入什么样的回调函数，是在起始函数里决定的。实际上，回调并不是“你我”两方的互动，而是ABC的三方联动。有了这个清楚的概念，在自己的代码里实现回调时才不容易混淆出错。<br>另外，回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。这里不打算对这两个概念做更深入的讨论，之所以把它们提出来，也是为了说明强调起始函数的重要性。网上的很多文章，提到这两个概念时，只是笼统地说阻塞式回调发生在主调函数返回之前，却没有明确这个主调函数到底是起始函数还是中间函数，不免让人糊涂，所以这里特意说明一下。另外还请注意，本文中所举的示例均为阻塞式回调。延迟式回调通常牵扯到多线程。</p><h2 id="阿里和蚂蚁八荣八耻"><a href="#阿里和蚂蚁八荣八耻" class="headerlink" title="阿里和蚂蚁八荣八耻"></a>阿里和蚂蚁八荣八耻</h2><p>以动手实践为荣，以只看不练为耻。</p><p>以打印日志为荣，以出错不报为耻。</p><p>以局部变量为荣，以全局变量为耻。</p><p>以单元测试为荣，以手工测试为耻。</p><p>以代码重用为荣，以复制粘贴为耻。</p><p>以多态应用为荣，以分支判断为耻。</p><p>以定义常量为荣，以魔法数字为耻。</p><p>以总结思考为荣，以不求甚解为耻。</p><p>以可配置为荣 ，以硬编码为耻</p><p>以可互备为荣 ，以单点为耻</p><p>以可无状态为荣 ，以有状态为耻</p><p>以可随便重启为荣 ，以不能迁移为耻</p><p>以整体交付为荣，以部分交付为耻</p><p>以标准化为荣，以特殊化为耻</p><p>以自动化运维为荣，以人肉化运维为耻</p><p>以无人值守为荣，以人工值班为耻</p>]]></content>
      
      
      <categories>
          
          <category> 编程概念 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>精通一款编辑器之sublime text 3</title>
      <link href="/blog/2018/11/04/%E7%B2%BE%E9%80%9A%E4%B8%80%E6%AC%BE%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8Bsublime%20text%203/"/>
      <url>/blog/2018/11/04/%E7%B2%BE%E9%80%9A%E4%B8%80%E6%AC%BE%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8Bsublime%20text%203/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器常用功能"><a href="#编辑器常用功能" class="headerlink" title="编辑器常用功能"></a>编辑器常用功能</h2><ol><li>格式化代码：格式化代码可以让你不用管代码的格式，可以放肆的写程序，你可以少敲很多空格，不用关心代码的格式问题，机器给出的代码格式风格统一且漂亮，一键解决你的格式问题，真是提高码代码效率的非常重要的功能。</li><li>查找文件：查找文件是在集成开发的时候非常重要的功能，当文件多起来的时候，快速定位到文件可以节省很多时间，甚至有时候文件实在太多，你只能通过查找的方式找到那个文件。</li><li>正则全文件查找和替换：轻松让你更改全局变量和配置，这是一个必须的功能，没有它简直无法想象工作量有多大。</li><li>代码收缩和扩展：代码太长怎么办，收缩和扩展啊。</li></ol><a id="more"></a><h2 id="安装卸载插件"><a href="#安装卸载插件" class="headerlink" title="安装卸载插件"></a>安装卸载插件</h2><ol><li><code>cmd+shift+p</code>：打开命令板，输入<code>install</code>，点击：<strong>Package Control: Install Package</strong>选项，然后搜索你想要的插件。</li><li>卸载请在命令板输入：<code>remove</code>，点击：<strong>Package Control: Remove Package</strong>选项。其实卸载无非就是两个词：<code>remove</code>和<code>uninstall</code>，多试试就行了。</li></ol><blockquote><p>打开命令板之后什么都不想干，怎么关闭命令板呢？其实很简单，再按一次打开命令板的快捷键就行了，<strong>开关都用同一个键或者按钮（术语叫：toggle，可开可关），这是比较通用设计理念</strong>。</p></blockquote><h2 id="vue-插件"><a href="#vue-插件" class="headerlink" title="vue 插件"></a>vue 插件</h2><ol><li><strong>vue-syntax-highlight</strong>：可以让<code>.vue</code>文件高亮。</li><li><strong>HTML-CSS-JS Prettify</strong>：可以格式化这三种语言的代码，特别是单文件的vue，非常需要这个来同时格式化三种语言。不过需要配置一下。工具栏路径：<code>Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; HTML/CSS/JS Prettify -&gt; Plugin Options - Default</code>，然后搜索：<code>allowed_file_extensions</code>，给这个配置项添加一个<code>vue</code>即可，要注意的是有四处有这个配置项，分别是<code>html</code>、<code>css</code>、<code>js</code>、<code>json</code>，如果你想它们全都能格式化，自然是要全都添加<code>vue</code>，但实验证明只加html里面就行了，如果在其他几个里面加反而引起了冲突。然后格式化代码的快捷键是什么呢？同样也有配置文件的，工具栏路径：<code>Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; HTML/CSS/JS Prettify -&gt; Keyboard Shortcuts - Default</code>，可以看到：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+shift+h&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;p&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_prettify_prefs&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;o&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_plugin_options&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;k&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_keyboard_shortcuts&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;n&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_node_path&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>第一项即为使用这个插件的快捷键，也就是格式化代码的快捷键。</p><h2 id="底栏设置显示文件编码"><a href="#底栏设置显示文件编码" class="headerlink" title="底栏设置显示文件编码"></a>底栏设置显示文件编码</h2><p>在mac osx上一不小心按了cmd+shift+c，文件的存储格式现在变成了GBK格式，当我再按下cmd+s保存时，提示我UTF-8格式的文件不能用GBK格式来保存。怎么解决这个问题呢？首先我想查看这个文件是什么编码，Sublime Text的默认设置是不开启显示编码的，如果想开启，可通过菜单Perference → Settings – User，在打开的配置文件里 ，在大括号后面，增加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Display file encoding in the status bar</span><br><span class="line">&quot;show_encoding&quot;: true,</span><br><span class="line">// Display line endings in the status bar</span><br><span class="line">&quot;show_line_endings&quot;: true,</span><br></pre></td></tr></table></figure><p>此时保存该配置文件，就能够看到sublime最底下一行会显示文件编码格式了。以上的配置内容在Perference → Setting─Default都是false的。</p><p>然后在底栏点击文件编码，点击reopen with encoding，然后选择utf-8，然后cmd+w关闭窗口，然后cmd+shift+t重新打开刚刚关闭的窗口，就一切恢复正常了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>熟练使用JetBrains家的IDE</title>
      <link href="/blog/2018/11/04/%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8JetBrains%E5%AE%B6%E7%9A%84IDE/"/>
      <url>/blog/2018/11/04/%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8JetBrains%E5%AE%B6%E7%9A%84IDE/</url>
      
        <content type="html"><![CDATA[<h2 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a>通用快捷键</h2><ol><li>格式化代码（reformat code）:<br>win: ctrl+alt+L<br>mac: command+option+L</li><li>在一行的任意位置使用： shift + enter，新建下一行并跳到下一行。</li><li>善用代码自动补全功能，变量名和方法名等可以用 enter 补全。导入包可以用 alt + enter。</li><li>上下移动代码，ctrl+shift+上下键</li><li>Android Studio 生成函数注释：你在方法前输入/**然后一回车，自动帮你生成方法和参数的注释。</li></ol><a id="more"></a><h2 id="Intellj-Idea"><a href="#Intellj-Idea" class="headerlink" title="Intellj Idea"></a>Intellj Idea</h2><p>快速打出常用语句：</p><ol><li><strong>sout</strong>：<code>System.out.println();</code></li><li><p><strong>psvm</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用IDE的右键中的生成Getter Setter选项自动生成Getter Setter，使用toString自动生成toString。</p></li><li><p>跳转到接口：<code>ctrl+b</code>； 跳转到实现类：<code>ctrl + alt +B</code></p></li><li><p><img src="../../../../images/2018/idea图解.png" alt=""></p></li></ol><p>上面这个按钮可以快速的在目录树中定位到当前类所在的路径</p><ol><li>ctrl+alt+t</li></ol><p><img src="../../../../images/2018/idea-ctrl+alt+t.png" alt="idea-ctrl+alt+t.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CSAPP》读书笔记 -- 第4章：处理器体系结构</title>
      <link href="/blog/2018/10/13/%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/blog/2018/10/13/%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>阅读这篇文章必须要对汇编码有足够的了解，如果你对IA32汇编码还不够了解，可以先看看这篇文章：<a href="../../08/程序的机器级表示">程序的机器级表示</a></p><h2 id="Y86指令集体系结构"><a href="#Y86指令集体系结构" class="headerlink" title="Y86指令集体系结构"></a>Y86指令集体系结构</h2><p>Y86指令集基本上是IA32指令集的一个子集。这个指令集就是我们处理器实现的目标。如下图：</p><p><img src="../../../../images/2018/Y86指令集.png" alt="Y86指令集"></p><a id="more"></a><p>IA32的movl指令分成了4个不同指令：irmovl、rrmovl、mrmovl和rmmovl，i表示立即数Immediate，r表示寄存器Register，m表示存储器Memmory。第一个字母表示源，第二个字母表示目的。</p><p>这里不实现的功能有：</p><ol><li>存储器引用方式是简单的基址+偏移量形式，不支持变址寄存器（second index register）和任何寄存器伸缩（scaling）。如果对操作数的结构不太了解可以看看这个：<a href="../../08/程序的机器级表示/#操作数指示符">操作数指示符</a></li><li>和IA32一样不允许从一个存储器直接传送到另一个存储器地址。</li><li>不允许立即数传送到存储器</li></ol><p>4个整数操作指令：addl、subl、andl、xorl</p><p>7个跳转指令：jmp、jle、jl、je、jne、jge、jg。</p><p>6个条件传送指令：cmovle、cmovl、cmove、cmovne、cmovge、cmovg。</p><p>另外还有：call、ret、pushl、popl，halt指令停止指令执行。IA32中有一个与之相当的指令hlt，IA32的应用程序不允许使用这条指令，因为它会导致整个系统暂停运行。对于Y86来说，执行halt指令会导致处理器停止，并将状态码设置为HLT。</p><h3 id="指令编码"><a href="#指令编码" class="headerlink" title="指令编码"></a>指令编码</h3><p>与IA32一样使用小端编码。</p><p><img src="../../../../images/2018/指令编码.png" alt="指令编码"></p><p>每条指令的第一个字节表明指令的类型，这个字节分为两部分，每部分4位：高4位是代码（code）部分，低4位是功能（function）部分。代码值为 0~0xB。可以观察到，<code>rrmovl</code>与条件传送指令有同样的代码部分，可以把它看作是一个无条件传送。</p><p>寄存器编码如下：</p><p><img src="../../../../images/2018/寄存器编码.png" alt="寄存器编码"></p><p>举个例子：用16进制表示指令 <code>rmmvol %esp, 0x12345(%edx)</code>的字节编码。</p><p>从上面图中可以看到，rmmovl第一个字节为40，由于%esp是4（占4位），%edx是2（占4位），所以第二个字节是42，最后再加上偏移量 00 01 23 45，小端表示是：45 23 01 00，所以最后得到指令的编码是：<code>404245230100</code>。</p><p>指令集的一个重要性质是字节编码必须有唯一解释，任意一个字节序列要么是一个唯一的指令，要么是一个不合法的指令。</p><p>相比于IA32，Y86没那么紧凑，IA32对寄存器只用了3位来编码，5位表明指令类型，所以IA32能将出栈入栈放进一个字节里。另外IA32可以将常数值编码成1、2、4字节，Y86总是编码成4字节。</p><h3 id="RISC-和-CISC"><a href="#RISC-和-CISC" class="headerlink" title="RISC 和 CISC"></a>RISC 和 CISC</h3><ul><li>RISC: reduced instruction set computers，精简指令集</li><li>CISC: complex instruction set computers，复杂指令集</li></ul><h3 id="Y86异常"><a href="#Y86异常" class="headerlink" title="Y86异常"></a>Y86异常</h3><p><img src="../../../../images/2018/Y86异常.png" alt="Y86异常"></p><p>对于Y86，当遇到这些异常的时候，我们简单的让处理器停止执行指令。在更完善的设计中，处理器通常会调用一个 exception handler（异常处理程序），这个过程被指定用来处理遇到的某种类型的异常，例如放弃程序或调用一个用户自定义的 signal handler（信号处理程序）。</p><h3 id="Y86程序"><a href="#Y86程序" class="headerlink" title="Y86程序"></a>Y86程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> *Start, <span class="keyword">int</span> Count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (Count) &#123;</span><br><span class="line">        sum += *Start;</span><br><span class="line">        Start++;</span><br><span class="line">        Count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/IA32对比Y86代码.png" alt="IA32对比Y86代码"></p><p>可以看到Y86有时候需要两条指令来完成IA32一条指令就能完成的事。然而如果用数组索引来写这个程序，要转换成Y86会很困难，因为Y86没有伸缩寻址。</p><p>完整代码如下：</p><p><img src="../../../../images/2018/Y86汇编代码.png" alt="Y86汇编代码"></p><p>以<code>.</code>开头的是 assembler directive（汇编器命令），命令<code>.pos 0</code>告诉汇编器应该从地址0处开始产生代码。第3、4行使用的Stack标签，在最后有声明，其位置是0x100。第9到13行声明了一个数组，4字节对齐，值分别是：0xd，0xc0，0xb00，0xa000，array标签是起址。</p><blockquote><p>细节问题，<code>pushl %esp</code>（这个指令只能用汇编语言写，C语言无法产生）是先把%esp的值转移到栈，还是先%esp减4再将结果转移到栈，实际上不同版本的intel处理器都会产生不同的结果，所以一个很重要的教训是要保证细节上的一贯性。</p></blockquote><h2 id="逻辑设计和硬件控制语言HCL（Hardware-Control-Language）"><a href="#逻辑设计和硬件控制语言HCL（Hardware-Control-Language）" class="headerlink" title="逻辑设计和硬件控制语言HCL（Hardware Control Language）"></a>逻辑设计和硬件控制语言HCL（Hardware Control Language）</h2><h3 id="逻辑门"><a href="#逻辑门" class="headerlink" title="逻辑门"></a>逻辑门</h3><p><img src="../../../../images/2018/逻辑门.png" alt="逻辑门"></p><h3 id="组合电路和HCL语言"><a href="#组合电路和HCL语言" class="headerlink" title="组合电路和HCL语言"></a>组合电路和HCL语言</h3><p>构建一个组合电路有两条限制：</p><ol><li>两个或多个逻辑门的输出不能连接在一起。这样会导致线上的信号矛盾，产生不合法的电压或电路故障。</li><li>必须是无环的，也就是不能形成回路。</li></ol><p>下面是个简单的例子：</p><p><img src="../../../../images/2018/组合电路.png" alt="组合电路"></p><p>用HCL来写这个网的函数就是：<code>bool eq = (a &amp;&amp; b) || (!a &amp;&amp; !b)</code></p><p>HCL是用来C语言风格的语法，但这里同C语言不一样，该语句的意思不是执行了一次计算并将结果放入存储器，而是使用一个名字eq来称谓一个表达式。</p><p>实际上上面的组合电路就是同或，异或的表达式是：<code>bool eq = (!a &amp;&amp; b) || (a &amp;&amp; !b)</code></p><p>多路复用器（multiplexor，通常称为：MUX）：</p><p><img src="../../../../images/2018/MUX组合电路.png" alt="MUX组合电路"></p><p><code>bool out = (s &amp;&amp; a) || (!s &amp;&amp; b)</code></p><h3 id="字级的组合电路和HCL整数表达式"><a href="#字级的组合电路和HCL整数表达式" class="headerlink" title="字级的组合电路和HCL整数表达式"></a>字级的组合电路和HCL整数表达式</h3><p>通常我们设计能对字（word）进行操作的组合电路，字级电路中用到的就是HCL整数表达式了。</p><p>字级与电路：</p><p><img src="../../../../images/2018/字级与电路.png" alt="字级与电路"></p><p><code>bool Eq = (A == B);</code></p><p>也可以用异或来实现：</p><p><img src="../../../../images/2018/字级异或电路.png" alt="字级异或电路"></p><p>在HCL中，多路复用函数是用情况表达式（case expression）来描述的。情况表达式的通用格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    select_1 : expr_1;</span><br><span class="line">    select_2 : expr_2;</span><br><span class="line">             .</span><br><span class="line">             .</span><br><span class="line">             .</span><br><span class="line">    select_k : expr_k;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同C语言的switch语句不同，我们不要求不同的选择表达式之间互斥。从逻辑上讲，这些选择表达式是顺序求值的，且第一个求值为1的情况就会被选中。</p><p>字级多路复用电路：</p><p><img src="../../../../images/2018/字级多路复用电路.png" alt="字级多路复用电路"></p><p>用HCL来描述就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int Out = [</span><br><span class="line">    s: A;</span><br><span class="line">    1: B;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>大多数人第一眼是看不懂这个表达式的，其实里面有个暗含的条件：先执行 <code>s: A;</code> 如果失败（没有输出A）才会再执行 <code>1: B;</code>。而<code>1: B;</code>实际上是<code>!s&amp;&amp;1: B;</code>的简写。没有输出A就已经代表s是0了，那么!s就是1。</p><p>四路复用器：</p><p><img src="../../../../images/2018/四路复用器.png" alt="四路复用器"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int Out4 = [</span><br><span class="line">    !s1 &amp;&amp; !s0: A; # 00</span><br><span class="line">    !s1       : B; # 01</span><br><span class="line">    !s0       : C; # 10</span><br><span class="line">    1         : D; # 11</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>第二个表达式可以写成<code>!s1</code>，而不用写的更完整<code>!s1&amp;&amp;s0</code>，是因为另一种可能<code>s0=0</code>已经出现在了第一个选择表达式了，若能到达第二个选择表达式，则<code>s0=1</code>。类似的，第三个表达式可以写成<code>!s0</code>，第四个表达式可以简单的写成1。</p><p>来看最后一个例子，假设我们想设计一个逻辑电路来找一组字A、B和C中的最小值，如下图所示：</p><p><img src="../../../../images/2018/最小值电路.png" alt="最小值电路"></p><p>用HCL来表达：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int Min3 = [</span><br><span class="line">    A&lt;=B &amp;&amp; A&lt;=C : A;</span><br><span class="line">    B&lt;=A &amp;&amp; B&lt;=C : B;</span><br><span class="line">    1            : C;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>算术逻辑单元（arithmetic/logic unit, ALU）</p><p><img src="../../../../images/2018/ALU.png" alt="ALU"></p><h3 id="集合关系"><a href="#集合关系" class="headerlink" title="集合关系"></a>集合关系</h3><p><img src="../../../../images/2018/集合关系.png" alt="集合关系"></p><p>在这个电路中，两位的信号code就可以用来控制对4个数据字A、B、C和D做选择。根据可能的code值，可以用相等测试来表示信号s1和s0的产生：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1= code==2 || code==3;</span><br><span class="line">bool s0= code==1 || code==3;</span><br></pre></td></tr></table></figure><p>还有一种更简洁的方式来表示这样的属性：当code在集合<code>{2,3}</code>中s1为1，而code在集合<code>{1,3}</code>中s0为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1= code in &#123;2,3&#125;;</span><br><span class="line">bool s0= code in &#123;1,3&#125;;</span><br></pre></td></tr></table></figure><p>判断集合关系的通用格式：<code>iexpr in {iexpr1, iexpr2, ... , iexprk}</code></p><h3 id="存储器和时钟"><a href="#存储器和时钟" class="headerlink" title="存储器和时钟"></a>存储器和时钟</h3><p>组合电路从本质上讲，不存储任何信息，它们只是简单的根据输入信号产生一个输出信号。为了产生时序电路（sequential circuit），也就是有状态并且在这个状态上进行计算的系统，我们必须引入按位存储信息的设备。存储设备都是由同一个时钟控制，时钟是一个周期性信号，决定什么时候要把新值加载到设备中。考虑两类存储器设备：</p><ul><li><strong>时钟寄存器</strong>（简称寄存器）存储单个位或字。时钟信号控制寄存器加载输入值。</li><li><strong>随机访问存储器</strong>（简称存储器）存储多个字，用地址来选择该读或该写哪个字。随机访问存储器的例子包括：1.处理器的虚拟存储器系统（由硬件和操作系统结合起来使处理器可以在一个很大的地址空间内访问任意的字，硬件上包括由缓存、内存、外存）。2.寄存器文件，在此，寄存器标识符作为地址。在IA32或Y86处理器中，寄存器文件有8个程序寄存器（%eax、%ecx等）。</li></ul><p>正如我们看到的那样，在说到硬件和机器级编程时，“寄存器”这个词是有两个不同的意思的。需要避免歧义的时候，我们分别称呼这两类寄存器为：<code>硬件寄存器</code>和<code>程序寄存器</code>。</p><p>下图说明了硬件寄存器是如何工作的：</p><p><img src="../../../../images/2018/硬件寄存器.png" alt="硬件寄存器"></p><p>寄存器是作为电路不同部分中的组合逻辑之间的屏障。我们的Y86处理器会用时钟寄存器保存程序计数器（PC），条件码（CC）和程序状态（Stat）。</p><p>下图展示了一个典型的寄存器文件：</p><p><img src="../../../../images/2018/寄存器文件.png" alt="寄存器文件"></p><p>寄存器文件有两个读端口，一个写端口。每个端口都有一个地址输入，地址是图4-4中的寄存器标识符。这样一个多端口随机访问存储器允许同时进行多个读和写操作。</p><p>虽然寄存器文件不是组合电路，因为它有内部存储。不过在我们的实现中，从寄存器文件中读数据就好像它是一个以地址为输入、数据为输出的一个组合逻辑块。当srcA或srcB被设成某个寄存器ID时，在一段延迟之后，存储在相应寄存器上的值就会出现在valA或valB上。</p><p>向寄存器文件写入字是由时钟信号控制的，控制方式类似于将值加载到时钟寄存器。每次时钟上升时，输入valW上的值会被写入dstW指明的寄存器上。当dstW设为特殊的ID值0xF时，不会写任何程序寄存器。</p><p>由于寄存器文件既可以读又可以写，一个很自然的问题就是：如果我们同时读和写一个程序寄存器会发生什么？答案简单明了：我们会看到一个旧值到新值的变化。所以在设计处理器的时候要把这个问题考虑进去。</p><p>我们的处理器有一个随机访问存储器，如下图所示：</p><p><img src="../../../../images/2018/随机访问存储器.png" alt="随机访问存储器"></p><p>同寄存器文件一样，从存储器中读的操作方式类似于组合逻辑：如果我们在输入address上提供一个地址，并将write控制信号设置为0，那么经过一些延迟之后，存储在那个地址上的值会出现在输出data上。如果地址超出了范围，error信号会置为1，否则就是0。</p><p>写存储器是由时钟控制的：我们将address设置为期望的地址，将data in设置为期望的值，而write设置为1。然后我们控制时钟时，只要地址是合法的，就会更新相应的地址中的值，如果是非法地址，error就会置为1。</p><h2 id="Y86的顺序实现"><a href="#Y86的顺序实现" class="headerlink" title="Y86的顺序实现"></a>Y86的顺序实现</h2><h3 id="将处理组织成阶段"><a href="#将处理组织成阶段" class="headerlink" title="将处理组织成阶段"></a>将处理组织成阶段</h3><ul><li><strong>取指（fetch）</strong>：从存储器取指令，地址为PC所指的地址。从指令中抽取出指令指示符字节的两个四位部分，称为icode（指令代码）和ifun（指令功能）。</li><li><strong>译码（decode）</strong>：译码阶段从寄存器文件最多读入两个操作数，得到值valA和valB（如果是两个的话）。通常，它读入指令rA和rB字段指明的寄存器，不过有些指令是读寄存器%esp的。</li><li><strong>执行（execute）</strong></li><li><strong>访存（memory）</strong>：访存阶段可以将数据写入存储器，或者从存储器读出数据。读出的值为valM。</li><li><strong>写回（write back）</strong>：写回阶段最多可以写两个结果到寄存器文件。</li><li><strong>更新PC（PC update）</strong>：将PC设置成下一条指令的地址。</li></ul><p>处理器无限循环，执行这些阶段。在我们简化的实现中，发生任何异常时，处理器就会停止。比如：它执行halt指令或非法指令，或者它试图读或者写非法地址。在更完整的设计中，处理器会进入异常处理模式，开始执行由异常的类型决定的特殊代码。</p><p>在硬件上复制逻辑块的成本比软件中有重复代码的成本要大得多。而且在硬件系统中处理许多特殊情况和特性要比用软件来处理困难得多。</p><p>我们面临的一个挑战是将每条不同指令所需要的计算放入到上述的通用框架中。我们会使用图4-17中所示的代码来描述不同的Y86指令的处理。图4-18到4-21描述了不同Y86指令在各阶段是怎样处理的。</p><p><img src="../../../../images/2018/Y86指令阶段解析.png" alt="Y86指令阶段解析"></p><p><img src="../../../../images/2018/4-18.png" alt="4-18"></p><p>让我们看一个具体的例子，图4-17中的第三条指令：</p><p><img src="../../../../images/2018/subl指令.png" alt="subl指令"></p><p><img src="../../../../images/2018/4-19.png" alt="4-19"></p><p>图4-17中第五条指令：</p><p><img src="../../../../images/2018/rmmovl指令.png" alt="rmmovl指令"></p><p><img src="../../../../images/2018/4-20.png" alt="4-20"></p><p>图4-17中第六条指令：</p><p><img src="../../../../images/2018/pushl指令.png" alt="pushl指令"></p><p>图4-21表明了三类控制转义指令的处理：各种跳转、call和ret。</p><p><img src="../../../../images/2018/4-21.png" alt="4-21"></p><p>图4-17中第8条指令：</p><p><img src="../../../../images/2018/je指令.png" alt="je指令"></p><p>图4-17中第13条指令：</p><p><img src="../../../../images/2018/ret指令.png" alt="ret指令"></p><h2 id="SEQ硬件结构"><a href="#SEQ硬件结构" class="headerlink" title="SEQ硬件结构"></a>SEQ硬件结构</h2><p><img src="../../../../images/2018/SEQ硬件结构.png" alt="SEQ硬件结构"></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《CSAPP》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《CSAPP》读书笔记 -- 第3章：程序的机器级表示</title>
      <link href="/blog/2018/10/08/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
      <url>/blog/2018/10/08/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="从编译C语言文件说起"><a href="#从编译C语言文件说起" class="headerlink" title="从编译C语言文件说起"></a>从编译C语言文件说起</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">-01</span> -o p p1.c p2.c</span><br></pre></td></tr></table></figure><p>使用了gcc命令来编译，也可以简单写作：<code>cc</code>。</p><p>优化层级为1，1级是最低的，层级越高程序优化越好，但增加了编译时间，也使调试变得更难，且跟源程序差异很大不便于理解。</p><p>编译的流程是：</p><ol><li>预处理器（preprocessor）把诸如：<code>#include</code>、<code>#define</code>、<code>#if</code>、<code>#else</code>、<code>#elif</code>、<code>#ifdef</code>、<code>#endif</code>等预编译指令替换掉。</li><li>编译器（compiler）把<code>.c</code>源文件编译成<code>.s</code>的汇编代码文件。</li><li>汇编器（assembler）把汇编代码文件转换成相应的二进制目标文件<code>.o</code>，目标文件已经是机器码了，只是没有填入全局变量的地址。</li><li>链接器（linker），把多目标文件和库函数链接在一起，形成可执行文件。</li></ol><a id="more"></a><p><strong>instruction set architecture，ISA，指令集体系结构</strong>，定义了处理器状态，指令的格式和行为。intel的指令集包括32位的：IA32，以及64位的：x86-64。</p><p>编译器做了整个编译流程的大部分工作，汇编代码几乎就是机器码的供人阅读版。所以看懂汇编代码是关键。</p><p>IA32程序代码和C语言很不相同，一些在C语言下看不到的处理器状态可以在这里看到：</p><ul><li>程序计数器（program counter，PC，也叫：instructor pointer，IP）在IA32中叫：<code>%eip</code>，指出下一条指令在内存中的位置</li><li>整数寄存器，可以用来保存数据</li><li>状态码寄存器，可以用来实现条件控制代码如：if和while</li><li>浮点寄存器，用来计算浮点数</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> accum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = x + y;</span><br><span class="line">    accum += t;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要看到编译出的汇编代码，可以使用<code>-S</code>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -S code.c</span><br></pre></td></tr></table></figure><p>这样就会使编译流程停留在 <strong>预处理-&gt;编译</strong> 阶段，而不是继续进行接下来的汇编和链接，生成的文件是：<code>.s</code>汇编文件。编译后的汇编代码中会包含如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum:</span><br><span class="line">    pushl %ebp</span><br><span class="line">    movl %esp, %ebp</span><br><span class="line">    movl 12(%ebp), %eax</span><br><span class="line">    addl 8(%ebp), %eax</span><br><span class="line">    addl %eax, accum</span><br><span class="line">    popl %ebp</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>这段代码中的每一句都对应一个机器指令，比如pushl这句的意思就是把寄存器%ebp的内容push到程序栈（内存中）上。<strong>在汇编代码里所有的局部变量都不见了，全局变量还可以看到，因为编译器还没有决定这个变量在内存中的存储位置。</strong></p><p>如果我们使用<code>-c</code>选项，GCC就会既编译又汇编：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -c code.c</span><br></pre></td></tr></table></figure><p>这样就生成了目标文件<code>code.o</code>，在800bytes的code.o文件中，有17bytes是对应上面的汇编代码的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55 89 e5 8b 45 0c 03 45 08 01 05 00 00 00 00 5d c3</span><br></pre></td></tr></table></figure><p>可以使用反汇编将难懂的目标文件代码转成汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -d code.o</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/反汇编.png" alt="反汇编"></p><ul><li>IA32指令的长度是1到15字节，越常用的，操作数越少的指令越短，反之则越长。</li><li>给定一个开始的位置，只对应一种机器指令，比如只有<code>pushl %ebp</code>指令是以55开头的</li><li>反汇编只需要根据目标文件就可以翻译出汇编文件</li><li>反汇编出来的文件跟直接编译的汇编文件有些不一样，比如所有指令都省略了后缀<code>l</code>。<code>l</code>是大小指示符，而大多数情况下是可以省略l的。</li></ul><blockquote><p>头两个属性跟<a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">哈夫曼编码</a>的原理是一致的，可以说这是一种通用的编码原则，第一条用来保证节省字节空间，第二条则保证编码的唯一性。</p></blockquote><p>生成真正可执行的文件还需要链接操作，而且必须包含main函数。假设我们的<code>main.c</code>文件如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用如下指令生成可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -o prog code.o main.c</span><br></pre></td></tr></table></figure><p>prog文件增长到了9123bytes，因为它不仅包含我们写的代码，而且包含了用来开始和结束的程序，以及与操作系统进行交互的程序。</p><p><img src="../../../../images/2018/链接之后的反汇编代码1.png" alt="链接之后的反汇编代码1"></p><p><img src="../../../../images/2018/链接之后的反汇编代码2.png" alt="链接之后的反汇编代码2"></p><p>可以看到第6行，全局变量在链接的时候定址。</p><h2 id="汇编代码的格式"><a href="#汇编代码的格式" class="headerlink" title="汇编代码的格式"></a>汇编代码的格式</h2><p>假设我们有一个C语言文件<code>simple.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">simple</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> y)</span> 2</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *xp + y;</span><br><span class="line">    *xp = t;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到如下汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.file   &quot;simple.c&quot;</span><br><span class="line">  .text</span><br><span class="line">.globl simple</span><br><span class="line">  .type   simple, @function</span><br><span class="line">simple:</span><br><span class="line">  pushl   %ebp</span><br><span class="line">  movl    %esp, %ebp</span><br><span class="line">  movl    8(%ebp), %edx</span><br><span class="line">  movl    12(%ebp), %eax</span><br><span class="line">  addl    (%edx), %eax</span><br><span class="line">  movl    %eax, (%edx)</span><br><span class="line">  popl    %ebp</span><br><span class="line">  ret</span><br><span class="line">  .size   simple, .-simple</span><br><span class="line">  .ident  &quot;GCC: (Ubuntu 4.3.2-1ubuntu11) 4.3.2&quot;</span><br><span class="line">  .section        .note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><p>所有以<code>.</code>开头的行都是用来指导汇编器和链接器的，我们不用去管。而这段代码的大概意思如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">simple:</span><br><span class="line">    pushl %ebp           保存帧指针</span><br><span class="line">    movl  %esp, %ebp     创建新的帧指针</span><br><span class="line">    movl  8(%ebp), %edx  从内存中读取xp</span><br><span class="line">    movl  12(%ebp), %eax 从内存中读取y</span><br><span class="line">    addl  (%edx), %eax   *xp+y=t</span><br><span class="line">    movl  %eax, (%edx)   把t存到xp指向的地址中</span><br><span class="line">    popl  %ebp           重新获取帧指针</span><br><span class="line">    ret                  返回</span><br></pre></td></tr></table></figure><blockquote><p>这段代码对%ebp和%esp的操作涉及到了程序栈模型，看不懂很正常，文章下面会有讲解的。</p></blockquote><h3 id="ATT和intel汇编格式"><a href="#ATT和intel汇编格式" class="headerlink" title="ATT和intel汇编格式"></a>ATT和intel汇编格式</h3><p>ATT即AT&amp;T，是贝尔实验室旗下的公司。</p><p>GCC和OBJDUMP默认生成ATT格式的汇编代码，微软和因特尔的编程工具则默认生成intel格式的汇编代码。</p><p>使用如下命令可以让GCC生成intel格式的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -S -masm=intel code.c</span><br></pre></td></tr></table></figure><p>两者的区别如下：</p><ul><li>intel代码省略了用来指定大小的后缀，比如使用<code>mov</code>而不是<code>movl</code></li><li>intel代码省略了寄存器前面的%，比如使用<code>esp</code>而不是<code>%esp</code></li><li>intel代码用了不同的方式来描述内存地址，比如使用<code>DWORD PTR [ebp+8]</code>而不是<code>8(%ebp)</code></li><li>intel代码多操作数指令的操作数顺序跟ATT相反</li></ul><p>由于是由16bit架构扩展到32bit架构的，intel管16bit数据类型叫：<code>word</code>，32bit数据类型叫：<code>double words</code>，64bit数据类型叫：<code>quad words</code>。</p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p><img src="../../../../images/2018/数据格式.png" alt="数据格式"></p><h2 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h2><p>IA32 CPU 包含了8个寄存器，每个有32bit存储空间，用来存储整形值以及指针。</p><p><img src="../../../../images/2018/IA32寄存器.png" alt="IA32寄存器"></p><p>x86-64则进一步扩展了这些寄存器：</p><p><img src="../../../../images/2018/x86-64寄存器.jpg" alt="x86-64寄存器"></p><p>前六个寄存器称为通用寄存器，有其特定的用途：</p><ul><li>%rax(%eax) 用于做累加，过程调用返回值</li><li>%rcx(%ecx) 用于计数</li><li>%rdx(%edx) 用于保存数据</li><li>%rbx(%ebx) 用于做内存查找的基础地址</li><li>%rsi(%esi) 用于保存源索引值</li><li>%rdi(%edi) 用于保存目标索引值</li></ul><h3 id="操作数指示符"><a href="#操作数指示符" class="headerlink" title="操作数指示符"></a>操作数指示符</h3><p><img src="../../../../images/2018/操作数指示符.png" alt="操作数指示符"></p><p>有三种类型的操作数，立即数(Imm)、寄存器值(Reg)、内存值(Mem)。</p><h3 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h3><p><img src="../../../../images/2018/mov指令.png" alt="mov指令"></p><p><img src="../../../../images/2018/汇编栈操作.png" alt="汇编栈操作"></p><p><code>pushl %ebp</code>指令等价于下面的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subl $4,%esp     减小栈指针</span><br><span class="line">movl %ebp,(%esp) 把%ebp中的数据写到%esp指向的内存中</span><br></pre></td></tr></table></figure><p><code>popl %eax</code>指令等价于下面的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl (%esp), %ebp  把%esp指向的内存地址中的值读到%eax中</span><br><span class="line">addl $4, %esp      增加栈指针</span><br></pre></td></tr></table></figure><h2 id="算术和逻辑操作"><a href="#算术和逻辑操作" class="headerlink" title="算术和逻辑操作"></a>算术和逻辑操作</h2><p>load effective address，leal指令，实际上是一个movl指令。</p><p><img src="../../../../images/2018/算术和逻辑操作指令.png" alt="算术和逻辑操作指令"></p><p>多个操作数的指令，注意一下两个操作数的顺序即可</p><h3 id="位移操作"><a href="#位移操作" class="headerlink" title="位移操作"></a>位移操作</h3><p>位移的值是用一个单字节来表示，且数值只能是0到31，所以这个字节只有低五位才会被考虑。</p><h3 id="扩展乘除指令"><a href="#扩展乘除指令" class="headerlink" title="扩展乘除指令"></a>扩展乘除指令</h3><p><img src="../../../../images/2018/扩展乘除操作.png" alt="扩展乘除操作"></p><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>使用单比特的状态码来描述算数和逻辑运算的状态。最常用的状态码如下：</p><ul><li>CF: carry flag 进位符，用来表示最高位的进位。通常用来检测无符号运算的溢出</li><li>ZF: zero flag，零标志符，最近的操作产生了0</li><li>SF: sign flag，符号位，最近的操作产生了负数</li><li>OF: overflow flag，溢出符，补码溢出，正负都可以，表示有符号溢出</li></ul><p><img src="../../../../images/2018/流程控制指令.png" alt="流程控制指令"></p><p>举个例子：t=a+b，a、b、t都是整形数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CF: (unsigned)t&lt;(unsigned)a       无符号溢出</span><br><span class="line">ZF: (t==0)                        零</span><br><span class="line">SF: (t&lt;0)                         负数</span><br><span class="line">OF: (a&lt;0 == b&lt;0) &amp;&amp; (t&lt;0 != a&lt;0)  有符号溢出</span><br></pre></td></tr></table></figure><blockquote><p>OF的表达式也可以写作：(a<0 &&="" b<0="" t="">0) || (a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; t&lt;0)，也就是说a、b都是负数相加却是正数，或者a、b都是正数相加却是负数，这两种情况就代表溢出了。</0></p></blockquote><p>leal操作不会改变状态码，因为这个指令只是用来计算地址。除此之外表3.7中的所有操作都可能改变状态码。例如逻辑操作：XOR，会使CF和OF置零，移位操作会使CF置为最后一个移位出去的bit，但OF要置零。自增和自减指令会设置OF和ZF，不设置CF。</p><p>CMP指令类似于SUB指令，但只修改状态码而不改变其他寄存器，如果两个操作数相等，ZF就会被设置；TEST指令类似于AND指令，但只修改状态码而不改变其他寄存器，如果两个操作数是重复的： testl %eax,%eax，作用是检测%eax是0，还是正数，还是负数。</p><h3 id="访问状态码"><a href="#访问状态码" class="headerlink" title="访问状态码"></a>访问状态码</h3><p>有三种常用的方式访问状态码：</p><ol><li>根据几个状态码的逻辑组合，设置单个字节为0或1，也就是set指令</li><li>根据状态码，跳转到程序的其他分支</li><li>根据状态码传送数据</li></ol><p><img src="../../../../images/2018/set指令.png" alt="set指令"></p><p>举个例子：计算<code>a&lt;b</code>，a和b都是int型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a is in %edx, b is in %eax</span><br><span class="line">cmpl   %eax, %edx       Compare a:b</span><br><span class="line">setl   %al              Set low order byte of %eax to 0 or 1</span><br><span class="line">movzbl %al, %eax        Set remaining byte of %eax to 0</span><br></pre></td></tr></table></figure><p>setl 指令是：<code>D &lt;- SF^OF</code>，也就是有两种情况代表 <code>a-b&lt;0</code>：</p><ol><li>OF=0（a-b没有发生溢出），且SF=1（a-b结果为负）</li><li>OF=1（a-b发生了溢出），且SF=0（a-b结果为非负）</li></ol><p>第二种情况比较复杂，需要简单分析一下。a-b发生了溢出，有两种情况：<strong>正溢出和负溢出</strong>。负溢出：a是负数，b是正数，但a-b结果为正（结果小于了最小的负数，发生溢出）；正溢出：a是正数，b是负数，但a-b结果为负（结果大于了最大的正数，发生溢出）。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-128： 1000 0000</span><br><span class="line">127:   0111 1111</span><br><span class="line">-127:  1000 0001</span><br></pre></td></tr></table></figure><p>a=-128, b=127, a-b=-128-127= $(1 0000 0001)_2$ , 从结果上来看就变成了1（正数），这就是负溢出</p><p>a=127, b=-127, a-b=127-(-127) = $(1111 1110)_2$ , 从结果上来看就变成了 -2（负数），这就是正溢出</p><p>OF=1, SF=0，就是负溢出，而负溢出代表着a是负数，b是正数，也就是<code>a&lt;b</code></p><p>其他三个有符号比较以此类推。</p><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p><img src="../../../../images/2018/跳转指令.png" alt="跳转指令"></p><p>可以看到条件跳转必须是直接的，而无条件跳转可以使用操作数。</p><p>跳转位置的编码有两种：</p><ol><li>借助PC使用相对定位</li><li>使用绝对定位</li></ol><p>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jle .L2                  if &lt;=, goto dest2</span><br><span class="line">  .L5:                   dest1:</span><br><span class="line">  movl %edx, %eax</span><br><span class="line">  sarl %eax</span><br><span class="line">  subl %eax, %edx</span><br><span class="line">  leal (%edx,%edx,2), %edx</span><br><span class="line">  testl %edx, %edx</span><br><span class="line">jg .L5                   if &gt;, goto dest1</span><br><span class="line">  .L2:                   dest2:</span><br><span class="line">   movl %edx, %eax</span><br></pre></td></tr></table></figure><p>目标文件和汇编文件对应如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">8: 7e 0d                 jle 17 &lt;silly+0x17&gt; Target = dest2</span><br><span class="line">a: 89 d0                 mov %edx,%eax dest1:</span><br><span class="line">c: d1 f8                 sar %eax</span><br><span class="line">e: 29 c2                 sub %eax,%edx</span><br><span class="line">10: 8d 14 52             lea (%edx,%edx,2),%edx</span><br><span class="line">13: 85 d2                test %edx,%edx</span><br><span class="line">15: 7f f3                jg a &lt;silly+0xa&gt; Target = dest1</span><br><span class="line">17: 89 d0                mov %edx,%eax dest2:</span><br></pre></td></tr></table></figure><p>对应的关系是：<code>0xd+0xa=0x17</code>，<code>0xf3+0x17=0xa</code>，为什么是加下一条指令的地址而不是当前指令呢？这个传统要追溯到计算机的早期实现，当时的处理器会在执行每一条指令之前先更新一下PC（program counter）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">804839c: 7e 0d           jle 80483ab &lt;silly+0x17&gt;</span><br><span class="line">804839e: 89 d0           mov %edx,%eax</span><br><span class="line">80483a0: d1 f8           sar %eax</span><br><span class="line">80483a2: 29 c2           sub %eax,%edx</span><br><span class="line">80483a4: 8d 14           52 lea (%edx,%edx,2),%edx</span><br><span class="line">80483a7: 85 d2           test %edx,%edx</span><br><span class="line">80483a9: 7f f3           jg 804839e &lt;silly+0xa&gt;</span><br><span class="line">80483ab: 89 d0           mov %edx,%eax</span><br></pre></td></tr></table></figure><p>从反汇编代码来看，<strong>跳转如果使用PC相对地址，则不管代码存储到内存中的哪个位置，跳转的地址都不需要修改，且需要的编码更短</strong>。</p><h3 id="翻译条件分支"><a href="#翻译条件分支" class="headerlink" title="翻译条件分支"></a>翻译条件分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(test-expr)</span><br><span class="line">  then-statement</span><br><span class="line">else</span><br><span class="line">  else-statement</span><br></pre></td></tr></table></figure><p>先写成等价的goto版本，然后就可以很轻松的转成汇编了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t=test-expr;</span><br><span class="line">if(!t)</span><br><span class="line">  goto false;</span><br><span class="line">  then-statement</span><br><span class="line">  goto done;</span><br><span class="line">false:</span><br><span class="line">  else-statement</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p>从汇编的角度看 <code>&amp;&amp;短路</code> 原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void cond(int a, int *p)</span><br><span class="line">&#123;</span><br><span class="line">  if (p &amp;&amp; a &gt; 0)</span><br><span class="line">  *p += a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a %ebp +8, p at %ebp +12</span><br><span class="line"></span><br><span class="line">movl 8(%ebp), %edx</span><br><span class="line">movl 12(%ebp), %eax</span><br><span class="line">testl %eax, %eax</span><br><span class="line">je .L3</span><br><span class="line">testl %edx, %edx</span><br><span class="line">jle .L3</span><br><span class="line">addl %edx, (%eax)</span><br><span class="line">.L3:</span><br></pre></td></tr></table></figure><p>可以看到第一个条件通不过的时候就跳过了第二个条件判断。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">  body-statement</span><br><span class="line">  while(test-expr)</span><br></pre></td></tr></table></figure><p>goto版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line">  body-statement</span><br><span class="line">  t = test-expr;</span><br><span class="line">  if (t)</span><br><span class="line">goto loop;</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/while的汇编形式.png" alt="while的汇编形式"></p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while (test-expr)</span><br><span class="line">  body-statement</span><br></pre></td></tr></table></figure><p>先转成do while形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (!test-expr)</span><br><span class="line">  goto done;</span><br><span class="line">do</span><br><span class="line">  body-statement</span><br><span class="line">  while (test-expr);</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p>在把do while转成goto版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t = test-expr;</span><br><span class="line">if (!t)</span><br><span class="line">  goto done;</span><br><span class="line">loop:</span><br><span class="line">  body-statement</span><br><span class="line">  t = test-expr;</span><br><span class="line">  if (t)</span><br><span class="line">    goto loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (init-expr; test-expr; update-expr)</span><br><span class="line">  body-statement</span><br></pre></td></tr></table></figure><p>先转成while形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init-expr;</span><br><span class="line">while (test-expr) &#123;</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后转成do while形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">init-expr;</span><br><span class="line">if (!test-expr)</span><br><span class="line">  goto done;</span><br><span class="line">do &#123;</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr;</span><br><span class="line">&#125; while (test-expr);</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p>最后转成do while的goto版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">init-expr;</span><br><span class="line">t = test-expr;</span><br><span class="line">if (!t)</span><br><span class="line">  goto done;</span><br><span class="line">loop:</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr;</span><br><span class="line">  t = test-expr;</span><br><span class="line">  if (t)</span><br><span class="line">    goto loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h3 id="状态转移指令"><a href="#状态转移指令" class="headerlink" title="状态转移指令"></a>状态转移指令</h3><p><img src="../../../../images/2018/状态表达式.png" alt="状态表达式"></p><p><img src="../../../../images/2018/状态转移指令.png" alt="状态转移指令"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = test-expr ? then-expr : else-expr;</span><br></pre></td></tr></table></figure><p>goto版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (!test-expr)</span><br><span class="line">  goto false;</span><br><span class="line">v = true-expr;</span><br><span class="line">goto done;</span><br><span class="line">false:</span><br><span class="line">  v = else-expr;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch主要使用了跳转表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">switch_eg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = x;</span><br><span class="line">  <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">      result *= <span class="number">13</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">102</span>:</span><br><span class="line">      result += <span class="number">10</span>;</span><br><span class="line">      <span class="comment">/* Fall through */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">103</span>:</span><br><span class="line">      result += <span class="number">11</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">104</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">106</span>:</span><br><span class="line">      result *= result;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">switch_eg_impl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Table of code pointers */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> *jt[<span class="number">7</span>] = &#123;</span><br><span class="line">    &amp;&amp;loc_A, &amp;&amp;loc_def, &amp;&amp;loc_B,</span><br><span class="line">    &amp;&amp;loc_C, &amp;&amp;loc_D, &amp;&amp;loc_def,</span><br><span class="line">    &amp;&amp;loc_D</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">unsigned</span> index = n - <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">goto</span> loc_def;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Multiway branch */</span></span><br><span class="line">  <span class="keyword">goto</span> *jt[index];</span><br><span class="line"></span><br><span class="line">  loc_def: <span class="comment">/* Default case*/</span></span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">  loc_C: <span class="comment">/* Case 103 */</span></span><br><span class="line">    result = x;</span><br><span class="line">    <span class="keyword">goto</span> rest;</span><br><span class="line"></span><br><span class="line">  loc_A: <span class="comment">/* Case 100 */</span></span><br><span class="line">    result = x * <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">  loc_B: <span class="comment">/* Case 102 */</span></span><br><span class="line">    result = x + <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/* Fall through */</span></span><br><span class="line"></span><br><span class="line">  rest: <span class="comment">/* Finish case 103 */</span></span><br><span class="line">    result += <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">  loc_D: <span class="comment">/* Cases 104, 106 */</span></span><br><span class="line">    result = x * x;</span><br><span class="line">    <span class="comment">/* Fall through */</span></span><br><span class="line"></span><br><span class="line">  done:</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码如下：</p><p><img src="../../../../images/2018/switch汇编代码.png" alt="switch汇编代码"></p><p><img src="../../../../images/2018/switch跳转表1.png" alt="switch跳转表1"></p><p><img src="../../../../images/2018/switch跳转表2.png" alt="switch跳转表2"></p><p>跳转表的步长是4</p><blockquote><p>.rodata的意思是：read only data</p></blockquote><h2 id="过程调用"><a href="#过程调用" class="headerlink" title="过程调用"></a>过程调用</h2><p><img src="../../../../images/2018/程序栈内存结构.png" alt="程序栈内存结构"></p><p>有以下几个要点：</p><ol><li>栈是倒着长的</li><li>每个过程调用都有一个stack frame，栈帧</li><li>栈顶帧用两个指针来维护，一个是帧起址：%ebp，一个是栈指针：%esp指向栈顶。</li></ol><p>%esp在过程运行的时候可能会被抹掉，这时候可以通过%ebp来定位。</p><p>可以看到返回地址在每一帧的最后。而每一帧的第一个位置存放着上一帧的帧起址%ebp。帧的中间则放置局部变量、过程参数等值。</p><p>有以下几种情况会将局部变量放到栈帧中：</p><ol><li>局部变量多到寄存器放不下</li><li>局部变量是数组或者结构体，必须用到引用</li><li>局部变量使用了取址符<code>&amp;</code>，所以我们必须给它生成地址</li></ol><h3 id="转移控制"><a href="#转移控制" class="headerlink" title="转移控制"></a>转移控制</h3><p><img src="../../../../images/2018/转移控制指令.png" alt="转移控制指令"></p><p>call指令的效果是：把返回地址push到栈中，然后跳到调用程序的地址（也就是把PC设置一下）。<strong>返回地址</strong>是汇编代码中call指令后面那条指令的地址。</p><p>ret指令把栈顶的返回地址pop出来，并跳转到这个地址。</p><p><img src="../../../../images/2018/程序调用模型.png" alt="程序调用模型"></p><h3 id="寄存器使用传统"><a href="#寄存器使用传统" class="headerlink" title="寄存器使用传统"></a>寄存器使用传统</h3><p>%eax, %edx, %ecx是调用者保存寄存器。也就是说当过程Q被过程P调用，过程Q可以随意的写这三个寄存器，因为在调用Q之前P必须保存这三个寄存器的值。</p><p>%ebx, %esi, %edi是被调用者保存寄存器。也就是说在过程Q写这些寄存器之前，必须保存里面的值，并在return之前恢复原样。</p><h3 id="过程调用例子"><a href="#过程调用例子" class="headerlink" title="过程调用例子"></a>过程调用例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int swap_add(int *xp, int *yp)</span><br><span class="line">&#123;</span><br><span class="line">  int x = *xp;</span><br><span class="line">  int y = *yp;</span><br><span class="line"></span><br><span class="line">  *xp = y;</span><br><span class="line">  *yp = x;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int caller()</span><br><span class="line">&#123;</span><br><span class="line">  int arg1 = 534;</span><br><span class="line">  int arg2 = 1057;</span><br><span class="line"></span><br><span class="line">  int sum = swap_add(&amp;arg1, &amp;arg2);</span><br><span class="line">  int diff = arg1 - arg2;</span><br><span class="line">  return sum * diff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/过程调用内存模型.png" alt="过程调用内存模型"></p><p>一些编程语言，比如Pascal，提供了值传参和引用传参。但C语言只有值传参，C++提供了引用传参。C语言可以通过指针来实现引用传参。</p><p><img src="../../../../images/2018/过程调用汇编代码.png" alt="过程调用汇编代码"></p><p>总共申请了24字节的空间，8字节用来存局部变量，8字节用来存参数，还有8字节未使用。</p><blockquote><p>为什么要浪费8字节，原因是：内存对齐。GCC遵循一个x86编程方针：栈空间必须是16的整数倍，包括保存%ebp的4字节和返回地址的4字节。这里总共加起来是24字节，所以需要额外的8字节填充成32字节。</p></blockquote><p>swap_add的汇编代码如下：</p><p>分为三个部分：setup、body、finish</p><p>setup:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swap_add:</span><br><span class="line">  pushl %ebp                  Save old %ebp</span><br><span class="line">  movl %esp, %ebp             Set %ebp as frame pointer</span><br><span class="line">  pushl %ebx                  Save %ebx</span><br></pre></td></tr></table></figure><p>首先要保存调用者的帧基指针，然后重新设置当前帧基指针，然后如果用到%ebx,%esi,%edi等寄存器就需要保存。</p><p>body:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">movl 8(%ebp), %edx            Get xp</span><br><span class="line">movl 12(%ebp), %ecx           Get yp</span><br><span class="line">movl (%edx), %ebx             Get x</span><br><span class="line">movl (%ecx), %eax             Get y</span><br><span class="line">movl %eax, (%edx)             Store y at xp</span><br><span class="line">movl %ebx, (%ecx)             Store x at yp</span><br><span class="line">addl %ebx, %eax               Return value = x+y</span><br></pre></td></tr></table></figure><p>获取参数，进行计算。</p><p>finish:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">popl %ebx                     Restore %ebx</span><br><span class="line">popl %ebp                     Restore %ebp</span><br><span class="line">ret                           Return</span><br></pre></td></tr></table></figure><p>恢复两个寄存器，同时%esp回到了上一个帧的栈顶，指向了返回地址，然后ret指令就可以把PC置为返回地址了，这样就完成了控制权的转移。</p><p>然后执行调用完swap_add之后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movl -4(%ebp), %edx</span><br><span class="line">subl -8(%ebp), %edx</span><br><span class="line">imull %edx, %eax</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>leave指令的作用是重置栈指针和帧指针，也可以使用popl来重置，很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//使%esp指向%ebp的地址（也就是Saved %ebp那里）</span><br><span class="line">movl %ebp, %esp</span><br><span class="line">//popl指令会导致%esp+4，所以%esp之后会指向上一帧的帧尾（也就是Return Address那里），popl的内容则放到了%ebp里面</span><br><span class="line">popl %ebp</span><br></pre></td></tr></table></figure><p>而之后的<code>ret</code>指令继续将<code>Return Address</code> pop出来，并将<code>Return Address</code>放到PC中。</p><p>从这个例子我们可以看出，编译器遵循一组简单的惯例来管理栈结构。</p><ol><li>通过%ebp加偏移量（+8,+12,…）访问参数</li><li>通过push指令或者栈指针减偏移量来分配栈空间</li><li>在返回前恢复保存好的寄存器，并使栈指针指向调用者的返回地址（Return Address）</li></ol><p>数组、多维数组、结构体、联合体这些都比较简单，这里略过。</p><blockquote><p>要注意的点：只有call才会push一个返回地址，所以swap_add的栈帧中并没有返回地址，说明它没有调用其他函数</p></blockquote><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>每种数据类型都有对应的指针类型，但指针类型不是机器码的一部分，只是C语言提供的一种抽象，帮助程序员避免犯错。</p><h2 id="内存引用越界和缓冲区溢出"><a href="#内存引用越界和缓冲区溢出" class="headerlink" title="内存引用越界和缓冲区溢出"></a>内存引用越界和缓冲区溢出</h2><p>我们可以看到C语言对数组引用没有任何边界检查，而且栈里面既保存了局部变量又保存了寄存器值以及返回地址。所以一旦数组越界写就会破坏整个程序的运行。</p><p>看下面这个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Sample implementation of library function gets() */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">gets</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">char</span> *dest = s;</span><br><span class="line">  <span class="keyword">int</span> gotchar = <span class="number">0</span>; <span class="comment">/* Has at least one character been read? */</span></span><br><span class="line">  <span class="keyword">while</span> ((c = getchar()) != <span class="string">'\n'</span> &amp;&amp; c != EOF) &#123;</span><br><span class="line">    *dest++ = c; <span class="comment">/* No bounds checking! */</span></span><br><span class="line">    gotchar = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *dest++ = <span class="string">'\0'</span>; <span class="comment">/* Terminate string */</span></span><br><span class="line">  <span class="keyword">if</span> (c == EOF &amp;&amp; !gotchar)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">/* End of file or error */</span></span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read input line and write it back */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">/* Way too small! */</span></span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="built_in">puts</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段C语言代码对应的汇编代码如下：</p><p><img src="../../../../images/2018/gets缓冲区溢出.png" alt="gets缓冲区溢出"></p><p>分配数组空间的时候是直接固定了8字节，这里给buf分配的空间也是8字节：<code>leal -12(%ebp), %ebx</code>，并把buf作为参数放置于栈顶。</p><p><img src="../../../../images/2018/缓冲区溢出内存模型.png" alt="缓冲区溢出内存模型"></p><p>我们可以看到，当读写buf[8]的时候，实际上是在读写<code>Saved %ebx</code>。</p><p><img src="../../../../images/2018/缓冲区攻击范围.png" alt="缓冲区攻击范围"></p><p>通常给被攻击的程序输入一个字符串，这个字符串包含了可执行代码的字节编码，如果我们通过缓冲区溢出修改了返回地址，那么ret指令就可以跳转到我们攻击代码的位置。</p><blockquote><p>蠕虫（worms）和病毒（viruses）的区别：相同点：都可以复制和传播自身，不同点：蠕虫可以自己运行，病毒是把自己加入到其他程序中，包括操作系统代码，病毒是不能独立运行的。</p></blockquote><h3 id="对抗缓冲区溢出攻击的方法"><a href="#对抗缓冲区溢出攻击的方法" class="headerlink" title="对抗缓冲区溢出攻击的方法"></a>对抗缓冲区溢出攻击的方法</h3><h4 id="栈随机化"><a href="#栈随机化" class="headerlink" title="栈随机化"></a>栈随机化</h4><p>攻击者需要插入攻击代码（一个字符串），并知道攻击代码的位置（也就是字符串存放的栈地址），而且指向这段字符串的指针也是这个字符串的一部分。如果栈的位置是固定的，那么就很容易猜到攻击代码的存放位置。用如下代码可以检测栈的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> local;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"local at %p\n"</span>, &amp;local);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要打印一个局部变量的地址。</p><p>栈随机化的思想是程序每次运行时栈的位置都不一样，实现方式是：程序开始时，在栈上分配一段0~n字节之间的随机大小的空间，例如使用<code>alloca</code>可以在栈上分配空间。程序不使用这段空间，它的作用是使后续栈的位置发生变化。分配的n必须足够大，这样才能有足够多的变化，但又必须足够小，这样才不会浪费空间。</p><p>栈随机化是更大一类技术的一种，这类技术称为：Address-Space Layout Randomization，ASLR，地址空间布局随机化。但攻击者还是可以采取一定措施来增加攻击成功率，一种常见的手段就是在攻击代码前中插入很长一段的<code>nop</code>指令，这个指令只会使程序计数器（PC）加一，除此之外没有任何副作用。只要攻击者能够猜中这段序列中的某个地址，就可以顺利到达攻击代码。这个序列的常用术语是：<strong>nop sled空操作雪橇</strong>。</p><h4 id="栈破坏检测"><a href="#栈破坏检测" class="headerlink" title="栈破坏检测"></a>栈破坏检测</h4><p>在局部缓冲区和栈状态之间插入一个随机的金丝雀值（也叫哨兵值），一旦发现这个值被改变，就说明缓冲区溢出了，那么就可以将程序异常中止。</p><blockquote><p>攻击者只有输入局部缓冲区变量的权限，所以无从得知金丝雀值。</p></blockquote><p><img src="../../../../images/2018/金丝雀值.png" alt="金丝雀值"></p><p>GCC默认就会插入金丝雀值，如果不想要可以使用参数：<code>-fno-stack-protector</code>来阻止GCC产生这种代码。当不使用此参数时，产生代码如下：</p><p><img src="../../../../images/2018/含金丝雀值汇编码1.png" alt="含金丝雀值汇编码1"></p><p><img src="../../../../images/2018/含金丝雀值汇编码2.png" alt="含金丝雀值汇编码2"></p><p>指令参数<code>%gs20, %eax</code>指明金丝雀值使用 segmented addressing（段寻址）从存储器中读入。将段标志为只读，这样攻击者就不能同时修改段中的金丝雀值。最后使用<code>xorl</code>比较段和栈中的金丝雀值，如果不相等则<code>call __stack_chk_fail</code>。</p><p>这种做法可以带来很小的性能损失。</p><h4 id="限制可执行代码区域"><a href="#限制可执行代码区域" class="headerlink" title="限制可执行代码区域"></a>限制可执行代码区域</h4><p>在典型的程序中，只有保存编译器产生的代码的那一部分存储空间才需要是可执行的。其他部分可以被限制为只允许读写。虚拟存储器空间在逻辑上分成了页（page），典型的每页是 2048 或者 4096 字节。由硬件提供存储器保护。以前，x86体系结构将读和执行访问控制合并成一个1位标志，所以任何被标记为可读的部分也是可执行的，当然也有很多机制可以限制一些页是可读的但是不可执行，然而这些机制都很消耗性能。最近，AMD（Advanced Micro Devices）为它的64位处理器的内存加入了 NX, No-eXecute，不可执行位，intel也跟进了，检查页是否可执行由硬件来完成，效率上没有任何损失。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《CSAPP》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《CSAPP》读书笔记 -- 第2章：浮点数原理（小专题）</title>
      <link href="/blog/2018/09/27/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2018/09/27/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>浮点数的作用</strong>：区别于整形数，用来表示小数。可以用来表示很大的数，或者非常接近0的小数，或者近似的做实数计算，浮点数的一般形式：$x\times 2^y$。</p><p>IEEE（pronounced “Eye-Triple-Eee”）浮点数标准。</p><p><strong>rounding</strong>：when a number cannot be represented exactly in the format and hence must be adjusted upward or down- ward。可以翻译为：<strong>舍入</strong>。</p><p>十进制的小数表示：$d<em>m d</em>{m-1} \cdots d<em>1 d_0 . d</em>{-1} d<em>{-2} \cdots d</em>{-n}$，写成数学表达式：</p><script type="math/tex; mode=display">d = \sum_{i=-n}^m 10^i \times d_i</script><p>相应的，二进制也可以写成这种形式：</p><script type="math/tex; mode=display">b = \sum_{i=-n}^m 2^i \times b_i</script><a id="more"></a><h1 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h1><p>IEEE浮点数的格式：$V = (-1)^s \times M \times 2^E$</p><ul><li>s是符号（Sign），s为0时是正，s为1时是负</li><li>M是有效数字（Significand，即 <strong>尾数</strong>）</li><li>E是 <strong>指数</strong>，Exponent，也叫 <strong>幂数</strong>，<strong>阶码</strong></li><li>隐含的 <strong>基数</strong> 是2</li></ul><p>下图是浮点数的内存分布模型，首先是符号域，然后是指数域，最后是分数域：</p><p><img src="../../../../images/浮点数内存模型.png" alt="浮点数内存模型"></p><ul><li>符号位s个，符号位只需要一位，s=1</li><li>指数位k个，指数域 $exp=e_{k-1}\cdots e_1 e_0$，用来计算指数E</li><li>分数为n个，分数域 $frac=f_{n-1}\cdots f_1 f_0$，用来计算有效数字M</li></ul><p>32位浮点数（单精度，float型）中，s=1，k=8，n=23；64位浮点数（双精度，double型）中，s=1，k=11，n=52。</p><h2 id="正常化值（Normalized-Values）"><a href="#正常化值（Normalized-Values）" class="headerlink" title="正常化值（Normalized Values）"></a>正常化值（Normalized Values）</h2><p>当 $exp$ 域既不是全0，也不是全1的时候，就是正常化值。</p><p>$E = e - Bias$，其中 $e$ 就是 $exp$ 域：$e_{k-1}\cdots e_1e_0$ 的值（除去全0和全1之后，取值范围是1到$2^k-2$），$Bias=2^{k-1}-1$（单精度的时候是127，双精度的时候是1023），那么 $E$ 的取值范围，单精度的时候是：<code>-126 ~ +127</code>，双精度的时候是：<code>-1022 ~ +1023</code>，其实 $E$ 的算法就是 <strong>移码</strong> 的计算方法。</p><p>$M = 1+f$，$0\le f\lt 1$，内存里只记录f，而1作为一个前导值计算时候再加上，所以f是分数域 $frac$ 的 $0.f_{n-1}\cdots f_1f_0$ 这种形式</p><h2 id="非正常化值（Denormalized-Values）"><a href="#非正常化值（Denormalized-Values）" class="headerlink" title="非正常化值（Denormalized Values）"></a>非正常化值（Denormalized Values）</h2><p>当指数域全0，就是非正常化格式。</p><p>在这种情况下，指数值是 $E = 1-Bias$，也就是固定了，有效数字值 $M = f$ 也就是没有前导1了。这个格式下可以表示0，因为正常化值中，一定有： $M\ge 1$，所以我们无法在正常化值格式下表示0。当符号位是0，有效数字 $M=f=0$，我们得到的就是<code>+0.0</code>，当符号位是1的时候就是<code>-0.0</code>。</p><p>除了可以表示0，这个格式的另一个作用就是用来表示非常接近0的数。</p><h2 id="特殊值（Special-Values）"><a href="#特殊值（Special-Values）" class="headerlink" title="特殊值（Special Values）"></a>特殊值（Special Values）</h2><p>当指数域全1的时候，且分数域是全0，就表示无穷大，如果符号域为0，表示 $+\infty$，如果符号位是1，则表示 $-\infty$。无穷大可以作为溢出的结果，当我们用两个很大的数相乘，或者除以0；</p><p>当指数域全1，且分数域并非全0的时候，结果可以叫做：<code>NaN</code>（Not a Number的简写），这种值用来表示不能用实数或者无穷大表示的计算结果，比如计算：$\sqrt{-1}$ 或者 $\infty - \infty$。</p><p>下图是在数轴上的显示：</p><p><img src="../../../../images/浮点数三种类型.png" alt="浮点数三种类型"></p><p>可以看到非正常化值集中在0附近，正常化值散布在整个数轴的空间，特殊值则只表示两个无穷值。</p><p>下图是浮点数三种类型的光滑衔接：</p><p><img src="../../../../images/浮点数三种类型光滑衔接.png" alt="浮点数三种类型光滑衔接"></p><p>看完浮点数的设计和构造我们可以发现以下这些特点：</p><ul><li><strong>从编码上有效数字域采用了无符号整数编码，而指数域采用了移码编码</strong></li><li><strong>非正常化值均匀分布在0附近</strong></li><li><strong>正常化值的间隔随着 $2^E$ 变大而逐渐变大，也就是精度逐渐降低</strong></li><li><strong>精度是分组的，以 $2^E$ 增加1为一组，每组有 $2^n$ 个数（n是有效数字域的位数）</strong></li><li><strong>最高精度就是两个非正常化值的间隔，最低精度是最大的一组正常化值的相邻两数的间隔。</strong></li><li><strong>非正常化值按照精度只占一组，正常化值的数量是非正常化值数量的 $2^{k}-2$ 倍</strong></li><li><strong>正常化值的第一组的精度和非正常化值的精度一样，也就是实现了无缝衔接</strong></li></ul><h1 id="浮点数的计算"><a href="#浮点数的计算" class="headerlink" title="浮点数的计算"></a>浮点数的计算</h1><h2 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h2><p><img src="../../../../images/舍入四种策略.png" alt="舍入四种策略"></p><p><a href="https://en.wikipedia.org/wiki/Rounding" target="_blank" rel="noopener">Rounding维基百科</a></p><p><a href="https://upload.wikimedia.org/wikipedia/commons/8/8a/Comparison_rounding_graphs_SMIL.svg" target="_blank" rel="noopener">各种Rounding合集图</a></p><p>浮点数中使用的是：舍入到最近的偶数，因为舍入结果放大和缩小各占50%的概率，这样就可以防止最终结果偏大或者偏小。</p><p>下面是把浮点数舍入到小数点后两位数：</p><p>$10.00011_2(2\frac{3}{32})$ -&gt; $10.00_2(2)$ 不到一半，正常四舍五入<br>$10.00110_2(2\frac{3}{16})$ -&gt; $10.01_2(2\frac{1}{4})$ 超过一半，正常四舍五入<br>$10.11100_2(2\frac{7}{8})$ -&gt; $11.00_2(3)$ 正好一半，保证最后一位是偶数，所以向上舍入<br>$10.10100_2(2\frac{5}{8})$ -&gt; $10.10_2(2\frac{1}{2})$ 正好一半，保证最后一位是偶数，所以向下舍入</p><h2 id="浮点数加减运算"><a href="#浮点数加减运算" class="headerlink" title="浮点数加减运算"></a>浮点数加减运算</h2><h3 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h3><ul><li>相加可能产生 infinity 或者 NaN</li><li>不满足交换律，不满足结合律（因为舍入会造成精度上的损失）</li><li>加上0等于原来的数</li><li>除了 infinity 和 NaN，每个元素都有对应的相反数</li><li>除了 infinity 和 NaN，满足单调性，即 $a\ge b \rightarrow a+c\ge b+c$</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 浮点数加法不满足交换律</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3.14</span> + <span class="number">1e20</span> - <span class="number">1e20</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1e20</span> - <span class="number">1e20</span> + <span class="number">3.14</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 浮点数加法不满足结合律</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="number">3.14</span> + <span class="number">1e20</span>) - <span class="number">1e20</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3.14</span> + (<span class="number">1e20</span> - <span class="number">1e20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">3.14</span><br><span class="line">0</span><br><span class="line">3.14</span><br></pre></td></tr></table></figure><h3 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h3><p>设两个浮点数 $x$ 和 $y$：</p><script type="math/tex; mode=display">\begin{cases} x=(-1)^{s_x} M_x 2^{E_x} \\y=(-1)^{s_y} M_y 2^{E_y}\end{cases}</script><p>则浮点数加减运算结果为：</p><script type="math/tex; mode=display">x\pm y = \left((-1)^{s_x}M_x 2^{E_x-E_y} \pm (-1)^{s_y}M_y \right)2^{E_y}</script><ol><li><strong>对阶</strong>：首先要把指数位（阶码）调成一样，并相应的使M移位，由于有效域左移会引起最高有效位丢失，误差大，所以采用右移，此时阶码要增加。所以对阶原则是：<strong>小阶向大阶看齐</strong>。</li><li><strong>有效数加减</strong>：简单的无符号数字相加减。</li><li><strong>规格化</strong>：有效数求和结果可能大于1，那么就向右规格化：尾数右移1位，阶码加1。</li><li><strong>舍入</strong>：对于右移出去的位，采取舍入</li><li><strong>检查阶码是否溢出</strong>：<ul><li><strong>阶码下溢</strong>：运算结果为非规格化数</li><li><strong>阶码上溢</strong>：置溢出标志</li></ul></li></ol><h3 id="浮点数加减实例"><a href="#浮点数加减实例" class="headerlink" title="浮点数加减实例"></a>浮点数加减实例</h3><p>$x=3.14, y=2.718$ 求 $z=x+y$。</p><p>首先算出 $x$ 和 $y$ 的内存表示：</p><p>$x = 3+0.14$，3的二进制表示是<code>11</code>，0.14的二进制要稍微计算一下，我们让0.14不断的乘以2（也就是左移），得到的整数位部分就是其二进制值的一位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0.14 * 2 = 0.28     0</span><br><span class="line">0.28 * 2 = 0.56     0</span><br><span class="line">0.56 * 2 = 1.12     1</span><br><span class="line">0.12 * 2 = 0.24     0</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>我们可以写个程序来完成这个计算工作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取整形数的位数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDigits</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num/<span class="number">10</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        num %= <span class="number">10</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小数的二进制表示</span></span><br><span class="line"><span class="comment"> * @params precision 二进制表示精确到多少位</span></span><br><span class="line"><span class="comment"> * @params num 小数的整数表示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getFloatBitset</span><span class="params">(<span class="keyword">int</span> precision, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* res = <span class="keyword">new</span> <span class="keyword">char</span>[precision];</span><br><span class="line">    <span class="keyword">int</span> digits = getDigits(num);</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="built_in">pow</span>(<span class="number">10</span>, digits);</span><br><span class="line">    <span class="keyword">char</span> printFormat[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(printFormat,<span class="string">"%%0.%df"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; printFormat &lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;precision;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(printFormat, num*<span class="number">1.0</span>/mod);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" * 2 = "</span>;</span><br><span class="line">        num &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= mod)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num*<span class="number">1.0</span>/mod);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            num %= mod;</span><br><span class="line">            res[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num*<span class="number">1.0</span>/mod);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            res[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小数的二进制表示</span></span><br><span class="line"><span class="comment"> * @params precision 二进制表示精确到多少位</span></span><br><span class="line"><span class="comment"> * @params num 浮点型小数</span></span><br><span class="line"><span class="comment"> * @params digits 输入的时候浮点型小数的位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getFloatBitset2</span><span class="params">(<span class="keyword">int</span> precision, <span class="keyword">float</span> num, <span class="keyword">int</span> digits)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* res = <span class="keyword">new</span> <span class="keyword">char</span>[precision];</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="built_in">pow</span>(<span class="number">10</span>,digits);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;mod&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">char</span> printFormat[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(printFormat,<span class="string">"%%0.%df"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;precision;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(printFormat, num);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" * 2 = "</span>;</span><br><span class="line">        num*=<span class="number">2</span>;</span><br><span class="line">        num = round(num*mod)/mod;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            num -= <span class="number">1</span>;</span><br><span class="line">            res[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            res[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// char* res = getFloatBitset(atoi(argv[1]), atoi(argv[2]));</span></span><br><span class="line">    <span class="keyword">char</span>* res = getFloatBitset2(atoi(argv[<span class="number">1</span>]), atof(argv[<span class="number">2</span>]), atoi(argv[<span class="number">3</span>]));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码保存成：<code>float2Bitset.cpp</code>文件，然后编译，并使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o float2Bitset float2Bitset.cpp</span><br><span class="line">$ ./float2Bitset 23 0.14 2</span><br></pre></td></tr></table></figure><p>小数位精确到23位的话，3.14的定点浮点数表示是：<code>11.00100011110101110000101</code>。</p><p>转成浮点数，首先规格化M，那么整体要右移1位，指数是1，由 $E = e-Bias$，$E=1$, $Bias=127$ 得 $e=128$，也就是：<code>1000 0000</code>。</p><p>最终3.14的内存表示是：</p><script type="math/tex; mode=display">\underbrace{0}\_{Sign}~\underbrace{10000000}\_{Exponent}~~\underbrace{10010001111010111000011}\_{Significand}</script><p>同样的方法得到2.718的内存表示：</p><script type="math/tex; mode=display">\underbrace{0}\_{Sign}~\underbrace{10000000}\_{Exponent}~~\underbrace{01011011111001110110110}\_{Significand}</script><p>这两个数恰好是同阶的，那么就不需要对阶操作了。将M相加，但这个数太长了看着眼花，我们写个加法程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个相同位数的二进制数相加</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">addBitset</span><span class="params">(<span class="keyword">char</span> num1[], <span class="keyword">char</span> num2[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* res = <span class="keyword">new</span> <span class="keyword">char</span>[length+<span class="number">2</span>];</span><br><span class="line">    res[length+<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        res[i+<span class="number">1</span>] = num1[i]-<span class="string">'0'</span>+num2[i]-<span class="string">'0'</span>+carry+<span class="string">'0'</span>;</span><br><span class="line">        carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(res[i+<span class="number">1</span>]&gt;<span class="string">'1'</span>)&#123;</span><br><span class="line">            res[i+<span class="number">1</span>] -= <span class="number">2</span>;</span><br><span class="line">            carry = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(carry)&#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="string">'1'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(argv[<span class="number">1</span>][i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span>* res = addBitset(argv[<span class="number">1</span>], argv[<span class="number">2</span>], i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码保存成：<code>addBitset.cpp</code>，编译并使用该程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o addBitset addBitset.cpp</span><br><span class="line">$ ./addBitset 10010001111010111000011 01011011111001110110110</span><br></pre></td></tr></table></figure><p>相加结果等于：<code>0 11101101110100101111001</code>，最高位没有产生进位，这里用了一个0来代替，但两个前导1相加产生了进位，所以还需要对M右归一下，再对指数加1。所以加法结果的浮点数表示是：</p><script type="math/tex; mode=display">\underbrace{0}\_{Sign}~\underbrace{10000001}\_{Exponent}~~\underbrace{01110110111010010111101}\_{Significand}</script><p>这个数的十进制表示的计算方法是：<script type="math/tex">2^2 \times (1+0\times (\frac{1}{2})^1 + 1\times (\frac{1}{2})^2 + 1\times (\frac{1}{2})^3 +1\times (\frac{1}{2})^4+0\times(\frac{1}{2})^5+\cdots)</script></p><p>我们依然采用程序来计算这一长串二进制对应的十进制小数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bitset2Float</span><span class="params">(<span class="keyword">char</span>* num1, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> temp = (num1[i]-<span class="string">'0'</span>)/<span class="built_in">pow</span>(<span class="number">2</span>,count);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">        res += temp;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(argv[<span class="number">1</span>][i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> res = bitset2Float(argv[<span class="number">1</span>],i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码保存为：<code>Bitset2float.cpp</code>，编译并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o Bitset2float Bitset2float.cpp</span><br><span class="line">$ ./Bitset2float 01110110111010010111101</span><br></pre></td></tr></table></figure><p>对得到结果：<code>0.4645</code>，$1.4645\times 2^2 = 5.858$，而 $3.14+2.718=5.858$，这就说明我们的计算无误。</p><h3 id="算法流程图"><a href="#算法流程图" class="headerlink" title="算法流程图"></a>算法流程图</h3><p><img src="../../../../images/浮点数加减流程图.jpg" alt="浮点数加减流程图"></p><p>这个流程图并不是完美的，真实的浮点数流程图和浮点数计算电路比这个复杂。另外我忘画了一个东西，这个图最后应该加上溢出处理模块，E可能会上溢（当E加1的时候），也可能会下溢（当E减1的时候）。</p><p>最后这个流程图中没有对特殊值的判断，比如：$\infty - \infty = NaN$, $\infty + \infty = \infty$, $NaN + 任何数 = NaN$。</p><p>了解了浮点数加法的流程之后，最后我们回到最上面说的 <strong>浮点数加减法不满足交换律和结合律</strong>，从计算细节分析为什么不行。</p><p>首先 3.14 的浮点数表示我们已经计算过了，那么 1e20 的浮点数是多少呢？1e20也就是 $10^{20}$，用辗转相除法可以得到其二进制表示。我们这里使用计算器工具</p><p><img src="../../../../images/10的19次方的二进制.png" alt="10的19次方的二进制"></p><p>很遗憾的是64bit只能摆的下 $10^{19}$。我试了一下把源程序中的 1e20 换成 1e19 也是同样的结果。所以我们就使用 1e19 来分析这道题。</p><p>首先是M规格化，M右移63位，E加63，舍入M，那么 1e19 最终的双精度浮点数表示是：<code>0 10000111110 0001010110001110010001100000100100010011110100000000</code></p><p>小阶向大阶看齐，3.14的阶是1，M需要右移62位，而M的精度才52，可想而知M就是0了。那么 3.14 + 1e19 的结果就是 <strong>1e19</strong>。1e20就更加不用说了。</p><h2 id="浮点数乘除"><a href="#浮点数乘除" class="headerlink" title="浮点数乘除"></a>浮点数乘除</h2><h3 id="基本性质-1"><a href="#基本性质-1" class="headerlink" title="基本性质"></a>基本性质</h3><ul><li>相乘可能产生 infinity 或者 NaN</li><li>不满足交换律，结合律，分配率（因为溢出会造成程序无法计算出正确的结果）</li><li>乘以1会等于原来的数</li><li>除了 infinity 和 NaN，满足单调性：$a\ge b \rightarrow a\times c \ge b \times c$</li></ul><h3 id="具体细节-1"><a href="#具体细节-1" class="headerlink" title="具体细节"></a>具体细节</h3><p>设两个浮点数 $x$ 和 $y$ ：</p><script type="math/tex; mode=display">\begin{cases}x = \pm M_x 2^{E_x} \\y = \pm M_y 2^{E_y} \end{cases}</script><p>则浮点数乘除运算结果是：</p><script type="math/tex; mode=display">xy = \pm (M_x\times M_y)2^{E_x\pm E_y}</script><ol><li>计算阶码，判断是否溢出</li><li>求有效数的乘积</li><li>有效数舍入</li><li>计算符号位</li></ol><p>浮点数还有相当多的细节，可以参考：<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《CSAPP》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息记法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl oh my zsh 字符乱码问题</title>
      <link href="/blog/2018/09/20/wsl%20oh%20my%20zsh%20%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/09/20/wsl%20oh%20my%20zsh%20%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h2><p>首先检查自己有没有zsh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>如果有的话就下载<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh my zsh</a></p><a id="more"></a><h2 id="设置默认shell"><a href="#设置默认shell" class="headerlink" title="设置默认shell"></a>设置默认shell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>有可能会遇到设置不成功的问题，那么我们可以手动修改<code>/etc/passwd</code>，找到自己那一条配置信息，把默认shell改成<code>/bin/zsh</code>就OK了。</p><h2 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h2><p><code>-&gt;</code>等一些其他字符可能显示不出来，这是字体导致的。google一下：<code>wsl oh my zsh font</code>，找到：<a href="https://github.com/Microsoft/WSL/issues/1517" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/1517</a>，下载并设置字体为：<a href="https://github.com/powerline/fonts/blob/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf" target="_blank" rel="noopener">DejaVuSansMono</a>。</p><h2 id="怎么设置字体"><a href="#怎么设置字体" class="headerlink" title="怎么设置字体"></a>怎么设置字体</h2><p>右键标题栏，进入属性</p>]]></content>
      
      
      <categories>
          
          <category> 解决的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows环境 </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl修改右键bash图标</title>
      <link href="/blog/2018/09/19/wsl%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AEbash%E5%9B%BE%E6%A0%87/"/>
      <url>/blog/2018/09/19/wsl%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AEbash%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>使用 windows subsystem for linux (简称：WSL) 的时候，遇到一个小问题，在文件管理器中右键，唤出bash，发现图标不对：</p><p><img src="https://i.loli.net/2018/09/19/5ba25208ca7de.png" alt="截图1"></p><a id="more"></a><p>点击之后可以看到调用的是哪个程序：</p><p><img src="https://i.loli.net/2018/09/19/5ba254dbe66ea.png" alt="截图2"></p><p>google一下：<code>windows 右键图标</code>，搜到百度经验：<a href="https://jingyan.baidu.com/article/7c6fb428321b4a80642c90fd.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/7c6fb428321b4a80642c90fd.html</a>，照着修改就行了。</p><p>如图：</p><p><img src="https://i.loli.net/2018/09/19/5ba255cbd964f.png" alt="截图3"></p><p>那么改成什么呢？google一下：<code>wsl bash icon</code>，搜到：<a href="https://github.com/Microsoft/WSL/issues/1269" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/1269</a>，然后又在这个页面找到了这个：<a href="https://github.com/cmderdev/cmder/issues/1063#issuecomment-401947209" target="_blank" rel="noopener">https://github.com/cmderdev/cmder/issues/1063#issuecomment-401947209</a></p><p><img src="https://i.loli.net/2018/09/20/5ba2ffde07591.png" alt="截图4"></p><p>把icon换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\WindowsApps\CanonicalGroupLimited.UbuntuonWindows_1804.2018.817.0_x64__79rhkp1fndgsc\ubuntu.exe</span><br></pre></td></tr></table></figure><p>再点击右键，就能看到这个图标了。</p><p>除了修改右键显示的icon，还可以修改右键显示的名字，以及运行的目标程序。</p><p><img src="https://i.loli.net/2018/09/20/5ba301516885f.png" alt="TIM图片20180920100903.png"></p><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\WindowsApps\CanonicalGroupLimited.UbuntuonWindows_1804.2018.817.0_x64__79rhkp1fndgsc\ubuntu.exe</span><br></pre></td></tr></table></figure><p>但发现无法把工作目录定到当前右键的目录，需要加一个<code>run</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\WindowsApps\CanonicalGroupLimited.UbuntuonWindows_1804.2018.817.0_x64__79rhkp1fndgsc\ubuntu.exe run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows环境 </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《APUE-3rd》 读书笔记 -- File I/O</title>
      <link href="/blog/2018/05/28/APUE-3rd-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--File-IO/"/>
      <url>/blog/2018/05/28/APUE-3rd-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--File-IO/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这章讲的是文件IO，其中有几个非常重要的概念：</p><ol><li>File Desriptors，文件描述符</li><li>current file offset，当前文件偏移量</li><li>File Sharing Data Structure，文件共享数据模型</li><li>file descriptor flags ，文件描述位</li><li>file status flags ，文件状态位</li></ol><a id="more"></a><h2 id="File-Descriptors"><a href="#File-Descriptors" class="headerlink" title="File Descriptors"></a>File Descriptors</h2><ul><li>对内核来说，所有 <strong>打开的文件</strong> 都使用file descriptor引用。</li><li>文件描述符是一个非负整数。当我们打开一个存在的文件或者创建一个新文件，内核返回一个文件描述符给进程。</li><li>当我们想要读或者写一个文件，我们通过文件描述符来确定这个文件，文件描述符是被open或者creat返回的，然后作为read或者write的一个参数。</li></ul><blockquote><p>文件描述符都使用尽可能小的非负整数，File descriptors range from 0 through OPEN_MAX−1. </p></blockquote><p>有三个magic number，0代表STDIN_FILENO，1代表STDOUT_FILENO，2代表STDERR_FILENO。虽然这已经是POSIX.1所定义的标准，但为了程序的可读性，还是不建议直接写数字。这三个常量定义在<code>&lt;unistd.h&gt;</code>中。</p><h2 id="open-and-openat-Functions"><a href="#open-and-openat-Functions" class="headerlink" title="open and openat Functions"></a>open and openat Functions</h2><p>A file is opened or created by calling either the open function or the openat function. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">int</span> oflag, ... <span class="comment">/* mode_t mode */</span> )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">openat</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">int</span> oflag, ... <span class="comment">/* mode_t mode */</span> )</span></span>;</span><br><span class="line"><span class="comment">// Both return: file descriptor if OK, −1 on error</span></span><br></pre></td></tr></table></figure><p>最后一个参数是<code>...</code>，这是ISO C定义剩下的多个参数的方式。对这些函数来说，只有当新文件被创建时，最后一个参数才被使用，后面我们会讲。在这个原型中我们把这个参数写作一个注释。</p><p>path这个参数是要打开或者要创建的文件的名字。这个函数有多种操作，定在在oflag参数里。这个参数由下列一个或者多个定义在<code>&lt;fcntl.h&gt;</code>头文件中的常量通过 <strong>或(一种逻辑操作)</strong> 操作构成：</p><p>O_RDONLY    Open for reading only</p><p>O_WRONLY    Open for writing only</p><p>O_RDWR    Open for reading and writing</p><blockquote><p>Most implementations define O_RDONLY as 0, O_WRONLY as 1, and O_RDWR as 2, for compatibility with older programs.  <strong>为了兼容老程序，许多实现定义O_RDONLY as 0, O_WRONLY as 1, and O_RDWR as 2</strong>。</p></blockquote><p>O_EXEC        Open for execute only</p><p>O_SEARCH    Open for search only(applies to directories)</p><blockquote><p>The purpose of the O_SEARCH constant is to evaluate search permissions at the time a directory is opened. Further operations using the directory’s file descriptor will not reevaluate permission to search the directory. None of the versions of the operating systems covered in this book support O_SEARCH yet. </p></blockquote><p>One and only one of the previous five constants must be specified. The following constants are optional: </p><p>上面的五个常量有且只有一个必须被明确。接下来的是可选常量：</p><p>O_APPEND    Append to the end of file on each write. We describe this option in detail in Section 3.11. </p><p>O_CLOEXEC    Set the FD_CLOEXEC file descriptor flag. We discuss file descriptor flags in Section 3.14. </p><p>O_CREAT    Create the file if it doesn’t exist. This option requires a third argument to the open function (a fourth argument to the openat function) — the mode, which specifies the access permission bits of the new file. (When we describe a file’s access permission bits in Section 4.5, we’ll see how to specify the mode and how it can be modified by the umask value of a process.)  创建一个文件，如果不存在。这个操作需要open函数的第三个参数（openat函数的第四个参数）— mode，<strong>它明确了这个新文件的访问权限位</strong>。（当我们在第4.5章节讨论文件的访问权限位，我们将看到如何明确mode，以及它如何修改进程的umask值。）</p><p>O_DIRECTORY    Generate an error if path doesn’t refer to a directory. </p><p>O_EXCL        Generate an error if O_CREAT is also specified and the file already exists. This test for whether the file already exists and the creation of the file if it doesn’t exist is an atomic operation. We describe atomic operations in more detail in Section 3.11.  如果O_CREAT被使用了且文件已经存在就会生成一个错误。这个常量的作用是检测文件是否存在如果文件不存在就创建，这是一个原子操作。我们将在第3.11章节讨论更多原子操作的细节。</p><p>O_NOCTTY    If path refers to a terminal device, do not allocate the device as the controlling terminal for this process. We talk about controlling terminals in Section 9.6.  如果这个路径指向的是终端设备，则不将这个设备分配为此进程的控制终端。</p><p>O_NONBLOCK    If path refers to a FIFO, a block special file, or a character special file, this option sets the nonblocking mode for both the opening of the file and subsequent I/O. We describe this mode in Section 14.2.  如果path指向FIFO（先进先出），一个块特殊文件，一个字符特殊文件，这个选项设置了非阻塞模式为本次的打开操作和后续的I/O操作。</p><blockquote><p>In earlier releases of System V, the O_NDELAY (no delay) flag was introduced. This option is similar to the O_NONBLOCK (nonblocking) option, but an ambiguity was introduced in the return value from a read operation. The no-delay option causes a read operation to return 0 if there is no data to be read from a pipe, FIFO, or device, but this conflicts with a return value of 0, indicating an end of file. SVR4-based systems still support the no-delay option, with the old semantics, but new applications should use the nonblocking option instead.  在早期的System V，有一个O_NDELAY(no delay)符号。这个符号和O_NONBLOCK(nonblocking)选项相似，但他的读操作返回值具有二义性。如果管道，先进先出，或者设备没有数据可读，no-delay选项就会造成read操作返回0，这与end of file造成的返回值0冲突了。虽然基于SVR4的系统还支持这个no-delay选项，但新的应用应该使用nonblocking选项。</p></blockquote><p>O_SYNC        Have each write wait for physical I/O to complete, including I/O necessary to update file attributes modified as a result of the write. We use this option in Section 3.14.  使每次write都等物理I/O完成，包括更新文件属性所需要的I/O。</p><p>O_TTY_INIT    When opening a terminal device that is not already open, set the nonstandard termios parameters to values that result in behavior that conforms to the Single UNIX Specification. We discuss the termios structure when we discuss terminal I/O in Chapter 18.  当打开一个新的终端设备的时候，设置非标准参数 termios。</p><p>The following two flags are also optional. They are part of the synchronized input and output option of the Single UNIX Specification (and thus POSIX.1). </p><p>O_DSYNC    Have each write wait for physical I/O to complete, but don’t wait for file attributes to be updated if they don’t affect the ability to read the data just written.  让所有write都等待物理I/O完成，但是不用等文件属性更新，如果不影响刚刚写完的数据的读操作的话。</p><p>O_RSYNC    Have each read operation on the file descriptor wait until any pending writes for the same portion of the file are complete.  使每个使用文件描述符的的读操作等待，直到对文件的同一部分的所有写操作完成。</p><blockquote><p>Solaris 10 supports all three synchronization flags. Historically, FreeBSD (and thus Mac OS X) have used the O_FSYNC flag, which has the same behavior as O_SYNC. Because the two flags are equivalent, they define the flags to have the same value. FreeBSD 8.0 doesn’t support the O_DSYNC or O_RSYNC flags. Mac OS X doesn’t support the O_RSYNC flag, but defines the O_DSYNC flag, treating it the same as the O_SYNC flag. Linux 3.2.0 supports the O_DSYNC flag, but treats the O_RSYNC flag the same as O_SYNC. </p></blockquote><p><strong>The file descriptor returned by open and openat is guaranteed to be the lowest- numbered unused descriptor</strong>. This fact is used by some applications to open a new file on standard input, standard output, or standard error. <strong>For example, an application might close standard output—normally, file descriptor 1—and then open another file, knowing that it will be opened on file descriptor 1</strong>. We’ll see a better way to guarantee that a file is open on a given descriptor in Section 3.12, when we explore the dup2 function. </p><p><strong>The fd parameter</strong> distinguishes the openat function from the open function. There are three possibilities:</p><ol><li><p>The path parameter specifies an absolute pathname. In this case, the fd parameter is ignored and the openat function behaves like the open function. </p></li><li><p>The path parameter specifies a relative pathname and the fd parameter is a file descriptor that specifies the starting location in the file system where the relative pathname is to be evaluated. The fd parameter is obtained by opening the directory where the relative pathname is to be evaluated. </p></li><li><p>The path parameter specifies a relative pathname and the fd parameter has the special value AT_FDCWD. In this case, the pathname is evaluated starting in the current working directory and the openat function behaves like the open function. </p></li></ol><p>The openat function is one of a class of functions added to the latest version of POSIX.1 to address two problems. First, it gives threads a way to use relative pathnames to open files in directories other than the current working directory. As we’ll see in Chapter 11, all threads in the same process share the same current working directory, so this makes it difficult for multiple threads in the same process to work in different directories at the same time. Second, it provides a way to avoid time-of-check- to-time-of-use (TOCTTOU) errors.  openat函数是在最后一个版本的POSIX.1加入的，为了解决两个问题。首先，它给线程以相对路径而非当前路径。我们将在第11章看到，在同一进程中的所有线程共享同一个当前目录，所以要让同一进程中的多线程同时在不同的目录工作是非常困难的。第二，它提供了避免 time-of-check-to-time-of-use（TOCTTOU） 错误。</p><p>The basic idea behind TOCTTOU errors is that a program is vulnerable if it makes two file-based function calls where the second call depends on the results of the first call. Because the two calls are not atomic, the file can change between the two calls, thereby invalidating the results of the first call, leading to a program error. TOCTTOU errors in the file system namespace generally deal with attempts to subvert file system permissions by tricking a privileged program into either reducing permissions on a privileged file or modifying a privileged file to open up a security hole. Wei and Pu [2005] discuss TOCTTOU weaknesses in the UNIX file system interface.  TOCTTOU错误的意思是，一个调用横叉一脚影响了另一个调用，本来另一个调用应该是一个原子操作。</p><h3 id="Filename-and-Pathname-Truncation"><a href="#Filename-and-Pathname-Truncation" class="headerlink" title="Filename and Pathname Truncation"></a>Filename and Pathname Truncation</h3><p>What happens if NAME_MAX is 14 and we try to create a new file in the current directory with a filename containing 15 characters? Traditionally, early releases of System V, such as SVR2, allowed this to happen, silently truncating the filename beyond the 14th character. BSD-derived systems, in contrast, returned an error status, with errno set to ENAMETOOLONG. Silently truncating the filename presents a problem that affects more than simply the creation of new files. If NAME_MAX is 14 and a file exists whose name is exactly 14 characters, any function that accepts a pathname argument, such as open or stat, has no way to determine what the original name of the file was, as the original name might have been truncated.  如果NAME_MAX是14怎么办？传统上，早期的System V系统，允许这发生，静默的将文件名截断成14字符。相反的，BSD派生的系统，返回一个错误状态，并把errno设置成ENAMETOOLONG。静默的截断文件名呈现的问题不仅仅是创建了一个新文件。如果NAME_MAX是14且文件存在，且它的名字就是14字符，任何接收一个路径名作为参数的函数，比如open或者stat，没办法判断文件原来的名字是什么，因为原始文件名可能已经被截断。</p><p>With POSIX.1, the constant <code>_POSIX_NO_TRUNC</code> determines whether long filenames and long components of pathnames are truncated or an error is returned. As we saw in Chapter 2, this value can vary based on the type of the file system, and we can use fpathconf or pathconf to query a directory to see which behavior is supported.  在POSIX.1标准里，常量 <code>_POSIX_NO_TRUNC</code> 决定长文件名和路径名中长的组件是否被截断或者是否返回一个错误。正如我们在第二章中看到的，这个值在文件系统中是非常基本的，我们可以使用 <code>fpathconf</code> 或 <code>pathconf</code>查询一个目录看看它支持哪种行为。</p><blockquote><p>Whether an error is returned is largely historical. For example, SVR4-based systems do not generate an error for the traditional System V file system, S5. For the BSD-style file system (known as UFS), however, SVR4-based systems do generate an error. Figure 2.20 illustrates another example: Solaris will return an error for UFS, but not for PCFS, the DOS-compatible file system, as DOS silently truncates filenames that don’t fit in an 8.3 format. BSD-derived systems and Linux always return an error. </p></blockquote><p>If _POSIX_NO_TRUNC is in effect, errno is set to ENAMETOOLONG, and an error status is returned if any filename component of the pathname exceeds NAME_MAX. </p><blockquote><p>Most modern file systems support a maximum of 255 characters for filenames. Because filenames are usually shorter than this limit, this constraint tends to not present problems for most applications. </p></blockquote><h2 id="creat-Function"><a href="#creat-Function" class="headerlink" title="creat Function"></a>creat Function</h2><p>A new file can also be created by calling the creat function. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">creat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="comment">// Returns: file descriptor opened for write-only if OK, −1 on error</span></span><br></pre></td></tr></table></figure><p>Note that this function is equivalent to </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(path, O_WRONLY | O_CREAT | O_TRUNC, mode);</span><br></pre></td></tr></table></figure><blockquote><p>Historically, in early versions of the UNIX System, the second argument to open could be only 0, 1, or 2. There was no way to open a file that didn’t already exist. Therefore, a separate system call, creat, was needed to create new files. With the O_CREAT and O_TRUNC options now provided by open, a separate creat function is no longer needed.  这个函数诞生的原因是：历史上open函数的第二个参数只支持0，1，2这三个值，也就是读，写，读写。没办法打开一个不存在的文件。而现在有了O_CREAT and O_TRUNC options，creat函数也就没有存在的必要了。</p></blockquote><p>We’ll show how to specify mode in Section 4.5 when we describe a file’s access permissions in detail. </p><p>One deficiency with creat is that the file is opened only for writing. Before the new version of open was provided, if we were creating a temporary file that we wanted to write and then read back, we had to call creat, close, and then open. A better way is to use the open function, as in </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(path, O_RDWR | O_CREAT | O_TRUNC, mode);</span><br></pre></td></tr></table></figure><h2 id="close-Function"><a href="#close-Function" class="headerlink" title="close Function"></a>close Function</h2><p>An open file is closed by calling the close function. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: 0 if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><p>Closing a file also releases any record locks that the process may have on the file. We’ll discuss this point further in Section 14.3.  关闭一个文件同样会释放进程对该文件的所有锁。</p><p>When a process terminates, all of its open files are closed automatically by the kernel. Many programs take advantage of this fact and don’t explicitly close open files. See the program in Figure 1.4, for example.  当一个进程终止，所有它打开的文件都会被内核自动关闭。许多程序利用了这一点，不明确关闭文件。</p><h2 id="lseek-Function"><a href="#lseek-Function" class="headerlink" title="lseek Function"></a>lseek Function</h2><p>Every open file has an associated “current file offset,” normally a non-negative integer that measures the number of bytes from the beginning of the file. (We describe some exceptions to the ‘‘non-negative’’ qualifier later in this section.) Read and write operations normally start at the current file offset and cause the offset to be incremented by the number of bytes read or written. By default, this offset is initialized to 0 when a file is opened, unless the O_APPEND option is specified.  每个打开的文件都与 “current file offset”关联，正常情况下它是一个非负整形数，表示从文件开始到目前位置的字节数。读和写操作都是从 current file offset开始的，并且会让offset增加，随着读和写的进行。默认的，当文件被打开时，这个位移初始化时0，除非指明了O_APPEND选项。</p><p>An open file’s offset can be set explicitly by calling lseek.  通过调用 lseek函数，一个打开的文件的offset可以被设定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">off_t</span> lseek(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence);</span><br><span class="line"><span class="comment">// Returns: new file offset if OK, −1 on error</span></span><br></pre></td></tr></table></figure><p>The interpretation of the offset depends on the value of the whence argument. </p><ul><li>If whence is SEEK_SET, the file’s offset is set to offset bytes from the beginning of the file. </li><li>If whence is SEEK_CUR, the file’s offset is set to its current value plus the offset. The offset can be positive or negative. </li><li>If whence is SEEK_END, the file’s offset is set to the size of the file plus the offset. The offset can be positive or negative.</li></ul><p>Because a successful call to lseek returns the new file offset, we can seek zero bytes from the current position to determine the current offset: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">off_t</span>    currpos;</span><br><span class="line">currpos = lseek(fd, <span class="number">0</span>, SEEK_CUR);</span><br></pre></td></tr></table></figure><p>This technique can also be used to determine if a file is capable of seeking. If the file descriptor refers to a pipe, FIFO, or socket, lseek sets errno to <strong>ESPIPE</strong> and returns −1.  </p><blockquote><p>The three symbolic constants—SEEK_SET, SEEK_CUR, and SEEK_END—were introduced with System V. Prior to this, <strong>whence was specified as 0 (absolute), 1 (relative to the current offset), or 2 (relative to the end of file). Much software still exists with these numbers hard coded</strong>. </p><p><strong>The character l in the name lseek means ‘‘long integer.’’ Before the introduction of the off_t data type, the offset argument and the return value were long integers</strong>. lseek was introduced with Version 7 when long integers were added to C. (Similar functionality was provided in Version 6 by the functions seek and tell.) </p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The program in Figure 3.1 tests its standard input to see whether it is capable of seeking. </p><blockquote><p>Figure 3.1 Test whether standard input is capable of seeking </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lseek(STDIN_FILENO, <span class="number">0</span>, SEEK_CUR) == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cannot seek\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seek OK\n"</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Normally, a file’s current offset must be a non-negative integer. It is possible, however, that certain devices could allow negative offsets. But for regular files, the offset must be non-negative. Because negative offsets are possible, we should be careful to compare the return value from lseek as being equal to or not equal to −1, rather than testing whether it is less than 0</strong>. </p><blockquote><p>The /dev/kmem device on FreeBSD for the Intel x86 processor supports negative offsets. Because the offset (off_t) is a signed data type (Figure 2.21), we lose a factor of 2 in the maximum file size. If off_t is a 32-bit integer, the maximum file size is $2^{31}$−1 bytes. </p></blockquote><p>lseek only records the current file offset within the kernel — it does not cause any I/O to take place. This offset is then used by the next read or write operation. </p><p>The file’s offset can be greater than the file’s current size, in which case the next write to the file will extend the file. This is referred to as creating a hole in a file and is allowed. Any bytes in a file that have not been written are read back as 0.  文件偏移量可以大于文件的目前大小，在这种情况下下一次写文件将扩展文件。也就是说在文件中创建一个空洞是被允许的。在文件中任何没被写入的部分都将被读作0。</p><p>A hole in a file isn’t required to have storage backing it on disk. Depending on the file system implementation, when you write after seeking past the end of a file, new disk blocks might be allocated to store the data, but there is no need to allocate disk blocks for the data between the old end of file and the location where you start writing.  文件中的空洞并不需要存储到磁盘上。根据文件系统的实现，当你在end of file之后写，为了存储数据新的磁盘空间可能会分配，但没有必要分配磁盘块给end of file和你开始写的地方之间的这些数据。</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>The program shown in Figure 3.2 creates a file with a hole in it. </p><blockquote><p>Figure 3.2  Create a file with a hole in it </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span>    buf1[] = <span class="string">"abcdefghij"</span>;</span><br><span class="line"><span class="keyword">char</span>    buf2[] = <span class="string">"ABCDEFGHIJ"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span> ((fd = creat(<span class="string">"file.hole"</span>, FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line">    err_sys(<span class="string">"creat error"</span>);</span><br><span class="line">    <span class="keyword">if</span> (write(fd, buf1, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line">    err_sys(<span class="string">"buf1 write error"</span>);</span><br><span class="line">    <span class="comment">/* offset now = 10 */</span></span><br><span class="line">    <span class="keyword">if</span> (lseek(fd, <span class="number">16384</span>, SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line">    err_sys(<span class="string">"lseek error"</span>);</span><br><span class="line">    <span class="comment">/* offset now = 16384 */</span></span><br><span class="line">    <span class="keyword">if</span> (write(fd, buf2, <span class="number">10</span>) != <span class="number">10</span>)</span><br><span class="line">        err_sys(<span class="string">"buf2 write error"</span>);</span><br><span class="line">    <span class="comment">/* offset now = 16394 */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="read-Function"><a href="#read-Function" class="headerlink" title="read Function"></a>read Function</h2><p>Data is read from an open file with the read function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">ssize_t read(int fd, void *buf, size_t nbytes);</span><br></pre></td></tr></table></figure><blockquote><p>Returns: numbers of bytes read, 0 if end of file, -1 on error</p></blockquote><p>If the read is successful, the number of bytes read is returned. If the end of file is encountered, 0 is returned.</p><p>There are several cases in which the number of bytes actually read is less than the amount requested: 有以下几种情况，read读取的字节会比指定的字节数少</p><ul><li>When reading from a regular file, if the end of file is reached before the requested number of bytes has been read. For example, if 30 bytes remain until the end of file and we try to read 100 bytes, read returns 30. The next time we call read, it will return 0 (end of file).</li><li>When reading from a terminal device. Normally, up to one line is read at a time. (We’ll see how to change this default in Chapter 18.)</li><li>When reading from a network. Buffering within the network may cause less than the requested amount to be returned.</li><li>When reading from a pipe or FIFO. If the pipe contains fewer bytes than requested, read will return only what is available.</li><li>When reading from a record-oriented device. Some record-oriented devices, such as magnetic tape, can return up to a single record at a time.</li><li>When interrupted by a signal and a partial amount of data has already been read. We discuss this further in Section 10.5.</li></ul><p>The read operation starts at the file’s current offset. Before a successful return, the offset is incremented by the number of bytes actually read. read操作是从文件的当前偏移量开始的。在成功返回前，偏移量会随读取的字节增加。</p><p>POSIX.1 changed the prototype for this function in several ways. The classic definition is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int read(int fd, char *buf, unsigned nbytes);</span><br></pre></td></tr></table></figure><ul><li>First, the second argument was changed from char <em> to void </em> to be consistent<br>with ISO C: the type void * is used for generic pointers.</li><li>Next, the return value was required to be a signed integer (ssize_t) to return a positive byte count, 0 (for end of file), or −1 (for an error).</li><li>Finally, the third argument historically has been an unsigned integer, to allow a 16-bit implementation to read or write up to 65,534 bytes at a time. With the 1990 POSIX.1 standard, the primitive system data type ssize_t was introduced to provide the signed return value, and the unsigned size_t was used for the third argument. (Recall the SSIZE_MAX constant from Section 2.5.2.)</li></ul><h2 id="write-Function"><a href="#write-Function" class="headerlink" title="write Function"></a>write Function</h2><p>Data is written to an open file with the write function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">ssize_t write(int fd, const void *buf, size_t nbytes);</span><br></pre></td></tr></table></figure><p>The return value is usually equal to the nbytes argument; otherwise, an error has occurred. A common cause for a write error is either filling up a disk or exceeding the file size limit for a given process (Section 7.11 and Exercise 10.11). 返回值一般会等于<code>nbytes</code>这个参数的大小，否则就是出错了。一般导致写错误的原因是磁盘满了或者超出给定进程的文件大小限制。</p><p>For a regular file, the write operation starts at the file’s current offset. If the O_APPEND option was specified when the file was opened, the file’s offset is set to the current end of file before each write operation. After a successful write, the file’s offset is incremented by the number of bytes actually written.</p><h2 id="I-O-Efficiency"><a href="#I-O-Efficiency" class="headerlink" title="I/O Efficiency"></a>I/O Efficiency</h2><p>The program in Figure 3.5 copies a file, using only the read and write functions.</p><blockquote><p>Figure 3.5 Copy standard input to standard output</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#define BUFFSIZE 4096</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int     n;</span><br><span class="line">    char    buf[BUFFSIZE];</span><br><span class="line">    while ((n = read(STDIN_FILENO, buf, BUFFSIZE)) &gt; 0)</span><br><span class="line">        if (write(STDOUT_FILENO, buf, n) != n)</span><br><span class="line">            err_sys(&quot;write error&quot;);</span><br><span class="line">    if (n &lt; 0)</span><br><span class="line">        err_sys(&quot;read error&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The following caveats apply to this program.</p><ul><li>It reads from standard input and writes to standard output, assuming that these have been set up by the shell before this program is executed. Indeed, all normal UNIX system shells provide a way to open a file for reading on standard input and to create (or rewrite) a file on standard output. This prevents the program from having to open the input and output files, and allows the user to take advantage of the shell’s I/O redirection facilities.</li><li>The program doesn’t close the input file or output file. Instead, the program uses the feature of the UNIX kernel that closes all open file descriptors in a process when that process terminates.</li><li>This example works for both text files and binary files, since there is no difference between the two to the UNIX kernel.</li></ul><p>One question we haven’t answered, however, is how we chose the BUFFSIZE value. Before answering that, let’s run the program using different values for BUFFSIZE. Figure 3.6 shows the results for reading a 516,581,760-byte file, using 20 different buffer sizes.</p><p><img src="../../../../images/APUE-3rd-Figure 3.6.png" width="70%"></p><p>The file was read using the program shown in Figure 3.5, with standard output redirected to /dev/null. The file system used for this test was the Linux ext4 file system with 4,096-byte blocks. (The st_blksize value, which we describe in Section 4.12, is 4,096.) This accounts for the minimum in the system time occurring at the few timing measurements starting around a BUFFSIZE of 4,096. Increasing the buffer size beyond this limit has little positive effect.</p><p>Most file systems support some kind of read-ahead to improve performance. When sequential reads are detected, the system tries to read in more data than an application requests, assuming that the application will read it shortly. The effect of read-ahead can be seen in Figure 3.6, where the elapsed time for buffer sizes as small as 32 bytes is as good as the elapsed time for larger buffer sizes.</p><p>We’ll return to this timing example later in the text. In Section 3.14, we show the effect of synchronous writes; in Section 5.8, we compare these unbuffered I/O times with the standard I/O library.</p><blockquote><p>Beware when trying to measure the performance of programs that read and write files. The operating system will try to cache the file incore, so if you measure the performance of the program repeatedly, the successive timings will likely be better than the first. This improvement occurs because the first run causes the file to be entered into the system’s cache, and successive runs access the file from the system’s cache instead of from the disk. (The term incore means in main memory. Back in the day, a computer’s main memory was built out of ferrite core. This is where the phrase ‘‘core dump’’ comes from: the main memory image of a program stored in a file on disk for diagnosis.)</p><p>In the tests reported in Figure 3.6, each run with a different buffer size was made using a different copy of the file so that the current run didn’t find the data in the cache from the previous run. The files are large enough that they all don’t remain in the cache (the test system was configured with 6 GB of RAM).</p></blockquote><h2 id="File-Sharing"><a href="#File-Sharing" class="headerlink" title="File Sharing"></a>File Sharing</h2><p>The UNIX System supports the sharing of open files among different processes. Before describing the dup function, we need to describe this sharing. To do this, we’ll examine the data structures used by the kernel for all I/O. </p><blockquote><p>The following description is conceptual; it may or may not match a particular implementation. Refer to Bach [1986] for a discussion of these structures in System V. McKusick et al. [1996] describe these structures in 4.4BSD. McKusick and Neville-Neil [2005] cover FreeBSD 5.2. For a similar discussion of Solaris, see McDougall and Mauro [2007]. The Linux 2.6 kernel architecture is discussed in Bovet and Cesati [2006]. </p></blockquote><p>The kernel uses three data structures to represent an open file, and the relationships among them determine the effect one process has on another with regard to file sharing. </p><ol><li><p>Every process has an entry in the process table. Within each process table entry is a table of open file descriptors, which we can think of as a vector, with one entry per descriptor. Associated with each file descriptor are </p><ol><li>The file descriptor flags (close-on-exec; refer to Figure 3.7 and Section 3.14) </li><li>A pointer to a file table entry </li></ol></li><li><p>The kernel maintains a file table for all open files. Each file table entry contains </p><ol><li>The file status flags for the file, such as read, write, append, sync, and nonblocking; more on these in Section 3.14 </li><li>The current file offset </li><li>A pointer to the v-node table entry for the file </li></ol></li><li><p>Each open file (or device) has a v-node structure that <strong>contains information about the type of file</strong> and <strong>pointers to functions that operate on the file</strong>. For most files, the v-node also contains the i-node for the file. <strong>This information is read from disk when the file is opened</strong>, so that all the pertinent information about the file is readily available. For example, <strong>the i-node contains the owner of the file, the size of the file, pointers to where the actual data blocks for the file are located on disk</strong>, and so on. (We talk more about i-nodes in Section 4.14 when we describe the typical UNIX file system in more detail.) </p></li></ol><blockquote><p>Linux has no v-node. Instead, a generic i-node structure is used. Although the implementations differ, the v-node is conceptually the same as a generic i-node. Both point to an i-node structure specific to the file system.</p></blockquote><p>We’re ignoring some implementation details that don’t affect our discussion. For example, the table of open file descriptors can be stored in the user area (a separate per- process structure that can be paged out) instead of the process table. Also, these tables can be implemented in numerous ways—they need not be arrays; one alternate implementation is a linked lists of structures. Regardless of the implementation details, the general concepts remain the same. </p><p>Figure 3.7 shows a pictorial arrangement of these three tables for a single process that has two different files open: one file is open on standard input (file descriptor 0), and the other is open on standard output (file descriptor 1). </p><p><img src="https://i.loli.net/2018/05/30/5b0e51e54c6d1.png"></p><p>The arrangement of these three tables has existed since the early versions of the UNIX System [Thompson 1978]. <strong>This arrangement is critical to the way files are shared among processes</strong>. We’ll return to this figure in later chapters, when we describe additional ways that files are shared. </p><blockquote><p><strong>The v-node was invented to provide support for multiple file system types on a single computer system</strong>. This work was done independently by Peter Weinberger (Bell Laboratories) and Bill Joy (Sun Microsystems). <strong>Sun called this the Virtual File System and called the file system–independent portion of the i-node the v-node</strong> [Kleiman 1986]. The v-node propagated through various vendor implementations as support for Sun’s Network File System (NFS) was added. The first release from Berkeley to provide v-nodes was the 4.3BSD Reno release, when NFS was added. </p><p>In SVR4, the v-node replaced the file system–independent i-node of SVR3. Solaris is derived from SVR4 and, therefore, uses v-nodes. </p><p>Instead of splitting the data structures into a v-node and an i-node, Linux uses a file system–independent i-node and a file system–dependent i-node. </p></blockquote><p>If two independent processes have the same file open, we could have the arrangement shown in Figure 3.8. </p><p><img src="https://i.loli.net/2018/05/30/5b0e5b6638838.png"></p><p>We assume here that the first process has the file open on descriptor 3 and that the second process has that same file open on descriptor 4. Each process that opens the file gets its own file table entry, but only a single v-node table entry is required for a given file. One reason each process gets its own file table entry is so that each process has its own current offset for the file. </p><p>Given these data structures, we now need to be more specific about what happens with certain operations that we’ve already described. </p><ul><li>After each write is complete, the current file offset in the file table entry is incremented by the number of bytes written. If this causes the current file offset to exceed the current file size, the current file size in the i-node table entry is set to the current file offset (for example, the file is extended). </li><li>If a file is opened with the O_APPEND flag, a corresponding flag is set in the file status flags of the file table entry. Each time a write is performed for a file with this append flag set, the current file offset in the file table entry is first set to the current file size from the i-node table entry. This forces every write to be appended to the current end of file. 如果一个文件打开时使用<code>O_APPEND</code>标志，相应的标志会设置到文件表项的文件状态符。每次进行写操作时，文件表项就会首先将当前文件偏移量设置为i结点表项的当前文件大小。这样就可以强制每次都写到文件末尾了。</li><li>If a file is positioned to its current end of file using lseek, all that happens is the current file offset in the file table entry is set to the current file size from the i-node table entry. (Note that this is not the same as if the file was opened with the O_APPEND flag, as we will see in Section 3.11.) </li><li>The lseek function modifies only the current file offset in the file table entry. No I/O takes place. </li></ul><p>It is possible for more than one file descriptor entry to point to the same file table entry, as we’ll see when we discuss the dup function in Section 3.12. This also happens after a fork when the parent and the child share the same file table entry for each open descriptor (Section 8.3). </p><p><strong>Note the difference in scope between the file descriptor flags and the file status flags. The former apply only to a single descriptor in a single process, whereas the latter apply to all descriptors in any process that point to the given file table entry</strong>. When we describe the fcntl function in Section 3.14, we’ll see how to fetch and modify both the file descriptor flags and the file status flags. </p><p>Everything that we’ve described so far in this section works fine for multiple processes that are reading the same file. Each process has its own file table entry with its own current file offset. Unexpected results can arise, however, when multiple processes write to the same file. To see how to avoid some surprises, we need to understand the concept of atomic operations. </p><h2 id="Atomic-Operations"><a href="#Atomic-Operations" class="headerlink" title="Atomic Operations"></a>Atomic Operations</h2><h3 id="Appending-to-a-File"><a href="#Appending-to-a-File" class="headerlink" title="Appending to a File"></a>Appending to a File</h3><p>Consider a single process that wants to append to the end of a file. Older versions of the UNIX System didn’t support the O_APPEND option to open, so the program was coded as follows: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lseek(fd, <span class="number">0L</span>, <span class="number">2</span>) &lt; <span class="number">0</span>)         <span class="comment">/* position to EOF */</span></span><br><span class="line">trueerr_sys(<span class="string">"lseek error"</span>);</span><br><span class="line"><span class="keyword">if</span> (write(fd, buf, <span class="number">100</span>) != <span class="number">100</span>)   <span class="comment">/* and write */</span></span><br><span class="line">trueerr_sys(<span class="string">"write error"</span>);</span><br></pre></td></tr></table></figure><p>This works fine for a single process, but problems arise if multiple processes use this technique to append to the same file. (This scenario can arise if multiple instances of the same program are appending messages to a log file, for example.) </p><p>Assume that two independent processes, A and B, are appending to the same file. Each has opened the file but without the O_APPEND flag. This gives us the same picture as Figure 3.8. Each process has its own file table entry, but they share a single v-node table entry. Assume that process A does the lseek and that this sets the current offset for the file for process A to byte offset 1,500 (the current end of file). Then the kernel switches processes, and B continues running. Process B then does the lseek, which sets the current offset for the file for process B to byte offset 1,500 also (the current end of file). Then B calls write, which increments B’s current file offset for the file to 1,600. Because the file’s size has been extended, the kernel also updates the current file size in the v-node to 1,600. Then the kernel switches processes and A resumes. When A calls write, the data is written starting at the current file offset for A, which is byte offset 1,500. This overwrites the data that B wrote to the file. </p><p>The problem here is that our logical operation of ‘‘position to the end of file and write’’ requires two separate function calls (as we’ve shown it). The solution is to have the positioning to the current end of file and the write be an atomic operation with regard to other processes. Any operation that requires more than one function call cannot be atomic, as there is always the possibility that the kernel might temporarily suspend the process between the two function calls (as we assumed previously). </p><p>The UNIX System provides an atomic way to do this operation if we set the O_APPEND flag when a file is opened. As we described in the previous section, this causes the kernel to position the file to its current end of file before each write. We no longer have to call lseek before each write. </p><h3 id="pread-and-pwrite-Functions"><a href="#pread-and-pwrite-Functions" class="headerlink" title="pread and pwrite Functions"></a>pread and pwrite Functions</h3><p>The Single UNIX Specification includes two functions that allow applications to seek and perform I/O atomically: pread and pwrite. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: number of bytes read, 0 if end of file, −1 on error</span></span><br><span class="line"><span class="keyword">ssize_t</span> pread(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes, <span class="keyword">off_t</span> offset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: number of bytes written if OK, −1 on error</span></span><br><span class="line"><span class="keyword">ssize_t</span> pwrite(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes, <span class="keyword">off_t</span> offset);</span><br></pre></td></tr></table></figure><p>Calling pread is equivalent to calling lseek followed by a call to read, with the following exceptions. </p><ul><li>There is no way to interrupt the two operations that occur when we call pread. </li><li>The current file offset is not updated. </li></ul><p>Calling pwrite is equivalent to calling lseek followed by a call to write, with similar exceptions. </p><h3 id="Creating-a-File"><a href="#Creating-a-File" class="headerlink" title="Creating a File"></a>Creating a File</h3><p>We saw another example of an atomic operation when we described the O_CREAT and O_EXCL options for the open function. When both of these options are specified, the open will fail if the file already exists. We also said that the check for the existence of the file and the creation of the file was performed as an atomic operation. If we didn’t have this atomic operation, we might try </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((fd = open(path, O_WRONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (errno == ENOENT) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((fd = creat(path, mode)) &lt; <span class="number">0</span>)</span><br><span class="line">            err_sys(<span class="string">"creat error"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        err_sys(<span class="string">"open error"</span>);</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p>The problem occurs if the file is created by another process between the open and the creat. If the file is created by another process between these two function calls, and if that other process writes something to the file, that data is erased when this creat is executed. Combining the test for existence and the creation into a single atomic operation avoids this problem. </p><p>In general, the term atomic operation refers to an operation that might be composed of multiple steps. If the operation is performed atomically, either all the steps are performed (on success) or none are performed (on failure). It must not be possible for only a subset of the steps to be performed. We’ll return to the topic of atomic operations when we describe the link function (Section 4.15) and record locking (Section 14.3). </p><h2 id="dup-and-dup2-Functions"><a href="#dup-and-dup2-Functions" class="headerlink" title="dup and dup2 Functions"></a>dup and dup2 Functions</h2><p>An existing file descriptor is duplicated by either of the following functions: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: new file descriptor if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> fd2)</span></span>;</span><br></pre></td></tr></table></figure><p>The new file descriptor returned by dup is guaranteed to be the lowest-numbered available file descriptor. <strong>With dup2, we specify the value of the new descriptor with the fd2 argument. If fd2 is already open, it is first closed. If fd equals fd2, then dup2 returns fd2 without closing it. Otherwise, the FD_CLOEXEC file descriptor flag is cleared for fd2, so that fd2 is left open if the process calls exec</strong>.</p><p>The new file descriptor that is returned as the value of the functions shares the same file table entry as the fd argument. We show this in Figure 3.9. </p><p><img src="https://i.loli.net/2018/05/30/5b0e6c0a52034.png"></p><p>In this figure, we assume that when it’s started, the process executes </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newfd = dup(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>We assume that the next available descriptor is 3 (which it probably is, since 0, 1, and 2 are opened by the shell). Because both descriptors point to the same file table entry, they share the same file status flags—read, write, append, and so on—and the same current file offset. </p><p>Each descriptor has its own set of file descriptor flags. As we describe in Section 3.14, the close-on-exec file descriptor flag for the new descriptor is always cleared by the dup functions. </p><p>Another way to duplicate a descriptor is with the fcntl function, which we describe in Section 3.14. Indeed, the call </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dup(fd);</span><br></pre></td></tr></table></figure><p>is equivalent to </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcntl(fd, F_DUPFD, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Similarly, the call </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dup2(fd, fd2);</span><br></pre></td></tr></table></figure><p>is equivalent to </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">close(fd2);</span><br><span class="line">fcntl(fd, F_DUPFD, fd2);</span><br></pre></td></tr></table></figure><p>In this last case, the dup2 is not exactly the same as a close followed by an fcntl. The differences are as follows: </p><ol><li>dup2 is an atomic operation, whereas the alternate form involves two function calls. It is possible in the latter case to have a signal catcher called between the close and the fcntl that could modify the file descriptors. (We describe signals in Chapter 10.) The same problem could occur if a different thread changes the file descriptors. (We describe threads in Chapter 11.) </li><li>There are some errno differences between dup2 and fcntl. </li></ol><blockquote><p>The dup2 system call originated with Version 7 and propagated through the BSD releases. The fcntl method for duplicating file descriptors appeared with System III and continued with SystemV. SVR3.2 picked up the dup2 function, and 4.2BSD picked up the fcntl function and the F_DUPFD functionality. POSIX.1 requires both dup2 and the F_DUPFD feature of fcntl. </p></blockquote><h2 id="sync-fsync-and-fdatasync-Functions"><a href="#sync-fsync-and-fdatasync-Functions" class="headerlink" title="sync, fsync, and fdatasync Functions"></a>sync, fsync, and fdatasync Functions</h2><p>Traditional implementations of the UNIX System have a buffer cache or page cache in the kernel through which most disk I/O passes. When we write data to a file, the data is normally copied by the kernel into one of its buffers and queued for writing to disk at some later time. This is called delayed write. (Chapter 3 of Bach [1986] discusses this buffer cache in detail.) </p><p>The kernel eventually writes all the delayed-write blocks to disk, normally when it needs to reuse the buffer for some other disk block. To ensure consistency of the file system on disk with the contents of the buffer cache, the sync, fsync, and fdatasync functions are provided. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Both Returns: 0 if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fsync</span><span class="params">(<span class="keyword">int</span> fd)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fdatasync</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sync</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>The sync function simply queues all the modified block buffers for writing and returns; it does not wait for the disk writes to take place</strong>. </p><p><strong>The function sync is normally called periodically (usually every 30 seconds) from a system daemon, often called update</strong>. This guarantees regular flushing of the kernel’s block buffers. The command sync(1) also calls the sync function. </p><p>The function fsync refers only to a single file, specified by the file descriptor fd, and <strong>waits for the disk writes to complete before returning</strong>. This function is used when an application, <strong>such as a database</strong>, needs to be sure that the modified blocks have been written to the disk. </p><p><strong>The fdatasync function is similar to fsync, but it affects only the data portions of a file. With fsync, the file’s attributes are also updated synchronously</strong>. </p><blockquote><p>All four of the platforms described in this book support sync and fsync. However, FreeBSD 8.0 does not support fdatasync. </p></blockquote><h2 id="fcntl-Function"><a href="#fcntl-Function" class="headerlink" title="fcntl Function"></a>fcntl Function</h2><p>The fcntl function can change the properties of a file that is already open. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: depends on cmd if OK (see following), −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, ... <span class="comment">/* int arg */</span> )</span></span>;</span><br></pre></td></tr></table></figure><p>In the examples in this section, the third argument is always an integer, corresponding to the comment in the function prototype just shown. When we describe record locking in Section 14.3, however, the third argument becomes a pointer to a structure. </p><p>The fcntl function is used for five different purposes. </p><ol><li><p>Duplicate an existing descriptor (cmd = F_DUPFD or F_DUPFD_CLOEXEC) </p></li><li><p>Get/set file descriptor flags (cmd = F_GETFD or F_SETFD) </p></li><li><p>Get/set file status flags (cmd = F_GETFL or F_SETFL) </p></li><li><p>Get/set asynchronous I/O ownership (cmd = F_GETOWN or F_SETOWN) </p></li><li><p>Get/set record locks (cmd = F_GETLK, F_SETLK, or F_SETLKW) </p></li></ol><p>We’ll now describe the first 8 of these 11 cmd values. (We’ll wait until Section 14.3 to describe the last 3, which deal with record locking.) Refer to Figure 3.7, as we’ll discuss both the file descriptor flags associated with each file descriptor in the process table entry and the file status flags associated with each file table entry. </p><p>F_DUPFD     Duplicate the file descriptor fd. The new file descriptor is returned as the value of the function. It is the lowest-numbered descriptor that is not already open, and that is greater than or equal to the third argument (taken as an integer). The new descriptor shares the same file table entry as fd. (Refer to Figure 3.9.) But the new descriptor has its own set of file descriptor flags, and its FD_CLOEXEC file descriptor flag is cleared. (This means that the descriptor is left open across an exec, which we discuss in Chapter 8.) </p><p>F_DUPFD_CLOEXEC    Duplicate the file descriptor and set the FD_CLOEXEC file descriptor flag associated with the new descriptor. Returns the new file descriptor. </p><p>F_GETFD     Return the file descriptor flags for fd as the value of the function. Currently, only one file descriptor flag is defined: the FD_CLOEXEC flag. </p><p>F_SETFD     Set the file descriptor flags for fd. The new flag value is set from the third argument (taken as an integer). </p><blockquote><p>Be aware that some existing programs that deal with the file descriptor flags don’t use the constant FD_CLOEXEC. Instead, these programs set the flag to either 0 (don’t close-on-exec, the default) or 1 (do close-on-exec). </p></blockquote><p>F_GETFL     Return the file status flags for fd as the value of the function. We described the file status flags when we described the open function. They are listed in Figure 3.10. </p><p><img src="https://i.loli.net/2018/05/31/5b0f49576d719.png" width="70%"></p><p>Unfortunately, the five access-mode flags—O_RDONLY, O_WRONLY, O_RDWR, O_EXEC, and O_SEARCH—are not separate bits that can be tested. (As we mentioned earlier, the first three often have the values 0, 1, and 2, respectively, for historical reasons. Also, these five values are mutually exclusive; a file can have only one of them enabled.) Therefore, we must first use the O_ACCMODE mask to obtain the access-mode bits and then compare the result against any of the five values. </p><p>F_SETFL         Set the file status flags to the value of the third argument (taken as an integer). The only flags that can be changed are O_APPEND, O_NONBLOCK, O_SYNC, O_DSYNC, O_RSYNC, O_FSYNC, and O_ASYNC. </p><p>F_GETOWN     Get the process ID or process group ID currently receiving the SIGIO and SIGURG signals. We describe these asynchronous I/O signals in Section 14.5.2. </p><p>F_SETOWN     Set the process ID or process group ID to receive the SIGIO and SIGURG signals. A positive arg specifies a process ID. A negative arg implies a process group ID equal to the absolute value of arg. </p><p>The return value from fcntl depends on the command. All commands return −1 on an error or some other value if OK. The following four commands have special return values: F_DUPFD, F_GETFD, F_GETFL, and F_GETOWN. The first command returns the new file descriptor, the next two return the corresponding flags, and the final command returns a positive process ID or a negative process group ID. </p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>The program in Figure 3.11 takes a single command-line argument that specifies a file descriptor and prints a description of selected file flags for that descriptor. </p><blockquote><p>Figure 3.11 Print file flags for specified descriptor </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">     err_quit(<span class="string">"usage: a.out &lt;descriptor#&gt;"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((val = fcntl(atoi(argv[<span class="number">1</span>]), F_GETFL, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">     err_sys(<span class="string">"fcntl error for fd %d"</span>, atoi(argv[<span class="number">1</span>]));</span><br><span class="line">  <span class="keyword">switch</span> (val &amp; O_ACCMODE) &#123;</span><br><span class="line">    <span class="keyword">case</span> O_RDONLY:</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"read only"</span>);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> O_WRONLY:</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"write only"</span>);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> O_RDWR:</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"read write"</span>);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">       err_dump(<span class="string">"unknown access mode"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (val &amp; O_APPEND)</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">", append"</span>);</span><br><span class="line">  <span class="keyword">if</span> (val &amp; O_NONBLOCK)</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">", nonblocking"</span>);</span><br><span class="line">  <span class="keyword">if</span> (val &amp; O_SYNC)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">", synchronous writes"</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> !defined(_POSIX_C_SOURCE) &amp;&amp; defined(O_FSYNC) &amp;&amp; (O_FSYNC != O_SYNC)</span></span><br><span class="line">         <span class="keyword">if</span> (val &amp; O_FSYNC)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">", synchronous writes"</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that we use the feature test macro _POSIX_C_SOURCE and conditionally compile the file access flags that are not part of POSIX.1. The following script shows the operation of the program, when invoked from bash (the Bourne-again shell). Results will vary, depending on which shell you use. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  apue.3e ./fig3.11 0 &lt; /dev/tty</span><br><span class="line">read only</span><br><span class="line">➜  apue.3e ./fig3.11 1 &gt; temp.foo</span><br><span class="line">➜  apue.3e cat temp.foo</span><br><span class="line">write only</span><br><span class="line">➜  apue.3e ./fig3.11 2 2&gt;&gt;temp.foo</span><br><span class="line">write only, append</span><br><span class="line">➜  apue.3e ./fig3.11 5 5&lt;&gt;temp.foo</span><br><span class="line">read write</span><br></pre></td></tr></table></figure><p>The clause 5&lt;&gt;temp.foo opens the file temp.foo for reading and writing on file descriptor 5. </p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p>When we modify either the file descriptor flags or the file status flags, we must be careful to fetch the existing flag value, modify it as desired, and then set the new flag value. We can’t simply issue an F_SETFD or an F_SETFL command, as this could turn off flag bits that were previously set. </p><p>Figure 3.12 shows a function that sets one or more of the file status flags for a descriptor. </p><blockquote><p>Figure 3.12 Turn on one or more of the file status flags for a descriptor </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_fl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> flags)</span> <span class="comment">/* flags are file status flags to turn on */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> val;</span><br><span class="line">true<span class="keyword">if</span> ((val = fcntl(fd, F_GETFL, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">true   err_sys(<span class="string">"fcntl F_GETFL error"</span>);</span><br><span class="line">trueval |= flags;       <span class="comment">/* turn on flags */</span></span><br><span class="line">true<span class="keyword">if</span> (fcntl(fd, F_SETFL, val) &lt; <span class="number">0</span>)</span><br><span class="line">true   err_sys(<span class="string">"fcntl F_SETFL error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we change the middle statement to </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val &amp;=  ̃flags;      <span class="comment">/* turn flags off */</span></span><br></pre></td></tr></table></figure><p>we have a function named clr_fl, which we’ll use in some later examples. This statement logically ANDs the one’s complement of flags with the current val. </p><p>If we add the line </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_fl(STDOUT_FILENO, O_SYNC);</span><br></pre></td></tr></table></figure><p>to the beginning of the program shown in Figure 3.5, we’ll turn on the synchronous- write flag. This causes each write to wait for the data to be written to disk before returning. Normally in the UNIX System, a write only queues the data for writing; the actual disk write operation can take place sometime later. A database system is a likely candidate for using O_SYNC, so that it knows on return from a write that the data is actually on the disk, in case of an abnormal system failure. </p><p>We expect the O_SYNC flag to increase the system and clock times when the program runs. To test this, we can run the program in Figure 3.5, copying 492.6 MB of data from one file on disk to another and compare this with a version that does the same thing with the O_SYNC flag set. The results from a Linux system using the ext4 file system are shown in Figure 3.13. </p><p><img src="https://i.loli.net/2018/05/31/5b0f4c0dc6161.png" width="80%"></p><p>The six rows in Figure 3.13 were all measured with a BUFFSIZE of 4,096 bytes. The results in Figure 3.6 were measured while reading a disk file and writing to /dev/null, so there was no disk output. The second row in Figure 3.13 corresponds to reading a disk file and writing to another disk file. This is why the first and second rows in Figure 3.13 are different. The system time increases when we write to a disk file, because the kernel now copies the data from our process and queues the data for writing by the disk driver. We expect the clock time to increase as well when we write to a disk file. </p><p>When we enable synchronous writes, the system and clock times should increase significantly. As the third row shows, the system time for writing synchronously is not much more expensive than when we used delayed writes. This implies that the Linux operating system is doing the same amount of work for delayed and synchronous writes (which is unlikely), or else the O_SYNC flag isn’t having the desired effect. In this case, the Linux operating system isn’t allowing us to set the O_SYNC flag using fcntl, instead failing without returning an error (but it would have honored the flag if we were able to specify it when the file was opened). </p><p>The clock time in the last three rows reflects the extra time needed to wait for all of the writes to be committed to disk. After writing a file synchronously, we expect that a call to fsync will have no effect. This case is supposed to be represented by the last row in Figure 3.13, but since the O_SYNC flag isn’t having the intended effect, the last row behaves the same way as the fifth row. </p><p>Figure 3.14 shows timing results for the same tests run on Mac OS X 10.6.8, which uses the HFS file system. Note that the times match our expectations: synchronous writes are far more expensive than delayed writes, and using fsync with synchronous writes makes very little difference. Note also that adding a call to fsync at the end of the delayed writes makes little measurable difference. It is likely that the operating system flushed previously written data to disk as we were writing new data to the file, so by the time that we called fsync, very little work was left to be done. </p><p><img src="https://i.loli.net/2018/05/31/5b0f4c6873af3.png" width="80%"></p><p>Compare fsync and fdatasync, both of which update a file’s contents when we say so, with the O_SYNC flag, which updates a file’s contents every time we write to the file. The performance of each alternative will depend on many factors, including the underlying operating system implementation, the speed of the disk drive, and the type of the file system. </p><p>With this example, we see the need for fcntl. Our program operates on a descriptor (standard output), never knowing the name of the file that was opened on that descriptor. We can’t set the O_SYNC flag when the file is opened, since the shell opened the file. With fcntl, we can modify the properties of a descriptor, knowing only the descriptor for the open file. We’ll see another need for fcntl when we describe nonblocking pipes (Section 15.2), since all we have with a pipe is a descriptor. </p><h2 id="ioctl-Function"><a href="#ioctl-Function" class="headerlink" title="ioctl Function"></a>ioctl Function</h2><p>The ioctl function has always been the catchall for I/O operations. Anything that couldn’t be expressed using one of the other functions in this chapter usually ended up being specified with an ioctl. Terminal I/O was the biggest user of this function. (When we get to Chapter 18, we’ll see that POSIX.1 has replaced the terminal I/O operations with separate functions.) </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;     /* System V */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;  /* BSD and Linux */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: −1 on error, something else if OK</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> request, ...)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>The ioctl function was included in the Single UNIX Specification only as an extension for dealing with STREAMS devices [Rago 1993], but it was moved to obsolescent status in SUSv4. UNIX System implementations use ioctl for many miscellaneous device operations. Some implementations have even extended it for use with regular files. </p></blockquote><p>The prototype that we show corresponds to POSIX.1. FreeBSD 8.0 and Mac OS X 10.6.8 declare the second argument as an unsigned long. This detail doesn’t matter, since the second argument is always a #defined name from a header. </p><p>For the ISO C prototype, an ellipsis is used for the remaining arguments. Normally, however, there is only one more argument, and it’s usually a pointer to a variable or a structure. </p><p>In this prototype, we show only the headers required for the function itself. Normally, additional device-specific headers are required. For example, the ioctl commands for terminal I/O, beyond the basic operations specified by POSIX.1, all require the <termios.h> header. </termios.h></p><p>Each device driver can define its own set of ioctl commands. The system, however, provides generic ioctl commands for different classes of devices. Examples of some of the categories for these generic ioctl commands supported in FreeBSD are summarized in Figure 3.15. </p><p><img src="https://i.loli.net/2018/05/31/5b0f4cf6d20f6.png" width="60%"></p><p>The mag tape operations allow us to write end-of-file marks on a tape, rewind a tape, space forward over a specified number of files or records, and the like. None of these operations is easily expressed in terms of the other functions in the chapter (read, write, lseek, and so on), so the easiest way to handle these devices has always been to access their operations using ioctl. </p><p>We use the ioctl function in Section 18.12 to fetch and set the size of a terminal’s window, and in Section 19.7 when we access the advanced features of pseudo terminals. </p><h2 id="dev-fd"><a href="#dev-fd" class="headerlink" title="/dev/fd"></a>/dev/fd</h2><p>Newer systems provide a directory named /dev/fd whose entries are files named 0, 1, 2, and so on. Opening the file /dev/fd/n is equivalent to duplicating descriptor n, assuming that descriptor n is open. </p><blockquote><p>The /dev/fd feature was developed by Tom Duff and appeared in the 8th Edition of the Research UNIX System. It is supported by all of the systems described in this book: FreeBSD 8.0, Linux 3.2.0, Mac OS X 10.6.8, and Solaris 10. It is not part of POSIX.1. </p></blockquote><p>In the function call </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">"/dev/fd/0"</span>, mode);</span><br></pre></td></tr></table></figure><p>most systems ignore the specified mode, whereas others require that it be a subset of the mode used when the referenced file (standard input, in this case) was originally opened. Because the previous open is equivalent to </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd = dup(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>the descriptors 0 and fd share the same file table entry (Figure 3.9). For example, if descriptor 0 was opened read-only, we can only read on fd. Even if the system ignores the open mode and the call </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">"/dev/fd/0"</span>, O_RDWR);</span><br></pre></td></tr></table></figure><p>succeeds, we still can’t write to fd. </p><blockquote><p>The Linux implementation of /dev/fd is an exception. It maps file descriptors into symbolic links pointing to the underlying physical files. When you open /dev/fd/0, for example, you are really opening the file associated with your standard input. Thus the mode of the new file descriptor returned is unrelated to the mode of the /dev/fd file descriptor. </p></blockquote><p>We can also call creat with a /dev/fd pathname argument as well as specify O_CREAT in a call to open. This allows a program that calls creat to still work if the pathname argument is /dev/fd/1, for example. </p><blockquote><p>Beware of doing this on Linux. Because the Linux implementation uses symbolic links to the real files, using creat on a /dev/fd file will result in the underlying file being truncated. </p></blockquote><p>Some systems provide the pathnames /dev/stdin, /dev/stdout, and /dev/stderr. These pathnames are equivalent to /dev/fd/0, /dev/fd/1, and /dev/fd/2, respectively. </p><p>The main use of the /dev/fd files is from the shell. It allows programs that use pathname arguments to handle standard input and standard output in the same manner as other pathnames. For example, the cat(1) program specifically looks for an input filename of - and uses it to mean standard input. The command </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter file2 | cat file1 - file3 | lpr</span><br></pre></td></tr></table></figure><p>is an example. First, cat reads file1, then its standard input (the output of the filter program on file2), and then file3. If /dev/fd is supported, the special handling of - can be removed from cat, and we can enter </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter file2 | cat file1 /dev/fd/0 file3 | lpr</span><br></pre></td></tr></table></figure><p>The special meaning of - as a command-line argument to refer to the standard input or the standard output is a kludge that has crept into many programs. There are also problems if we specify - as the first file, as it looks like the start of another command-line option. Using /dev/fd is a step toward uniformity and cleanliness. </p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This chapter has described the basic I/O functions provided by the UNIX System. These are often called the unbuffered I/O functions because each read or write invokes a system call into the kernel. Using only read and write, we looked at the effect of various I/O sizes on the amount of time required to read a file. We also looked at several ways to flush written data to disk and their effect on application performance. </p><p>Atomic operations were introduced when multiple processes append to the same file and when multiple processes create the same file. We also looked at the data structures used by the kernel to share information about open files. We’ll return to these data structures later in the text. </p><p>We also described the ioctl and fcntl functions. We return to both of these functions later in the book. In Chapter 14, we’ll use fcntl for record locking. In Chapter 18 and Chapter 19, we’ll use ioctl when we deal with terminal devices. </p><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><ol><li><p>When reading or writing a disk file, are the functions described in this chapter really unbuffered? Explain. </p></li><li><p>Write your own dup2 function that behaves the same way as the dup2 function described in Section 3.12, without calling the fcntl function. Be sure to handle errors correctly. </p></li><li><p>Assume that a process executes the following three function calls: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd1 = open(path, oflags);</span><br><span class="line">fd2 = dup(fd1);</span><br><span class="line">fd3 = open(path, oflags);</span><br></pre></td></tr></table></figure><p>Draw the resulting picture, similar to Figure 3.9. Which descriptors are affected by an fcntl on fd1 with a command of F_SETFD? Which descriptors are affected by an fcntl on fd1 with a command of F_SETFL? </p></li><li><p>The following sequence of code has been observed in various programs: </p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dup2(fd, <span class="number">0</span>);</span><br><span class="line">dup2(fd, <span class="number">1</span>);</span><br><span class="line">dup2(fd, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (fd &gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><p>close(fd); </p><p>To see why the if test is needed, assume that fd is 1 and draw a picture of what happens to the three descriptor entries and the corresponding file table entry with each call to dup2. Then assume that fd is 3 and draw the same picture. </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《APUE-3rd》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unix </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《APUE-3rd》 读书笔记 -- Unix System Overview</title>
      <link href="/blog/2018/05/22/APUE-3rd-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--Unix%20System%20Overview/"/>
      <url>/blog/2018/05/22/APUE-3rd-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--Unix%20System%20Overview/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Unix系统中非常重要的概念：</p><ul><li>内核</li><li>系统调用</li><li>库函数</li><li>shell</li><li>文件、目录、路径、工作路径、权限管理</li><li>文件描述符</li><li>进程、线程</li><li>错误处理</li><li>信号</li></ul><a id="more"></a><h2 id="1-1-Introduction"><a href="#1-1-Introduction" class="headerlink" title="1.1    Introduction"></a>1.1    Introduction</h2><p>All operating systems provide services for programs they run. Typical services include executing a new program, opening a file, reading a file, allocating a region of memory, getting the current time of day, and so on. The focus of this text is to describe the services provided by various versions of the UNIX operating system. 所有的操作系统都提供一些服务让程序能够在其上运行，典型的服务包括：执行一个新程序，打开一个文件，读取一个文件，分配一块内存，获取当前时间，等等。 这本书所关注的重点就是众多种类的unix操作系统能提供服务。</p><p>Describing the UNIX System in a strictly linear fashion, without any forward references to terms that haven’t been described yet, is nearly impossible (and would probably be boring). 这里道出了一个众所周知的难题，想要线性的给读者讲授一个新课程，在讲授一个知识点时却又不引进任何其他的未知概念，这几乎是不可能的。</p><blockquote><p>但我认为能不能做到，不用去管，做教育的就是要尽可能的降低学习者的难度，将新知识点尽可能的用学习者已有的知识结构描述清楚。所以我们可以看到我们的课程都是有选修课的。</p></blockquote><h2 id="1-2-Unix-Architecture"><a href="#1-2-Unix-Architecture" class="headerlink" title="1.2    Unix Architecture"></a>1.2    Unix Architecture</h2><p><img src="https://i.loli.net/2018/05/22/5b03742b0a818.png" width="50%"></p><ul><li>内核（kernel）：In a strict sense, an operating system can be defined as the software that <strong>controls the hardware resources of the computer</strong> and <strong>provides an environment under which programs can run</strong>. Generally, we call this software the <code>kernel</code>, since it is <strong>relatively small and resides at the core of the environment</strong>. 内核控制硬件资源，并给其上的程序提供运行环境，内核相对（相对是指相对于上面这张图，整个软件环境：包括内核、系统调用、公用函数库、shell(命令解释器)、应用程序）来说比较小，并处于整个环境的中心。</li><li>系统调用（system calls）：<strong>The interface to the kernel</strong> is a layer of software called the system calls . 系统调用是内核对外的接口。</li><li>Libraries of common functions are built on top of the system call interface, but applications are free to use both. The shell is a special application that provides an interface for running other applications. 公共库是建立在系统调用之上的，但应用程序既可以使用公共库也可以使用系统调用。shell是一种特殊的应用程序，给执行命令(运行其他程序)提供接口。</li></ul><p>In a broad sense, an operating system consists of the kernel and all the other software that makes a computer useful and gives the computer its personality. This other software includes system utilities, applications, shells, libraries of common functions, and so on.</p><p>For example, Linux is the kernel used by the GNU operating system. Some people refer to this combination as the GNU/Linux operating system, but it is more commonly referred to as simply Linux. Although this usage may not be correct in a strict sense, it is understandable, given the dual meaning of the phrase operating system. (It also has the advantage of being more succinct.)</p><h2 id="1-3-Logging-In"><a href="#1-3-Logging-In" class="headerlink" title="1.3    Logging In"></a>1.3    Logging In</h2><h3 id="Login-Name"><a href="#Login-Name" class="headerlink" title="Login Name"></a>Login Name</h3><p>When we log in to a UNIX system, we enter our login name, followed by our password. The system then looks up our login name in its password file, usually the file /etc/passwd. If we look at our entry in the password file, we see that it’s composed of seven colon-separated fields: the login name, encrypted password, numeric user ID (205), numeric group ID (105), a comment field, home directory (/home/sar), and shell program (/bin/ksh).<br><strong>口令文件（password file）</strong> ：当我们使用用户名和密码登陆unix的时候，系统会在<code>/etc/passwd</code>文件(password file，又叫：口令文件)中查找我们的用户名，口令文件中每个条目占一行，格式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录名:加密过的密码:user ID:group ID:注解:home目录:shell</span><br></pre></td></tr></table></figure><p>All contemporary systems have moved the encrypted password to a different file. In Chapter 6, we’ll look at these files and some functions to access them.</p><blockquote><p>不过加密过的密码现在也不显示在这个文件里了，而是用一个<code>*</code>号或者<code>x</code>号之类的取代，home目录又称为起始目录，新开一个shell，<code>pwd</code>一下，就是home目录。</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sar:x:205:105:Stephen Rago:/home/sar:/bin/ksh</span><br></pre></td></tr></table></figure><p>登录名是sar，加密过的密码是<code>x</code>（不显示在这里），user ID是205，group ID是105，注解是Stephen Rago，home目录是<code>/home/sar</code>，使用的shell是<code>/bin/ksh</code></p><h3 id="Shells"><a href="#Shells" class="headerlink" title="Shells"></a>Shells</h3><p>A shell is a command-line interpreter that reads user input and executes commands. The user input to a shell is normally from the terminal (an interactive shell) or sometimes from a file (called a shell script). shell是一种命令解释器，可以读取用户的输入，并执行命令，用户可以交互式的输入命令，也可以把命令预先全部写在一个文本文件（shell脚本）中让shell执行。</p><p>常见的shell有：</p><p><img src="https://i.loli.net/2018/05/23/5b04b995bf5e1.png" width="70%"></p><p>The system knows which shell to execute for us based on the final field in our entry in the password file. 系统是通过口令文件的最后一个字段知道我们登陆时使用哪个shell。</p><p><code>bash</code>的全称是<code>Bourne-again shell</code></p><p>The Bourne-again shell is the GNU shell provided with all Linux systems. It was designed to be POSIX conformant, while still remaining compatible with the Bourne shell. It supports features from both the C shell and the Korn shell.</p><h2 id="1-4-Files-and-Directories"><a href="#1-4-Files-and-Directories" class="headerlink" title="1.4     Files and Directories"></a>1.4     Files and Directories</h2><h3 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h3><ul><li><strong>根目录（root）</strong>：The UNIX file system is a hierarchical arrangement of directories and files. Everything starts in the directory called root, whose name is the single character /. unix文件系统是目录和文件的层级安排，所有东西都从一个叫root的目录开始，root的名字是一个单字符：<code>/</code>。</li><li><strong>目录（directory）</strong>：A directory is a file that contains directory entries. Logically, we can think of each directory entry as containing a filename along with a structure of information describing the attributes of the file. The attributes of a file are such things as the type of file (regular file, directory), the size of the file, the owner of the file, permissions for the file (whether other users may access this file), and when the file was last modified. 目录是一个包含目录条目的文件。逻辑上，我们可以认为每一个目录条目包含一个文件名和一个描述文件属性的结构信息。文件属性包括：文件类型（普通文件还是目录），文件大小，文件所属者，文件权限（其他用户是否能访问），文件最后被修改的时间。</li></ul><blockquote><p>The stat and fstat functions return a structure of information containing all the attributes of a file. <code>stat</code>和<code>fstat</code>函数可以返回一个结构信息，包含文件的所有属性。</p><p>We make a distinction between the logical view of a directory entry and the way it is actually stored on disk. Most implementations of UNIX file systems don’t store attributes in the directory entries themselves, because of the difficulty of keeping them in synch when a file has multiple hard links. 也就是说上面目录条目只是逻辑上的，实际上在硬盘存储上并不是直接将目录条目中的那些属性存储在目录文件中的，因为如果文件有硬链接的话，很难让这些属性信息保持同步。</p></blockquote><h3 id="Filename"><a href="#Filename" class="headerlink" title="Filename"></a>Filename</h3><p><strong>文件名</strong>：The names in a directory are called filenames. The only two characters that cannot appear in a filename are the slash character (/) and the null character. The slash separates the filenames that form a pathname (described next) and the null character terminates a pathname. Nevertheless, it’s good practice to restrict the characters in a filename to a subset of the normal printing characters. (If we use some of the shell’s special characters in the filename, we have to use the shell’s quoting mechanism to reference the filename, and this can get complicated.) Indeed, for portability, POSIX.1 recommends restricting filenames to consist of the following characters: letters (a-z, A-Z), numbers (0-9), period (.), dash (-), and underscore (_).<br>一个目录中的诸多名字（包括文件和目录）称为文件名，只有两个字符不能出现在文件名中：<code>斜杠/(slash)</code>和<code>空字符(null character)</code>，斜杠用来分割<code>路径名(pathname)</code>中的文件名，空字符用来结束一个路径名（实际上编程语言中字符串就是由空字符来结束的）。然而，我们命名文件的时候最好不要使用一些乱七八糟的字符，如果我们使用了shell的特殊字符，我们就必须使用shell的引用机制去引用文件名。实际上，为了可移植性，POSIX.1标准推荐严格使用以下字符来命名文件：字母(a-z, A-Z)，数字(0-9)，点(.)，中杠(-)，下划线(_)。</p><p>Two filenames are automatically created whenever a new directory is created: . (called dot) and .. (called dot-dot). Dot refers to the current directory, and dot-dot refers to the parent directory. In the root directory, dot-dot is the same as dot. 有两个文件名在目录被创建的时候自动创建：<code>.</code>和<code>..</code>，<code>.</code>指向当前目录，<code>..</code>指向父目录，在根目录中，<code>..</code>和<code>.</code>一样（都指向当前目录）。</p><blockquote><p>The Research UNIX System and some older UNIX System V file systems restricted a filename to 14 characters. BSD versions extended this limit to 255 characters. Today, almost all commercial UNIX file systems support at least 255-character filenames. 现如今的unix文件系统都支持至少255字符的文件名。</p></blockquote><h3 id="Pathname"><a href="#Pathname" class="headerlink" title="Pathname"></a>Pathname</h3><p>A sequence of one or more filenames, separated by slashes and optionally starting with a slash, forms a pathname. A pathname that begins with a slash is called an absolute pathname; otherwise, it’s called a relative pathname. Relative pathnames refer to files relative to the current directory. 一系列的由斜杠分割而开的文件名组成一个路径名，一个路径名可以由一个斜杠开始，这叫做：<code>绝对路径</code>，反之就是相对路径，相对路径是相对于当前路径的。</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Listing the names of all the files in a directory is not difficult. There is a bare-bones implementation of the ls(1) command:</p><blockquote><p>Figure 1.3 List all the files in a directory </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   DIR *dp;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">dirp</span>;</span></span><br><span class="line">   <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">       err_quit(<span class="string">"usage: ls directory_name"</span>);</span><br><span class="line">   <span class="keyword">if</span> ((dp = opendir(argv[<span class="number">1</span>])) == <span class="literal">NULL</span>)</span><br><span class="line">       err_sys(<span class="string">"can’t open %s"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">   <span class="keyword">while</span> ((dirp = readdir(dp)) != <span class="literal">NULL</span>)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dirp-&gt;d_name);</span><br><span class="line">    closedir(dp);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The notation ls(1) is the normal way to reference a particular entry in the UNIX system manuals. It refers to the entry for ls in Section 1. The sections are normally numbered 1 through 8, and all the entries within each section are arranged alphabetically. Throughout this text, we assume that you have a copy of the manuals for your UNIX system.  熟悉unix的人应该都知道，unix有个man命令，可以查看其它命令的说明书，当然也可以<code>man man</code>查看自己的说明书。 man命令有8个section，每个section里的条目按照字幕顺序排列。</p><blockquote><p>Historically, UNIX systems lumped all eight sections together into what was called the UNIX Programmer’s Manual. As the page count increased, the trend changed to distributing the sections among separate manuals: <strong>one for users, one for programmers, and one for system administrators</strong>, for example. Some UNIX systems further divide the manual pages within a given section, using an uppercase letter. For example, all the standard input/output (I/O) functions in AT&amp;T [1990e] are indicated as being in Section 3S, as in fopen(3S). Other systems have replaced the numeric sections with alphabetic ones, such as C for commands. </p></blockquote><p>Today, most manuals are distributed in electronic form. If your manuals are online, the way to see the manual pages for the ls command would be something like </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 1 ls</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man -s1 ls</span><br></pre></td></tr></table></figure><p>Figure 1.3 is a program that just prints the name of every file in a directory, and nothing else. If the source file is named myls.c, we compile it into the default a.out executable file by running </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc myls.c</span><br></pre></td></tr></table></figure><blockquote><p>Historically, cc(1) is the C compiler. On systems with the GNU C compilation system, the C compiler is gcc(1). Here, cc is usually linked to gcc. </p></blockquote><p>但在实际的操作过程中，遇到了如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols for architecture x86_64:</span><br><span class="line">  &quot;_err_quit&quot;, referenced from:</span><br><span class="line">      _main in fig1-457251.o</span><br><span class="line">  &quot;_err_sys&quot;, referenced from:</span><br><span class="line">      _main in fig1-457251.o</span><br><span class="line">ld: symbol(s) not found for architecture x86_64</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure><p>这是个链接错误，具体的解决办法请看这篇博客：<a href="https://my.oschina.net/alextuan/blog/530425" target="_blank" rel="noopener">OS X下UNIX环境高级编程（第三版）学习日志－第一章ChapterI，编译apue包与第一个例程</a></p><p>实际上要先单独编译<code>myls.c</code>，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c myls.c</span><br></pre></td></tr></table></figure><p>得到<code>myls.o</code>，然后与依赖的其他目标文件组合成一个可执行文件，我们可以把本书要用到的所有依赖组合成一个静态库，在apue源代码的根目录下面<code>make</code>一下，编译完成后就可以在lib目录下找到静态库：<code>libapue.a</code>了。使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o myls myls.o -Llib -lapue</span><br></pre></td></tr></table></figure><blockquote><p>如果编译失败，使用<code>make clean</code>可以清空编译结果，然后就可以使用<code>make</code>重新编译了。不要将程序命名为<code>.cpp</code>文件，这样的话即便你使用gcc编译<code>myls.cpp</code>，也会出错，更不要使用g++去编译<code>myls.cpp</code>，因为库是用gcc编译的。</p></blockquote><ul><li>When the program is done, it calls the function exit with an argument of 0. The function exit terminates a program. By convention, an argument of 0 means OK, and an argument between 1 and 255 means that an error occurred.  <strong>0代表OK，1到255代表各种类型的错误</strong>。</li></ul><h3 id="Working-Directory"><a href="#Working-Directory" class="headerlink" title="Working Directory"></a>Working Directory</h3><p><strong>工作目录（working directory）</strong>：Every process has a working directory, sometimes called the <strong>current working directory</strong>. This is the directory from which all relative pathnames are interpreted. A process can change its working directory with the <code>chdir</code> function.  每个进程都有一个工作目录，又叫做：当前工作目录，相对路径就是相对于当前工作目录的来解释的，可以调用<code>chdir</code>函数来改变工作目录。</p><p>For example, the relative pathname doc/memo/joe refers to the file or directory joe, in the directory memo, in the directory doc, which must be a directory within the working directory. From looking just at this pathname, we know that both doc and memo have to be directories, but we can’t tell whether joe is a file or a directory. The pathname /usr/lib/lint is an absolute pathname that refers to the file or directory lint in the directory lib, in the directory usr, which is in the root directory.  这里有趣的一点是，我们无法判断joe是文件还是目录。</p><h3 id="Home-Directory"><a href="#Home-Directory" class="headerlink" title="Home Directory"></a>Home Directory</h3><p>When we log in, the working directory is set to our <strong>home directory</strong>. Our home directory is obtained from our entry in the <strong>password file</strong> (Section 1.3).  当我们登陆的时候，工作目录会设定为home目录，而我们的home目录设置在口令文件中。</p><h2 id="1-5-Input-and-Output"><a href="#1-5-Input-and-Output" class="headerlink" title="1.5    Input and Output"></a>1.5    Input and Output</h2><h3 id="File-Descriptors"><a href="#File-Descriptors" class="headerlink" title="File Descriptors"></a>File Descriptors</h3><p><strong>文件描述符（file descriptor）</strong>：File descriptors are normally small non-negative integers that the kernel uses to identify the files accessed by a process. Whenever it opens an existing file or creates a new file, the kernel returns a file descriptor that we use when we want to read or write the file.  文件描述符是一个小的非负整数，内核用它来标识正在被进程访问的文件。打开或者创建文件的时候内核会返回一个文件描述符，我们可以使用这个文件描述符来对文件进行读写。</p><h3 id="Standard-Input-Standard-Output-and-Standard-Error"><a href="#Standard-Input-Standard-Output-and-Standard-Error" class="headerlink" title="Standard Input, Standard Output, and Standard Error"></a>Standard Input, Standard Output, and Standard Error</h3><p><strong>标准输入，标准输出，标准错误</strong>：By convention, all shells open three descriptors whenever a new program is run: standard input, standard output, and standard error. If nothing special is done, as in the simple command </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>then <strong>all three are connected to the terminal</strong>. Most shells provide a way to redirect any or all of these three descriptors to any file. For example, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &gt; file.list</span><br></pre></td></tr></table></figure><p>executes the ls command with its standard output redirected to the file named </p><p>file.list. </p><p><strong>按照惯例，当新程序运行的时候，shell会打开三个文件描述符：标准输入，标准输出，标准错误。如果没有进行指明，那么三个文件描述符都会连接到终端。</strong></p><h3 id="Unbuffered-I-O"><a href="#Unbuffered-I-O" class="headerlink" title="Unbuffered I/O"></a>Unbuffered I/O</h3><p>Unbuffered I/O is provided by the functions <code>open</code>, <code>read</code>,<code>write</code>, <code>lseek</code>, and <code>close</code>. These functions all work with file descriptors. <strong>unbuffered I/O</strong>意思是系统不提供buffer管理，要你自己申请buffer，并传递给系统函数。</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>If we’re willing to read from the standard input and write to the standard output, then the program in Figure 1.4 copies any regular file on a UNIX system. </p><blockquote><p>Figure 1.4 Copy standard input to standard output </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFSIZE 4096</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFSIZE];</span><br><span class="line">    <span class="keyword">while</span> ((n = read(STDIN_FILENO, buf, BUFFSIZE)) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (write(STDOUT_FILENO, buf, n) != n)</span><br><span class="line">            err_sys(<span class="string">"write error"</span>);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">        err_sys(<span class="string">"read error"</span>);</span><br><span class="line">true<span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是对程序的解释：</p><p>The <code>&lt;unistd.h&gt;</code> header, included by <code>apue.h</code>, and the two constants <code>STDIN_FILENO</code> and <code>STDOUT_FILENO</code> are part of the POSIX standard (about which we’ll have a lot more to say in the next chapter). This header contains function prototypes for many of the UNIX system services, such as the <code>read</code> and <code>write</code> functions that we call. </p><p>The constants STDIN_FILENO and STDOUT_FILENO are defined in <unistd.h> and specify the file descriptors for standard input and standard output. <strong>These values are 0 and 1, respectively, as required by POSIX.1</strong>, but we’ll use the names for readability. POSIX.1标准：<strong>标准输入是0，标准输出是1，标准错误是2</strong>。</unistd.h></p><p>The <code>read</code> function returns the number of bytes that are read, and this value is used as the number of bytes to <code>write</code>. When the end of the input file is encountered, read returns 0 and the program stops. If a read error occurs, read returns −1. Most of the system functions return −1 when an error occurs.  <code>read</code>函数返回的是读入字节的个数，把这个返回值传给<code>write</code>函数，就可以读多少写多少了，当遇到输入文件结束时，read函数返回0，当遇到错误时，read函数返回-1。<strong>许多系统函数返回-1，当它们遇到错误时</strong>。</p><p>If we compile the program into the standard name (a.out) and execute it as </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out &gt; data</span><br></pre></td></tr></table></figure><p>standard input is the terminal, standard output is redirected to the file data, and standard error is also the terminal. <strong>If this output file doesn’t exist, the shell creates it by default</strong>. The program copies lines that we type to the standard output <strong>until we type the end-of-file character (usually Control-D)</strong>. </p><p>If we run </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out &lt; infile &gt; outfile</span><br></pre></td></tr></table></figure><p>then the file named infile will be copied to the file named outfile. </p><p>如果文件不存在，shell默认给我们创建一个。标准输入和标准错误都是终端，我们可以一直输入，直到输入一个文件结束符，也就是<code>ctrl+d</code>。</p><h3 id="Standard-I-O"><a href="#Standard-I-O" class="headerlink" title="Standard I/O"></a>Standard I/O</h3><p>The standard I/O functions provide a buffered interface to the unbuffered I/O functions. <strong>Using standard I/O relieves us from having to choose optimal buffer sizes</strong>, such as the BUFFSIZE constant in Figure 1.4. The standard I/O functions also simplify dealing with lines of input (a common occurrence in UNIX applications). <strong>The <code>fgets</code> function, for example, reads an entire line. The read function, in contrast, reads a specified number of bytes</strong>. As we shall see in Section 5.4, the standard I/O library provides functions that let us control the style of buffering used by the library. 标准I/O函数给unbuffered I/O 函数提供了缓冲接口，使用标准I/O函数可以让我们从优化buffer大小中解脱出来，举个例子，<code>fgets</code>函数直接读取一整行，而<code>read</code>函数读取固定个数的字节。</p><p>The most common standard I/O function is <code>printf</code>. In programs that call printf, we’ll always include <stdio.h>—normally by including apue.h—as this header contains the function prototypes for all the standard I/O functions. </stdio.h></p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>The program in Figure 1.5, which we’ll examine in more detail in Section 5.8, is like the previous program that called read and write. This program copies standard input to standard output and can copy any regular file. </p><blockquote><p>Figure 1.5 Copy standard input to standard output, using standard I/O </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = getc(<span class="built_in">stdin</span>)) != EOF)</span><br><span class="line">    <span class="keyword">if</span> (putc(c, <span class="built_in">stdout</span>) == EOF)</span><br><span class="line">    err_sys(<span class="string">"output error"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ferror(<span class="built_in">stdin</span>))</span><br><span class="line">    err_sys(<span class="string">"input error"</span>);</span><br><span class="line">true<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The function getc reads one character at a time, and this character is written by putc</strong>. After the last byte of input has been read, getc returns the constant EOF (defined in <stdio.h>). The standard I/O constants stdin and stdout are also defined in the <stdio.h> header and refer to the standard input and standard output. </stdio.h></stdio.h></p><h2 id="1-6-Programs-and-Processes"><a href="#1-6-Programs-and-Processes" class="headerlink" title="1.6    Programs and Processes"></a>1.6    Programs and Processes</h2><h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><p>A program is an executable file residing on disk in a directory. A program is read into memory and is executed by the kernel as a result of one of the <strong>seven exec functions</strong>. </p><h3 id="Processes-and-Process-ID"><a href="#Processes-and-Process-ID" class="headerlink" title="Processes and Process ID"></a>Processes and Process ID</h3><p>An executing instance of a program is called a <strong>process</strong>, a term used on almost every page of this text. Some operating systems use the term <strong>task</strong> to refer to a program that is being executed.  程序运行的一个实例叫做：进程，也有些操作系统使用：task这个术语来描述被执行的程序。</p><p>The UNIX System guarantees that every process has a unique numeric identifier called the process ID. The process ID is always a non-negative integer. unix系统保证每个进程都有独一无二的进程ID，这个进程ID是一个非负整数。</p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p>The program in Figure 1.6 prints its process ID. </p><blockquote><p>Figure 1.6 Print the process ID  </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world from process ID %ld\n"</span>, (<span class="keyword">long</span>)getpid());</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  apue.3e ./fig1.6</span><br><span class="line">hello world from process ID 8080</span><br><span class="line">➜  apue.3e ./fig1.6</span><br><span class="line">hello world from process ID 8086</span><br></pre></td></tr></table></figure><h3 id="Process-Control"><a href="#Process-Control" class="headerlink" title="Process Control"></a>Process Control</h3><p>There are three primary functions for process control: <code>fork</code>, <code>exec</code>, and <code>waitpid</code>. (The exec function has seven variants, but we often refer to them collectively as simply the exec function.)  有三个进程控制的基本函数：<code>fork</code>，<code>exec</code>和<code>waitpid</code>，虽然exec函数有7种变体，但我们往往简单的用一个exec来表示它们。</p><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h3><p>The process control features of the UNIX System are demonstrated using a simple program (Figure 1.7) that reads commands from standard input and executes the commands. This is a bare-bones implementation of a shell-like program. </p><blockquote><p>Figure 1.7 Read commands from standard input and execute them </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>    buf[MAXLINE];   <span class="comment">/* from apue.h */</span></span><br><span class="line">    <span class="keyword">pid_t</span>   pid;</span><br><span class="line">    <span class="keyword">int</span>     status;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%% "</span>);  <span class="comment">/* print prompt (printf requires %% to print %) */</span></span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, MAXLINE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">            buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] = <span class="number">0</span>; <span class="comment">/* replace newline with null */</span></span><br><span class="line">        <span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            err_sys(<span class="string">"fork error"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;      <span class="comment">/* child */</span></span><br><span class="line">            execlp(buf, buf, (<span class="keyword">char</span> *)<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// or</span></span><br><span class="line">            <span class="comment">// execlp(buf, buf, (char *)NULL);</span></span><br><span class="line">            err_ret(<span class="string">"couldn’t execute: %s"</span>, buf);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">127</span>);</span><br><span class="line">truetrue&#125;</span><br><span class="line">        <span class="comment">/* parent */</span></span><br><span class="line">        <span class="keyword">if</span> ((pid = waitpid(pid, &amp;status, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">            err_sys(<span class="string">"waitpid error"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%% "</span>);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are several features to consider in this 30-line program. </p><ul><li>We use the standard I/O function fgets to read one line at a time from the standard input. When we type the end-of-file character (which is often Control-D) as the first character of a line, fgets returns a null pointer, the loop stops, and the process terminates. In Chapter 18, we describe all the special terminal characters—end of file, backspace one character, erase entire line, and so on—and how to change them.  我们使用了标准I/O函数<code>fgets</code>来一次读取标准输入的一行。当我们直接输入一个EOF时，fgets返回一个空指针，循环停止，进程终止。在第18章，我们将讲述特殊终止符，比如：end of file，backspace one character, erase entire line, 等等，以及如何改变它们。</li><li>Because each line returned by fgets is terminated with a newline character, followed by a null byte, we use the standard C function strlen to calculate the length of the string, and then replace the newline with a null byte. We do this because the execlp function wants a null-terminated argument, not a newline-terminated argument.  因为fgets返回的每一行都被一个换行符终止，换行符之后是一个空字符，我们使用标准C函数<code>strlen</code>来计算string的长度，然后将换行符替换成空字符（这样末尾就两个空字符了）。我们这样做是因为<code>execlp</code>函数希望有一个空字符来作为结尾参数，而不是一个换行符。</li><li>We call fork to create a new process, which is a copy of the caller. We say that the caller is the parent and that the newly created process is the child. Then fork returns the non-negative process ID of the new child process to the parent, and returns 0 to the child. Because fork creates a new process, we say that it is called once—by the parent—but returns twice—in the parent and in the child.  我们调用<code>fork</code>创建一个新进程，这个新进程是调用进程的一个复制。我们说，调用者是父进程，新创建出来的进程是子进程。<strong>然后fork返回子进程的非负进程ID给父进程，并返回0给子进程</strong>。因为fork创建了一个新进程，<strong>我们说它调用了一次（被父进程），但是返回了两次</strong>，在父进程和子进程里面。</li><li>In the child, we call execlp to execute the command that was read from the standard input. This replaces the child process with the new program file. The combination of fork followed by exec is called spawning a new process on some operating systems. In the UNIX System, the two parts are separated into individual functions. We’ll say a lot more about these functions in Chapter 8.  在子进程中，我们调用<code>execlp</code>来执行从标注输入中读取来的命令。这就把子进程替换成了新执行的程序。fork后面跟个exec这种结合方式被叫做 <strong>spawning a new process</strong> 在某些操作系统中。在unix系统中，这两部分被分别放到了两个单独的函数中。我们将在第8章中讨论更多的这类函数。</li><li>Because the child calls execlp to execute the new program file, the parent wants to wait for the child to terminate. This is done by calling waitpid, specifying which process to wait for: the pid argument, which is the process ID of the child. The waitpid function also returns the termination status of the child—the status variable—but in this simple program, we don’t do anything with this value. We could examine it to determine how the child terminated.  因为子进程调用了<code>execlp</code>来执行新程序文件，父进程想要等子进程结束。通过调用<code>waitpid</code>可以完成这个任务，用<code>pid</code>（子进程的进程ID）参数来明确需要等待哪个进程。<code>waitpid</code>函数同样也返回子进程的终止状态（记录在status这个参数），但在这个简单的程序里，我们没有用到这个值。我们通过这个值得知子进程是如何结束的。</li><li>The most fundamental limitation of this program is that we can’t pass arguments to the command we execute. We can’t, for example, specify the name of a directory to list. We can execute ls only on the working directory. To allow arguments would require that we parse the input line, separating the arguments by some convention, probably spaces or tabs, and then pass each argument as a separate parameter to the execlp function. Nevertheless, this program is still a useful demonstration of the UNIX System’s process control functions.  这个程序最大的限制就是，我们不能传递参数给我们要执行的命令。比如，我们不能给定一个目录给list程序（展示目录下的所有目录和文件的程序）。我们只能在当前目录下执行ls。如果要允许传递参数，就需要我们分析输入行，按照惯例，比如空格或者制表符，把参数分割开来，然后把参数传给execlp函数。不管怎么说，这个程序已经很好的展示了unix系统是如何控制函数的。</li></ul><p>If we run this program, we get the following result. Note that our program has a different prompt—the percent sign—to distinguish it from the shell’s prompt. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  apue.3e ./fig1.7</span><br><span class="line">% pwd</span><br><span class="line">/Users/liuqinh2s/Downloads/apue.3e</span><br><span class="line">% who</span><br><span class="line">liuqinh2s console  May 21 12:09</span><br><span class="line">liuqinh2s ttys000  May 21 12:10</span><br><span class="line">% date</span><br><span class="line">2018年 5月24日 星期四 15时26分59秒 CST</span><br><span class="line">% %                                                                                                                                                                                                         ➜  apue.3e</span><br></pre></td></tr></table></figure><blockquote><p>The notation ˆD is used to indicate a control character. Control characters are special characters formed by holding down the control key—often labeled Control or Ctrl—on your keyboard and then pressing another key at the same time. <strong>Control-D, or ˆD, is the default end-of-file character</strong>. We’ll see many more control characters when we discuss terminal I/O in Chapter 18.  <code>^D</code>这种记法用于表示控制字符，控制字符是一类特殊的字符，由<code>ctrl</code>键加一个其他键组成，<code>Control-D</code>或者说<code>^D</code>是默认的文件终止符。我们将在第18章讨论输入输出终止符的时候看到更多的控制字符。</p></blockquote><h3 id="Threads-and-Thread-IDs"><a href="#Threads-and-Thread-IDs" class="headerlink" title="Threads and Thread IDs"></a>Threads and Thread IDs</h3><p>Usually, a process has only one thread of control—one set of machine instructions executing at a time. Some problems are easier to solve when more than one thread of control can operate on different parts of the problem. Additionally, multiple threads of control can exploit the parallelism possible on multiprocessor systems. </p><p>All threads within a process share the same address space, file descriptors, stacks, and process-related attributes. Each thread executes on its own stack, although any thread can access the stacks of other threads in the same process. Because they can access the same memory, the threads need to synchronize access to shared data among themselves to avoid inconsistencies.  属于同一个进程的多个线程共享同一块内存空间，文件描述符，栈，以及和进程相关的属性。每个线程都在自己的栈里面执行，但每个线程又能访问其他线程的栈（同属于一个进程的多个线程）。因为它们能访问同一块内存，所以为了避免不一致性，需要保护好临界资源。</p><p>Like processes, threads are identified by IDs. <strong>Thread IDs, however, are local to a process</strong>. A thread ID from one process has no meaning in another process. We use thread IDs to refer to specific threads as we manipulate the threads within a process.  就像进程一样，线程也用ID标识。<strong>然而线程ID是局部的，只在某个进程内有效，出了这个进程，对其他进程来说这个线程ID就没有任何意义了。</strong></p><blockquote><p>threads were added to the UNIX System long after the process model was established </p></blockquote><h2 id="1-7-Error-Handling"><a href="#1-7-Error-Handling" class="headerlink" title="1.7    Error Handling"></a>1.7    Error Handling</h2><p>When an error occurs in one of the UNIX System functions, a negative value is often returned, and the integer <strong>errno</strong> is usually set to a value that tells why. For example, the open function returns either a non-negative file descriptor if all is OK or −1 if an error occurs. An error from open has about 15 possible errno values, such as file doesn’t exist, permission problem, and so on. Some functions use a convention other than returning a negative value. For example, most functions that return a pointer to an object return a null pointer to indicate an error.  当unix系统函数出错时，会返回一个负数，整形变量<strong>errno</strong>会设置为一个值，这个值告诉我们为什么出错。例如，open函数返回一个非负的文件描述符，如果成功的话，如果出现错误则返回一个-1。open函数返回的错误有15个可能的errno值，比如：文件不存在，权限问题，等等。有些函数使用另一个传统而非返回一个负数。例如，很多函数返回一个对象指针，或者一个空指针如果出现错误。</p><p>The file <errno.h> defines the symbol errno and constants for each value that errno can assume. Each of these constants begins with the character E. Also, the first page of Section 2 of the UNIX system manuals, named intro(2), usually lists all these error constants. For example, if errno is equal to the constant EACCES, this indicates a permission problem, such as insufficient permission to open the requested file.  <code>&lt;errno.h&gt;</code>文件定义了变量errno和一系列常量（errno可能的值）。每个常量都以字符<code>E</code>开头。unix系统手册<code>intro(2)</code>展示了这些常量。例如，如果errno等于常量EACCES，就表示是权限问题，没有足够的权限去打开这个文件。</errno.h></p><blockquote><p>On Linux, the error constants are listed in the errno(3) manual page. </p></blockquote><p>POSIX and ISO C define errno as a symbol expanding into a modifiable lvalue of type integer. This can be either an integer that contains the error number or a function that returns a pointer to the error number. The historical definition is </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> errno;</span><br></pre></td></tr></table></figure><p>But in an environment that supports threads, the process address space is shared among multiple threads, and each thread needs its own local copy of errno to prevent one thread from interfering with another. Linux, for example, supports multithreaded access to errno by defining it as </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> *__errno_location(<span class="keyword">void</span>); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> errno (*__errno_location())</span></span><br></pre></td></tr></table></figure><p>POSIX和ISO C把errno定义为一个可以修改的左值。可以定义为一个整形值，也可以定义为一个指针，指针指向错误码（String类型）。如果是多线程环境下，每个线程都有自己的一个errno拷贝。通过宏定义把errno给替换成函数：<code>int *__errno_location(void);</code>了。</p><p>There are two rules to be aware of with respect to errno. First, its value is never cleared by a routine if an error does not occur. Therefore, we should examine its value only when the return value from a function indicates that an error occurred. Second, the value of errno is never set to 0 by any of the functions, and none of the constants defined in <errno.h> has a value of 0.  第一，如果没有出错，errno的值不会被重置，因此，我们只有在函数返回出错的时候才检查errno；第二，errno不会等于0。</errno.h></p><p>Two functions are defined by the C standard to help with printing error messages. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strerror</span><span class="params">(<span class="keyword">int</span> errnum)</span></span>;<span class="comment">//Returns: pointer to message string</span></span><br></pre></td></tr></table></figure><p>This function maps errnum, which is typically the errno value, into an error message string and returns a pointer to the string. </p><p>The perror function produces an error message on the standard error, based on the current value of errno, and returns. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perror</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span>;</span><br></pre></td></tr></table></figure><p>It outputs the string pointed to by msg, followed by a colon and a space, followed by the error message corresponding to the value of errno, followed by a newline. </p><h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h3><p>Figure 1.8 shows the use of these two error functions. </p><blockquote><p>Figure 1.8 Demonstrate strerror and perror </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"EACCES: %s\n"</span>, strerror(EACCES));</span><br><span class="line">    errno = ENOENT;</span><br><span class="line">    perror(argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  apue.3e ./fig1.8</span><br><span class="line">EACCES: Permission denied</span><br><span class="line">./fig1.8: No such file or directory</span><br><span class="line">➜  apue.3e</span><br></pre></td></tr></table></figure><blockquote><p>argv[0] 表示输入的第一个参数，也就是命令名</p></blockquote><h3 id="Error-Recovery"><a href="#Error-Recovery" class="headerlink" title="Error Recovery"></a>Error Recovery</h3><p>The errors defined in <errno.h> can be divided into two categories: fatal and nonfatal. A fatal error has no recovery action. The best we can do is print an error message on the user’s screen or to a log file, and then exit. Nonfatal errors, on the other hand, can sometimes be dealt with more robustly. Most nonfatal errors are temporary, such as a resource shortage, and might not occur when there is less activity on the system.  定义在<code>&lt;errno.h&gt;</code>中的错误可以分为两类：fatal和nonfatal，致命和非致命。致命错误没有恢复动作，我们最多能做的就是把错误信息在用户显示屏上打印出来，或者写到log文件里，然后退出。非致命错误，可以更妥善的处理，许多非致命错误都是暂时的，比如：资源短缺，当系统活动较少时这类错误可能不会发生。</errno.h></p><p>Resource-related nonfatal errors include <strong>EAGAIN, ENFILE, ENOBUFS, ENOLCK, ENOSPC, EWOULDBLOCK</strong>, and sometimes <strong>ENOMEM</strong>. <strong>EBUSY</strong> can be treated as nonfatal when it indicates that a shared resource is in use. Sometimes, <strong>EINTR</strong> can be treated as a nonfatal error when it interrupts a slow system call (more on this in Section 10.5).  </p><p>The typical recovery action for a resource-related nonfatal error is to delay and retry later. This technique can be applied in other circumstances. For example, if an error indicates that a network connection is no longer functioning, it might be possible for the application to delay a short time and then reestablish the connection. Some applications use an exponential backoff algorithm, waiting a longer period of time in each subsequent iteration.  <strong>典型的资源相关性非致命错误的处理办法是先等一下，之后再重试。</strong></p><p><strong>Ultimately, it is up to the application developer to determine the cases where an application can recover from an error. If a reasonable recovery strategy can be used, we can improve the robustness of our application by avoiding an abnormal exit. </strong></p><h2 id="1-8-User-Identification"><a href="#1-8-User-Identification" class="headerlink" title="1.8    User Identification"></a>1.8    User Identification</h2><h3 id="User-ID"><a href="#User-ID" class="headerlink" title="User ID"></a>User ID</h3><p>The user ID from our entry in the password file is a numeric value that identifies us to the system. This user ID is assigned by the system administrator when our login name is assigned, and we cannot change it. The user ID is normally assigned to be unique for every user. We’ll see how the kernel uses the user ID to check whether we have the appropriate permissions to perform certain operations.  用户ID来自口令文件中对应的条目，它是以数字的形式帮助系统对我们进行标识。用户ID是系统管理员给我们分配的（当分配登录名时，同时也必须分配用户ID），我们自己无法改。每个人的用户ID应该是唯一的，内核使用用户ID来检查我们是否有合适的权限来进行一个操作。</p><p>We call the user whose user ID is 0 either root or the superuser. The entry in the password file normally has a login name of root, and we refer to the special privileges of this user as superuser privileges. As we’ll see in Chapter 4, if a process has superuser privileges, most file permission checks are bypassed. Some operating system functions are restricted to the superuser. The superuser has free rein over the system.  我们把用户ID为0的用户称为：<strong>root</strong>或者<strong>superuser</strong>。口令文件中有一个条目的登录名是root，root用户拥有特殊权限。拥有superuser特权的进程可以自由的使用任意文件，而且有些操作系统函数是只对superuser开放的。superuser拥有对系统的绝对的权限（可以把系统弄残）。</p><blockquote><p>Client versions of Mac OS X ship with the superuser account disabled; server versions ship with the account already enabled. Instructions are available on Apple’s Web site describing how to enable it. See <a href="http://support.apple.com/kb/HT1528" target="_blank" rel="noopener">http://support.apple.com/kb/HT1528</a>. </p></blockquote><h3 id="Group-ID"><a href="#Group-ID" class="headerlink" title="Group ID"></a>Group ID</h3><p>Our entry in the password file also specifies our numeric group ID. This, too, is assigned by the system administrator when our login name is assigned. Typically, the password file contains multiple entries that specify the same group ID. Groups are normally used to collect users together into projects or departments. This allows the sharing of resources, such as files, among members of the same group. We’ll see in Section 4.5 that we can set the permissions on a file so that all members of a group can access the file, whereas others outside the group cannot.  Group ID的作用就是让相同组的人共享资源。</p><p>There is also a group file that maps group names into numeric group IDs. The group file is usually <code>/etc/group</code>. </p><p>The use of numeric user IDs and numeric group IDs for permissions is historical. With every file on disk, the file system stores both the user ID and the group ID of a file’s owner. Storing both of these values requires only four bytes, assuming that each is stored as a two-byte integer. If the full ASCII login name and group name were used instead, additional disk space would be required. In addition, comparing strings during permission checks is more expensive than comparing integers.  使用数字的用户ID和组ID是有历史原因的。对于每个存放在磁盘上的文件，文件系统都存储了该文件的拥有者的用户ID和组ID。存储这两个数字需要4字节（每个2字节），如果使用ASCII编码的登录名和组名，需要多用掉很多额外的磁盘空间。另外在检查权限是否合格时，整形数字比较要比字符串比较更快。</p><p>Users, however, work better with names than with numbers, so the password file maintains the mapping between login names and user IDs, and the group file provides the mapping between group names and group IDs. The ls -l command, for example, prints the login name of the owner of a file, using the password file to map the numeric user ID into the corresponding login name.  然而对于用户来说名字比数字更好记，所以password file和group file分别记录了登录名和用户ID的映射，组名和组ID的映射。使用<code>ls -l</code>命令，可以看到打印出了文件所属者和所属的组，其原理就是查找了password file和group file，把相应的数字ID换成名字。</p><blockquote><p>Early UNIX systems used 16-bit integers to represent user and group IDs. Contemporary UNIX systems use 32-bit integers. </p></blockquote><h3 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h3><p>The program in Figure 1.9 prints the user ID and the group ID. </p><blockquote><p>Figure 1.9 Print user ID and group ID  </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"uid = %d, gid = %d\n"</span>, getuid(), getgid());</span><br><span class="line">true<span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Supplementary-Group-IDs"><a href="#Supplementary-Group-IDs" class="headerlink" title="Supplementary Group IDs"></a>Supplementary Group IDs</h3><p><strong>附加组（supplementary group）</strong>：In addition to the group ID specified in the password file for a login name, most versions of the UNIX System allow a user to belong to other groups. This practice started with 4.2BSD, which allowed a user to belong to up to 16 additional groups. These supplementary group IDs are obtained at login time by reading the file /etc/group and finding the first 16 entries that list the user as a member. As we shall see in the next chapter, POSIX requires that a system support at least 8 supplementary groups per process, but most systems support at least 16.  许多unix系统允许用户属于多个组，最多16个。主组，也就是登陆时的默认组记录在<code>/etc/passwd</code>中。</p><p><code>/etc/group</code>格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_analyticsusers:*:250:_analyticsd,_networkd,_timed</span><br><span class="line">_analyticsd:*:263:_analyticsd</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组名:口令:组ID:组内用户列表</span><br></pre></td></tr></table></figure><h2 id="1-9-Signal"><a href="#1-9-Signal" class="headerlink" title="1.9    Signal"></a>1.9    Signal</h2><p><strong>Signals are a technique used to notify a process that some condition has occurred</strong>. For example, if a process divides by zero, the signal whose name is SIGFPE (floating-point exception) is sent to the process. The process has three choices for dealing with the signal.  信号是一种用来通知进程发生了某些事的技术。举个例子：当进程除以0时，就会有一个SIGFPE (floating-point exception)发送到这个进程。进程处理信号有三种选择：</p><ol><li>Ignore the signal. This option isn’t recommended for signals that denote a hardware exception, such as dividing by zero or referencing memory outside the address space of the process, as the results are undefined.  忽视信号。如果是硬件异常不推荐这个选择，例如：被0除，引用进程外的内存，因为这些结果都是不确定的。</li><li>Let the default action occur. For a divide-by-zero condition, the default is to terminate the process.  让默认动作出现，比如被0除的情况下，默认是终止该进程。</li><li>Provide a function that is called when the signal occurs (this is called ‘‘catching’’ the signal). By providing a function of our own, we’ll know when the signal occurs and we can handle it as we wish.  我们自己提供一个函数捕获信号，这样我们就能让程序以我们的意愿处理异常。</li></ol><p>Many conditions generate signals. Two terminal keys, called the <strong>interrupt key</strong>— often the <strong>DELETE</strong> key or <strong>Control-C</strong>—and the <strong>quit key</strong>—often <strong>Control-backslash</strong>—are used to interrupt the currently running process. Another way to generate a signal is by calling the <code>kill</code> function. <strong>We can call this function from a process to send a signal to another process. Naturally, there are limitations: we have to be the owner of the other process (or the superuser) to be able to send it a signal</strong>.    很多条件下可以生成信号，终端键有两种，interrupt key（delete键或者ctrl+c）和 quit key（ctrl+\）。另一个生成信号的方法是调用<code>kill</code>函数，我们可以在一个进程里调用kill函数来结束另一个进程，但我们需要有权限（如果我们是另一个进程的拥有者，或者是超级用户，就可以）。</p><h3 id="Example-7"><a href="#Example-7" class="headerlink" title="Example"></a>Example</h3><p>Recall the bare-bones shell example (Figure 1.7). If we invoke this program and press the interrupt key, the process terminates because the default action for this signal, named SIGINT, is to terminate the process. The process hasn’t told the kernel to do anything other than the default with this signal, so the process terminates.  如果直接执行Figure 1.7的代码，我们按下中断键，程序就会终止，因为这个SIGINT信号的默认动作就是终止进程。</p><p>To catch this signal, the program needs to call the signal function, specifying the name of the function to call when the SIGINT signal is generated. The function is named sig_int; when it’s called, it just prints a message and a new prompt. Adding 11 lines to the program in Figure 1.7 gives us the version in Figure 1.10. (The 11 new lines are indicated with a plus sign at the beginning of the line.)  为了捕获这个信号，程序需要调用一个信号函数。我们给它命名为：<code>sig_int</code>函数，在捕获到<strong>SIGINT</strong>信号之后，打印信息并打印一个新的提示符。下面的程序相比Figure 1.7多了11行，用<code>+</code>号标识了。</p><blockquote><p>Figure 1.10 Read commands from standard input and execute them </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/apue.h"</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line">+ <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_int</span><span class="params">(<span class="keyword">int</span>)</span></span>;<span class="comment">/* our signal-catching function */</span></span><br><span class="line">+</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">char</span>    buf[MAXLINE];   <span class="comment">/* from apue.h */</span></span><br><span class="line">      <span class="keyword">pid_t</span>   pid;</span><br><span class="line">      <span class="keyword">int</span>     status;</span><br><span class="line">  </span><br><span class="line">  +  <span class="keyword">if</span>(signal(SIGINT, sig_int) == SIG_ERR)</span><br><span class="line">          err_sys(<span class="string">"signal error"</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%% "</span>);  <span class="comment">/* print prompt (printf requires %% to print %) */</span></span><br><span class="line">      <span class="keyword">while</span> (fgets(buf, MAXLINE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">              buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] = <span class="number">0</span>; <span class="comment">/* replace newline with null */</span></span><br><span class="line">          <span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">              err_sys(<span class="string">"fork error"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;      <span class="comment">/* child */</span></span><br><span class="line">              execlp(buf, buf, (<span class="keyword">char</span> *)<span class="number">0</span>);</span><br><span class="line">              err_ret(<span class="string">"couldn’t execute: %s"</span>, buf);</span><br><span class="line">              <span class="built_in">exit</span>(<span class="number">127</span>);</span><br><span class="line">truetrue  &#125;</span><br><span class="line">          <span class="comment">/* parent */</span></span><br><span class="line">          <span class="keyword">if</span> ((pid = waitpid(pid, &amp;status, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">              err_sys(<span class="string">"waitpid error"</span>);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%% "</span>);</span><br><span class="line">true  &#125;</span><br><span class="line">true  <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">  &#125;</span><br><span class="line">+</span><br><span class="line">+ <span class="function"><span class="keyword">void</span> <span class="title">sig_int</span><span class="params">(<span class="keyword">int</span> signo)</span></span>&#123;</span><br><span class="line">+     <span class="built_in">printf</span>(<span class="string">"interrupt\n%% "</span>);</span><br><span class="line">+ &#125;</span><br></pre></td></tr></table></figure><h2 id="1-10-Time-Values"><a href="#1-10-Time-Values" class="headerlink" title="1.10    Time Values"></a>1.10    Time Values</h2><p>Historically, UNIX systems have maintained two different time values: </p><ol><li><p><strong>Calendar time</strong>. This value counts the number of seconds since the <strong>Epoch: 00:00:00 January 1, 1970,Coordinated Universal Time (UTC)</strong>. (Older manuals refer to UTC as Greenwich Mean Time.) These time values are used to record the time when a file was last modified, for example. </p><p>The primitive system data type <code>time_t</code> holds these time values. </p></li><li><p><strong>Process time</strong>. This is also called CPU time and measures the central processor resources used by a process. Process time is measured in clock ticks, which have historically been 50, 60, or 100 ticks per second. </p><p>The primitive system data type <code>clock_t</code> holds these time values. (We’ll show how to obtain the number of clock ticks per second with the <code>sysconf</code> function in Section 2.5.4.) </p></li></ol><p>有两种类型的时间：<strong>日历时间</strong>和<strong>进程时间</strong>，日历时间也就是UTC。</p><p>When we measure the execution time of a process, as in Section 3.9, we’ll see that the UNIX System maintains three values for a process: </p><ul><li>Clock time </li><li>User CPU time </li><li>System CPU time </li></ul><p>The clock time, sometimes called <strong>wall clock time</strong>, is the amount of time the process takes to run, and its value depends on the number of other processes being run on the system. Whenever we report the clock time, the measurements are made with no other activities on the system. </p><p>The user CPU time is the CPU time attributed to user instructions. The system CPU time is the CPU time attributed to the kernel when it executes on behalf of the process. For example, whenever a process executes a system service, such as read or write, the time spent within the kernel performing that system service is charged to the process. The sum of user CPU time and system CPU time is often called the CPU time. </p><p>度量进程执行时间，有三种：</p><ol><li>墙上时钟，也就是进程执行花费的总时间。</li><li>用户CPU时间，是用户模式（非内核）下的CPU使用时间</li><li>系统CPU时间，是进程进入内核执行的CPU使用时间</li></ol><p>It is easy to measure the clock time, user time, and system time of any process: simply execute the time(1) command, with the argument to the time command being the command we want to measure. For example: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /usr/include</span><br><span class="line"><span class="meta">$</span> time -p grep _POSIX_SOURCE */*.h &gt; /dev/null</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">real    0m0.81s</span><br><span class="line">user    0m0.11s</span><br><span class="line">sys     0m0.07s</span><br></pre></td></tr></table></figure><p>The output format from the time command depends on the shell being used, because some shells don’t run /usr/bin/time, but instead have a separate built-in function to measure the time it takes commands to run.  time命令的输出格式取决于使用什么shell，因为有些shell并不运行：<code>/usr/bin/time</code>，而是运行自己内置的一个time函数。</p><h2 id="1-11-System-Calls-and-Library-Functions"><a href="#1-11-System-Calls-and-Library-Functions" class="headerlink" title="1.11    System Calls and Library Functions"></a>1.11    System Calls and Library Functions</h2><p>All operating systems provide service points through which programs request services from the kernel. All implementations of the UNIX System provide a well-defined, limited number of entry points directly into the kernel called system calls (recall Figure 1.1). Version 7 of the Research UNIX System provided about 50 system calls, 4.4BSD provided about 110, and SVR4 had around 120. The exact number of system calls varies depending on the operating system version. More recent systems have seen incredible growth in the number of supported system calls. Linux 3.2.0 has 380 system calls and FreeBSD 8.0 has over 450.  随着时间的推移，系统调用越来越多，可见系统是越来越完善的。</p><p>The system call interface has always been documented in Section 2 of the UNIX Programmer’s Manual. Its definition is in the C language, no matter which implementation technique is actually used on any given system to invoke a system call. This differs from many older operating systems, which traditionally defined the kernel entry points in the assembly language of the machine.  <strong>系统调用的文档总是在unix编程手册的第二个章节里。它是用C语言定义的</strong>，不管系统具体是如何实现系统调用的。这一点与很多老操作系统不同（老操作系统使用汇编语言定义内核接口）</p><p>The technique used on UNIX systems is for each system call to have a function of the same name in the standard C library. The user process calls this function, using the standard C calling sequence. This function then invokes the appropriate kernel service, using whatever technique is required on the system. For example, the function may put one or more of the C arguments into general registers and then execute some machine instruction that generates a software interrupt in the kernel. For our purposes, we can consider the system calls to be C functions.  每个系统调用都对应一个相同名字的函数在标准C库里。用户进程调用这个函数，然后这个函数调用相应的内核服务。举个例子，这个函数可能会把一个或多个C参数放到通用寄存器，并执行机器指令在内核中产生一个软件中断。从我们的角度看，我们可以直接认为系统调用就是C函数。</p><p>Section 3 of the UNIX Programmer’s Manual defines the general-purpose library functions available to programmers. These functions aren’t entry points into the kernel, although they may invoke one or more of the kernel’s system calls. For example, the printf function may use the write system call to output a string, but the strcpy (copy a string) and atoi (convert ASCII to integer) functions don’t involve the kernel at all.  在<strong>unix编程手册第三章定义了通用库函数给程序员。这些函数不是内核入口，虽然它们可能会调用一个或几个内核的系统调用</strong>。举个例子，<code>printf</code>函数可能会使用<code>write</code>系统调用来输出一个字符串，但是<code>strcpy</code>（拷贝一个字符串）和<code>atoi</code>（吧ASCII字符转成整形）函数根本没有调用内核。</p><p>From an implementor’s point of view, the distinction between a system call and a library function is fundamental. From a user’s perspective, however, the difference is not as critical. From our perspective in this text, both system calls and library functions appear as normal C functions. Both exist to provide services for application programs. We should realize, however, that we can replace the library functions, if desired, whereas the system calls usually cannot be replaced.  从实现者的角度来看，系统调用和库函数的区别是很大的。然而从使用者的角度来看，这个区别并不重要。在这本书中，在我们看来，系统调用和库函数都以C函数的形式出现。两者的存在都是为了给应用开发者提供服务。然而我们应该意识到，<strong>虽然我们能替换库函数（如果我们想这样做），但系统调用不能被替换</strong>。</p><p>Consider the memory allocation function malloc as an example. There are many ways to do memory allocation and its associated garbage collection (best fit, first fit, and so on). No single technique is optimal for all programs. The UNIX system call that handles memory allocation, sbrk(2), is not a general-purpose memory manager. It increases or decreases the address space of the process by a specified number of bytes. How that space is managed is up to the process. The memory allocation function, malloc(3), implements one particular type of allocation. If we don’t like its operation, we can define our own malloc function, which will probably use the sbrk system call. In fact, numerous software packages implement their own memory allocation algorithms with the sbrk system call. Figure 1.11 shows the relationship between the application, the malloc function, and the sbrk system call.  让我们来看看内存分配函数<code>malloc</code>这个例子。有很多内存分配和相关的垃圾回收方法（最好适应算法，最先适应算法，等等）。没有哪个技术是对所有程序优化的。<strong>unix系统调用<code>sbrk(2)</code>不是一个通用的存储管理器。它给进程增加和减少内存空间都是固定的字节数。怎么管理空间其实还要取决于进程自己。内存分配函数<code>malloc(3)</code>，实现了特定类型的分配。如果我们不喜欢它的做法，我们可以定义自己的malloc函数，但也是要用到sbrk系统调用的。实际上大量的软件包都通过直接使用sbrk系统调用实现了自己的内存管理算法</strong>。图1.11展示了应用，malloc函数，和sbrk系统调用之间的关系。</p><p><img src="../../../../images/APUE-3rd-Figure 1.11.png" width="70%"></p><p>Here we have a clean separation of duties: the system call in the kernel allocates an additional chunk of space on behalf of the process. The malloc library function manages this space from user level.  这里职责是分明的：系统调用代表进程在内核里分配了额外的一块空间。malloc库函数在用户层级上管理这块空间。</p><p>Another example to illustrate the difference between a system call and a library function is the interface the UNIX System provides to determine the current time and date. Some operating systems provide one system call to return the time and another to return the date. Any special handling, such as the switch to or from daylight saving time, is handled by the kernel or requires human intervention. The UNIX System, in contrast, provides a single system call that returns the number of seconds since the Epoch: midnight, January 1, 1970, Coordinated Universal Time. Any interpretation of this value, such as converting it to a human-readable time and date using the local time zone, is left to the user process. The standard C library provides routines to handle most cases. These library routines handle such details as the various algorithms for daylight saving time.  另一个描述系统调用和库函数不同的例子是当前时间和日期。某些操作系统提供一个系统调用返回时间，另一个系统调用返回日期。任何特殊的处理，比如正常时制与夏令时的切换，需要内核的处理或者人为干预。Unix系统则相反，只提供一个系统调用，返回UTC（UTC是指从1970年的第一秒开始算起到现在经过的总时间）。任何对UTC这个值的解释，例如把它转成人类可读的时间日期使用当地时间，就留给了用户进程。标准C库提供了诸多例程来处理大多数情况。这些库例程处理这些细节，就像大多数算法处理夏令时切换一样。</p><p>An application can either make a system call or call a library routine. Also realize that many library routines invoke a system call. This is shown in Figure 1.12.  一个应用可以使用系统调用或者调用库例程，同样要意识到许多库例程调用了系统调用。</p><p>Another difference between system calls and library functions is that system calls usually <strong>provide a minimal interface</strong>, whereas library functions often <strong>provide more elaborate functionality</strong>. We’ve seen this already in the difference between the sbrk system call and the malloc library function. We’ll see this difference again later, when we compare the unbuffered I/O functions (Chapter 3) and the standard I/O functions (Chapter 5).  另一个系统调用和库函数的区别就是，系统调用往往只提供一个很小的接口，然而库函数经常提供更多精细的功能。</p><p><img src="../../../../images/APUE-3rd-Figure 1.12.png" width="70%"></p><p>The process control system calls (<strong>fork, exec, and waitpid</strong>) are usually invoked by the user’s application code directly. (Recall the bare-bones shell in Figure 1.7.) But some library routines exist to simplify certain common cases: the <strong>system</strong> and <strong>popen</strong> library routines, for example. In Section 8.13, we’ll show an implementation of the system function that invokes the basic process control system calls. We’ll enhance this example in Section 10.18 to handle signals correctly. </p><p>To define the interface to the UNIX System that most programmers use, we have to describe both the system calls and some of the library functions. If we described only the sbrk system call, for example, we would skip the more programmer-friendly malloc library function that many applications use. <strong>In this text, we’ll use the term function to refer to both system calls and library functions, except when the distinction is necessary.</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《APUE-3rd》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unix </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mathjax常用公式记录</title>
      <link href="/blog/2018/04/30/mathjax%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E8%AE%B0%E5%BD%95/"/>
      <url>/blog/2018/04/30/mathjax%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="角度记法"><a href="#角度记法" class="headerlink" title="角度记法"></a>角度记法</h2><ul><li>度数：<script type="math/tex">60^\circ</script>，$60^\circ$</li><li>度数分：<script type="math/tex">60^\prime</script>，$60^\prime$</li><li>弧度：<script type="math/tex">\frac{\pi}{2}</script>，$\frac{\pi}{2}$</li><li>角度记法：<script type="math/tex">\angle A</script>，$\angle A$</li></ul><a id="more"></a><h2 id="三重环积分无法渲染的问题"><a href="#三重环积分无法渲染的问题" class="headerlink" title="三重环积分无法渲染的问题"></a>三重环积分无法渲染的问题</h2><p>在网上找了半天资料最终解决了，参考这个答案：<a href="https://math.meta.stackexchange.com/questions/9973/how-do-you-render-a-closed-surface-double-integral" target="_blank" rel="noopener">How do you render a closed surface double integral?</a>，做法是直接使用Unicode编码：<code>\unicode{x222F}</code>，三重环积分的编码，参考这里：<a href="http://unicode-search.net/unicode-namesearch.pl?term=INTEGRAL" target="_blank" rel="noopener">unicode-search.net</a>，所以只要将<script type="math/tex">\oiiint</script>换成<script type="math/tex">\unicode{x2230}</script>即可正确显示三重环积分。如下：</p><script type="math/tex; mode=display">\unicode{x2230}</script><h2 id="行内limit"><a href="#行内limit" class="headerlink" title="行内limit"></a>行内limit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\lim\limits_&#123;x\rightarrow 0&#125; \frac&#123;\sin x&#125;&#123;x&#125; = 1$</span><br></pre></td></tr></table></figure><p>效果：$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\lim_&#123;x\rightarrow 0&#125; \frac&#123;\sin x&#125;&#123;x&#125; = 1$</span><br></pre></td></tr></table></figure><p>效果：$\lim_{x\rightarrow 0} \frac{\sin x}{x} = 1$</p><p>凭个人喜好，我就更喜欢第一种。</p><h2 id="弧"><a href="#弧" class="headerlink" title="弧"></a>弧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\overset&#123;\frown&#125; &#123;AB&#125;$</span><br></pre></td></tr></table></figure><p>$\overset{\frown} {AB}$</p>]]></content>
      
      
      <categories>
          
          <category> LaTex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数学基础公式推导</title>
      <link href="/blog/2018/04/25/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/"/>
      <url>/blog/2018/04/25/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<p>今天看到下面这个公式，突然想我好像不会推导啊：</p><p>$\sin(\beta-\alpha) = \sin\beta\cos\alpha - \cos\beta\sin\alpha$</p><p>遂想如何推导，在youtube上找了一个视频：<a href="https://www.youtube.com/watch?v=uX6hxwW5BYM" target="_blank" rel="noopener">三角函数正余弦和角公式推导</a></p><a id="more"></a><p>思路是先推导出：$\cos(\beta-\alpha) = \cos\alpha\cos\beta + \sin\alpha\sin\beta$</p><blockquote><p>然后根据这个再结合正弦余弦之间的关系就很容易推 $\sin(\beta-\alpha) = \sin\beta\cos\alpha - \cos\beta\sin\alpha$</p></blockquote><p>那么怎么推导上面这个公式呢？</p><p>需要用到解析几何：</p><p><img src="https://i.loli.net/2018/04/27/5ae29c4bf121f.png" alt="Screen Shot 2018-04-27 at 11.42.48 AM.png"></p><p>结合 <code>勾股定理</code> 和 <code>余弦定理</code> 可以推导出。</p><p>根据勾股定理：</p><script type="math/tex; mode=display">\begin{align}\overline{PQ}^2& = (\sin\alpha - \sin\beta)^2 + (\cos\beta - \cos\alpha)^2 \\& = 2 - 2(\cos\alpha\cos\beta + \sin\alpha\sin\beta) \\\end{align}</script><p>根据余弦定理（$a^2 = b^2 + c^2 -2ab\cos A$）：</p><script type="math/tex; mode=display">\begin{align}\overline{PQ}^2& = 1^2 + 1^2 - 2\cdot1\cdot1\cdot\cos(\alpha-\beta)\end{align}</script><p>由此推出：</p><script type="math/tex; mode=display">\cos(\alpha-\beta) = \sin\alpha\sin\beta+\cos\alpha\cos\beta</script><p>也即：</p><script type="math/tex; mode=display">\cos(\beta-\alpha) = \sin\alpha\sin\beta+\cos\alpha\cos\beta</script><p>然后：</p><script type="math/tex; mode=display">\begin{align}\sin(\beta-\alpha)&= \cos(\frac{\pi}{2}-(\beta-\alpha)) \\&= \cos((\frac{\pi}{2}+\alpha) - \beta) \\&= \sin(\frac{\pi}{2}+\alpha)\sin\beta + \cos(\frac{\pi}{2}+\alpha)\cos\beta \\&= \cos\alpha\sin\beta - \sin\alpha\cos\beta \\&= \sin\beta\cos\alpha - \cos\beta\sin\alpha\end{align}</script><blockquote><p>勾股定理和余弦定理的证明比较简单，读者可以试着自证。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Markdown+MathJax搭建个人博客</title>
      <link href="/blog/2018/04/25/Hexo+Markdown+MathJax%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/blog/2018/04/25/Hexo+Markdown+MathJax%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么搭建个人博客"><a href="#为什么搭建个人博客" class="headerlink" title="为什么搭建个人博客"></a>为什么搭建个人博客</h2><p>其实有想过用简书写博客，但简书不支持 <code>mathjax</code>，而我写作的时候要用到不少数学公式。</p><p>以前也用过 leanote，也就是现在的 蚂蚁笔记，但蚂蚁笔记的博客中，[TOC] 是有 mathjax 渲染的，但右上角的目录导航却是没有加 mathjax 渲染的，这样看着会相当别扭。另外还有几个原因：</p><ol><li>leanote收费</li><li>无法彻底的自定义</li><li>博客不像使用静态网站引擎那样直观的以文件的形式展示在我面前</li></ol><a id="more"></a><h2 id="为什么选-hexo"><a href="#为什么选-hexo" class="headerlink" title="为什么选 hexo"></a>为什么选 hexo</h2><p>为什么选择 <code>hexo</code>，而不是 <code>jekyll</code>，或者 <code>hugo</code>。</p><p>其实我以前的博客是用的 jekyll，弃用 jekyll 是因为这东西实在是太慢了，我更新文章之后无法立即看到结果，要刷新很多次，或者说要等很久，git pages 上才会显示新的东西。听说 hexo 和 hugo 的速度都比较快，所以就换了 hexo，hexo 的主题比 hugo 多，另外 hugo 的官网和主题网站访问实在太慢了，成功恶心到了我。所以我最后选了 hexo，用上了经典主题 next。现在来说，主要是next主题吸引我，而hugo的next主题太简陋了。</p><blockquote><p>hexo 是用 nodejs 写的，jekyll 是用 ruby 写的，hugo 是用 go 语言写的，wordpress 是用 php 实现的。</p></blockquote><p>那为什么不用 wordpress 呢，因为我想用 git pages 这个平台，而这个平台只支持静态博客。</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>首先你要安装 <code>git</code> 和 <code>npm</code>，git 是一种版本控制工具，npm 则是 nodejs 的包管理工具。</p><p>mac 上，使用 brew 和 brew cask 可以像许多 Linux 系统一样直接通过命令行安装软件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>另外很不幸的是 git 和 npm 在国内都是无法愉快的使用的，虽然没有被墙，但是速度奇慢无比。于是我们需要做些工作：</p><p>给 git 挂代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy https://127.0.0.1:1087</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1087</span><br></pre></td></tr></table></figure><p>但为了实现上面的功能，首先你得有个翻墙代理。关于翻墙都可以额外写篇文章了。</p><p>想看详细的解决办法：</p><ul><li><a href="https://www.zhihu.com/question/27159393" target="_blank" rel="noopener">https://www.zhihu.com/question/27159393</a></li><li><a href="https://www.zhihu.com/question/27159393/answer/141047266" target="_blank" rel="noopener">https://www.zhihu.com/question/27159393/answer/141047266</a></li></ul><p>然后给 npm 换源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm info underscore （这个只是为了检验上面的设置命令是否成功，若成功，会返回[指定包]的信息）</span><br></pre></td></tr></table></figure><p>想看更详细的解决办法：</p><ul><li><a href="https://segmentfault.com/a/1190000007829080" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007829080</a></li></ul><p>好了，之后就是</p><ul><li>hexo 安装</li><li>初始化 blog 目录</li><li>然后 hexo server 开启本地服务器，一个 demo 就出现啦。</li></ul><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="基本的建站过程"><a href="#基本的建站过程" class="headerlink" title="基本的建站过程"></a>基本的建站过程</h3><h4 id="从-jekyll-迁移到-hexo"><a href="#从-jekyll-迁移到-hexo" class="headerlink" title="从 jekyll 迁移到 hexo"></a>从 jekyll 迁移到 hexo</h4><p>我是从 jekyll 迁移过来的，所以先把文章全都拷贝进 <code>source/_posts</code> 目录下面，然后修改 <code>_config.yml</code>，把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md</span><br></pre></td></tr></table></figure><p>变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><p>官网迁移教程：<a href="https://hexo.io/zh-cn/docs/migration.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/migration.html</a></p><h4 id="下载-next-主题并添加-mathjax"><a href="#下载-next-主题并添加-mathjax" class="headerlink" title="下载 next 主题并添加 mathjax"></a>下载 next 主题并添加 mathjax</h4><p>然后下载一个 <code>next</code> 主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后修改 <code>_config.yml</code>，把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><p>变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>然后修改 <code>next</code> 的 <code>_config.yml</code>，把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: false</span><br><span class="line">  per_page: false</span><br><span class="line">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config#TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure><p>变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: false</span><br><span class="line">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config#TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure><blockquote><p>注意<code>per_page</code>不能是true，一定要是false。</p></blockquote><h4 id="解决-markdown-与-mathjax-的冲突"><a href="#解决-markdown-与-mathjax-的冲突" class="headerlink" title="解决 markdown 与 mathjax 的冲突"></a>解决 markdown 与 mathjax 的冲突</h4><p>为了解决 <code>markdown</code> 下划线转义成 <code>&lt;em&gt;</code> 标签（HTML标签），从而导致 <code>mathjax</code> 的下标无法使用，这个问题，我们修改 <code>marked.js</code> 文件，如果你使用的是 <code>sublime text</code> 或者 <code>Atom</code> 编辑器，<code>cmd+o</code>打开你的博客目录，然后 <code>cmd+p</code> 输入你要在此目录下找的文件名：<code>marked.js</code> 就可以找到这个文件。这个文件的是：<code>node_modules/marked/lib/marked.js</code>。</p><p>总共发现 mathjax 中的三处冲突：</p><ol><li><code>_</code>变成了<code>&lt;em&gt;</code>，造成数学公式下标无法显示</li><li><code>\\</code>变成了单个<code>\</code>，数学公式<code>\begin{case}...\end{case}</code>之间换行需要用到<code>\\</code></li><li><code>&lt; xxx &gt;</code>大于号小于号之间会新增一个 <code>#&quot;&quot;</code></li></ol><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*&#123;&#125;\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p>这样就去掉了，双斜杠转义。</p><p>把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><p>这样就禁掉了 <code>_</code> 变 <code>&lt;em&gt;</code>（斜体标记）。</p><p>最后，为了解决第三个冲突，我把 <code>&gt;</code> 写成了 HTML 实体形式：<code>&amp;gt;</code>，这样就无法组成一对尖括号了，终于不会冲突了。</p><p>我为什么不装个 <code>hexo-renderer-pandoc</code> + <code>pandoc</code> ，说出来都是泪啊，装了啊，一执行就报错，google 了一圈，没有有用的解答，遂作罢。</p><p><strong>2019-01-11更新</strong>：这种修改源码的方式其实是及其不推荐的，因为如果重新npm install的话，修改就作废了。现在的<code>hexo-renderer-marked</code>已经修复了<code>_</code>和<code>&gt;</code>的问题，但是依然存在<code>\\</code>的问题。有一个渲染器<code>hexo-renderer-kramed</code>，以上三个问题都完美解决。</p><h4 id="解决语言不正确的问题"><a href="#解决语言不正确的问题" class="headerlink" title="解决语言不正确的问题"></a>解决语言不正确的问题</h4><p>我发现有些地方居然默认的是德语还是什么其他语言，反正不是英语，所以我们需要改：</p><ul><li>根目录下的 <code>_config.yml</code></li><li>next 主题的 <code>_config.yml</code></li></ul><p>两个都改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: en</span><br></pre></td></tr></table></figure><h4 id="生成-public-静态网站目录-和-部署到-github"><a href="#生成-public-静态网站目录-和-部署到-github" class="headerlink" title="生成 public 静态网站目录 和 部署到 github"></a>生成 public 静态网站目录 和 部署到 github</h4><p>生成静态网站目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>下载 hexo-deployer-git 插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再修改 <code>_config.yml</code>，把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure><p>变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/liuqinh2s/liuqinh2s.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后，用命令 <code>hexo d</code> 部署就行了，不过首先你得有个 github 账号，然后还得有个叫 <code>liuqinh2s.github.io</code> 的项目，然后你还得配置好 github 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name Here&quot;</span><br><span class="line">git config --global user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>然后把公钥的内容传给 github 就行了。这里只说原理，具体的操作懒得贴了。</p><blockquote><p>只有多懂原理（哪怕只是基本的原理），你才能顺利解决遇到的诸多问题。</p></blockquote><p>官网的部署教程：<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment.html</a></p><p>基本的建站就结束了，然后就是慢慢把博客进行个性化吧。</p><h3 id="hexo-个性化配置"><a href="#hexo-个性化配置" class="headerlink" title="hexo 个性化配置"></a>hexo 个性化配置</h3><ul><li>hexo-reference，用来支持 markdown 脚注的</li><li>hexo-generator-seo-friendly-sitemap，sitemap用来喂给搜索引擎的，更好的爬取网站</li><li>hexo-generator-search，博客内部搜索</li><li>hexo-wordcount，统计字数用的</li></ul><p>然后就是调 next 主题，把自己喜欢的特性用上。</p><p>然后就是加上 <code>不蒜子</code>，百度统计这类统计工具，和 disqus 评论等等。</p><h2 id="遇到的问题以及解决方案"><a href="#遇到的问题以及解决方案" class="headerlink" title="遇到的问题以及解决方案"></a>遇到的问题以及解决方案</h2><h3 id="如何使用HTML锚点"><a href="#如何使用HTML锚点" class="headerlink" title="如何使用HTML锚点"></a>如何使用HTML锚点</h3><p>如果不了解HTML锚点，可以参考这个：</p><ul><li><a href="http://www.w3school.com.cn/html/html_links.asp" target="_blank" rel="noopener">w3school — HTML 链接</a></li><li><a href="https://baike.baidu.com/item/%E9%94%9A%E7%82%B9" target="_blank" rel="noopener">百度百科 — 锚点</a>。HTML可以在页面内跳转，只需要定义一个锚点，访问的时候 <strong>将 <code>#</code> 符号和锚名称添加到 URL 的末端</strong>。</li></ul><p>markdown本身是没有这个功能的，所以我们直接把标题用HTML写出来就行了。标题的对应是 <code>#</code> 到 <code>######</code> 总共6级，分别对应 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>。</p><p>举个例子：<code>&lt;h4 id=&quot;3.2.3&quot;&gt;解决 markdown 与 mathjax 的冲突&lt;/h4&gt;</code></p><p>这里要注意的是：<strong>不要使用<code>name</code>属性，而必须使用<code>id</code>属性，否则会不起作用</strong></p><p>实际上可以使用一个markdown插件来实现：上标、下标、锚点、脚注。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><p>锚点的用法，其实可以先<code>hexo g</code>一下，然后看看生成的HTML长什么样，就知道改怎么引用锚点了，经我观察，空格会被渲染成<code>-</code>，比如一个四级标题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 解决 markdown 与 mathjax 的冲突</span><br></pre></td></tr></table></figure><p>会被渲染成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">id</span>=<span class="string">"解决-markdown-与-mathjax-的冲突"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"header-anchor"</span> <span class="attr">href</span>=<span class="string">"#解决-markdown-与-mathjax-的冲突"</span>&gt;</span>¶<span class="tag">&lt;/<span class="name">a</span>&gt;</span>解决 markdown 与 mathjax 的冲突<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Override Overload Overwrite</title>
      <link href="/blog/2017/11/14/Override-Overload-Overwrite/"/>
      <url>/blog/2017/11/14/Override-Overload-Overwrite/</url>
      
        <content type="html"><![CDATA[<p>我们都知道有些东西容易混淆，在加上中文翻译得乱七八糟，更加让人困惑。今天我要讲的这三位可就真是绝了。</p><p>它们是：Override、Overload、Overwrite。</p><a id="more"></a><p>这是我查有道词典时候看到的可怕一幕：</p><p><img src="https://wx4.sinaimg.cn/mw690/006zFO3ggy1flhl8a9e69j312w0tatf9.jpg" alt=""></p><p>Override 一个把三个名字都占了，你怕不怕？反正我是看的心里一紧。</p><p>如果把概念都煮成了一锅粥，那还不如不要记这些概念，你应该向更深层次去探寻。就这三个的区别来说，我觉得主要理解两个概念就行了：</p><ol><li>函数签名（signature）</li><li>多态（polymorphism、polymorphic）</li></ol><h2 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h2><p>函数签名是什么，其实就是用来区别函数的，两个函数怎么样认定是不同的两个函数呢，只有两个方面：</p><ol><li>函数名</li><li>参数</li></ol><p>有人说还有返回值啊，不行，返回值不能作为函数签名的一部分，因为你调用一个函数的时候，返回值根本不能帮助编译器来识别你用的是哪个函数，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>请问我使用的是哪个函数？你看返回值确实不行吧。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是面向对象编程的概念，你可以看看它的准确定义：</p><p><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science" target="_blank" rel="noopener">Polymorphism</a>)。</p><p>定义很简短：polymorphism is the provision of a single interface to entities of different types.</p><p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html" target="_blank" rel="noopener">The Java™ Tutorials</a></p><p>如果父类有一个函数，子类也定义了一个完全相同的函数（函数签名相同），那么你可以用父类指针（或者说父类对象）作为统一的接口，来调用子类的方法。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“Vehicles can move!!”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotorBike</span> <span class="title">extends</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“MotorBike can move <span class="keyword">and</span> accelerate too!!”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">extends</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“Hi! I am a car!”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Vehicle vh = <span class="keyword">new</span> MotorBike();</span><br><span class="line">        vh.move();    <span class="comment">// prints MotorBike can move and accelerate too!!</span></span><br><span class="line">        vh = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        vh.move();    <span class="comment">// prints Vehicles can move!!</span></span><br><span class="line">        vh = <span class="keyword">new</span> Car();</span><br><span class="line">        vh.move();   <span class="comment">// prints Hi! I am a car!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的好处是可以扩展啊，比如我后来又多了个 truck 类，我不需要去动已经写好的代码，只要把 truck 模块写好，加进去就行了。</p><h2 id="Override、Overload、Overwrite-的区别"><a href="#Override、Overload、Overwrite-的区别" class="headerlink" title="Override、Overload、Overwrite 的区别"></a>Override、Overload、Overwrite 的区别</h2><p>好了，知道了这两个概念，我们再来看看上面的那三个混在一起的东西：</p><ul><li>Override（推翻，对英文意思就是这个）subclass method overrides base class method means:<ul><li>in different range (in derived class and base class)</li><li>the same function signature</li><li>the base class method is virtual（if in C++）</li></ul></li><li>overload（超载）function overloading means:<ul><li>the same range (in the same class)</li><li>the same function name</li><li>but different function signature</li></ul></li><li>overwrite（重写）subclass method hides base class method means:<ul><li>in different range (in derived class and base class)</li><li>the same function name</li></ul></li></ul><p>我们应该记住只有 Override 才跟多态有关。</p><p>Overload 是本class 里面的不同函数（只不过函数名一样罢了，其实是两个不同的函数，看两个函数是否是同一个函数就看函数签名就行了），其实没啥稀奇的，不就是函数名一样嘛。函数签名一样，区分出是用父类还是子类的函数，这才是面向对象和多态要解决的问题。</p><h2 id="Override-和-Overwrite-的区别"><a href="#Override-和-Overwrite-的区别" class="headerlink" title="Override 和 Overwrite 的区别"></a>Override 和 Overwrite 的区别</h2><blockquote><p>比较容易混淆的其实是 Override 和 Overwrite，但你只要死记住：Override 必须函数签名要一样，而 Overwrite 只需函数名一样即可。另外 C++ 中一定要用virtual才算 Override，而 Java 默认就是 Override，不需要修饰词。</p><p>这里关于 Java 和 C++ 面向对象的细节区别可以写一大堆，比如：C++ class 后面是要加分号的，而 Java 不需要；但 Java 的类名是和文件名要一致的，而且只能有一个 public 类，而 C++不需要；Java 直接就能用 Override，而 C++必须要使用 virtual 关键字才能使用 Override（虚函数）；Java 的抽象方法跟 C++的纯虚函数对应。Java 是单继承，由接口来实现“多继承”，C++是多继承，没有接口，只有抽象类。C++还有个虚基类的概念。具体的写法上还有很多的不同，多用这两种语言写面向对象的代码，就慢慢会知道了。</p></blockquote><p>C++ 有一个 virtual 关键字和 virtual table 这个概念，没有加 virtual 的父类函数是不可能形成多态的，如果这时候你碰到父类和子类两个里面有同名的函数，那么就属于 Overwrite 这个概念了，你其实也可以称这种覆盖掉父类函数的行为为：hide 隐藏。Java 这种语言里面没有 virtual 这一套，Java 也可以表现出 Overwrite，但要注意函数签名如果一样的话，那又不叫 Overwrite 了，应该叫 Override 了（Java 如果要在子类中使用父类的同函数签名方法，则必须使用 super 关键字）。而 C++ 不一样，即便是函数签名一样，如果前面不加 virtual 是不能叫 Override 的，仍然属于 Overwrite 的概念。请看下面的例子：</p><p>用 C++ 写的话：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> B();</span><br><span class="line">    a-&gt;func(<span class="number">1</span>);</span><br><span class="line">    ((B*)a)-&gt;func(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>可以看到，C++必须要用子类类型的指针才能访问到子类的部分（建议看一本书，叫：Inside the C++ Object Model，中文叫：深入C++对象模型，里面讲对象的内存布局讲的很清楚），java 也一样，必须转成子类型的指针才能访问，否则 IDE 会报错提示你。</p><p>Java 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        test t = <span class="keyword">new</span> test();</span><br><span class="line">        A a = t.<span class="keyword">new</span> B();</span><br><span class="line">        a.fun(<span class="number">1</span>);</span><br><span class="line">        ((B)a).func(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>为什么 Java 代码里不像 C++ 代码里面那样，使用两个函数签名相同的函数？因为前面说过了，那样的话就变成 Override 了，只有在 C++ 里才能实现函数签名相同的 Overwrite（不使用virtual即可）。</p>]]></content>
      
      
      <categories>
          
          <category> 编程范式 </category>
          
          <category> 面向对象编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Inside the C++ Object Model 系列笔记 四 -- The Semantics of Function</title>
      <link href="/blog/2017/10/23/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--The-Semantics-of-Function/"/>
      <url>/blog/2017/10/23/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--The-Semantics-of-Function/</url>
      
        <content type="html"><![CDATA[<blockquote><p>c++支持三种类型的成员函数，分别为static,nostatic,virtual。每一种调用方式都不尽相同。</p></blockquote><a id="more"></a><h2 id="nonstatic-member-function"><a href="#nonstatic-member-function" class="headerlink" title="nonstatic member function"></a>nonstatic member function</h2><p>C++的设计准则之一就是:nonstatic member function至少必须和一般的nonmember function 有相同的效率。<br>实际上，nonstatic member function 会被编译器进行如下的转换，变成一个普通函数:</p><p>Type1 X::foo(Type2 arg1) { … }</p><p>会被转换为如下的普通函数:</p><p>void foo(X *const this, Type1 &amp;__result, Type2 arg1) { … }</p><p>改写函数原型，在参数中增加this指针，对每一个”nonstatic data member的存取操作”改为由this指针来存取</p><p>将member function重写为一个外部函数，经过”mangling”处理（不需要处理的加上 extern “C”）</p><p>实际上，普通函数、普通成员函数、静态成员函数到最后都会变成与C语言函数类似的普通函数，只是编译器在这些不同类型的函数身上做了不同的扩展，并放在不同的 scope 里面而已。</p><p>编译器内部会将成员函数等价转换为非成员函数，具体是这样做的:</p><p>1.改写成员函数的签名，使得其可以接受一个额外参数，这个额外参数即是this指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> Point::X();</span><br><span class="line"><span class="comment">//成员函数X被插入额外参数this</span></span><br><span class="line"><span class="keyword">float</span> Point:: X(Point* <span class="keyword">this</span> );</span><br></pre></td></tr></table></figure><p>当然如果成员函数是const的，插入的参数类型将为 const Point* 类型。</p><p>2.将每一个对非静态数据成员的操作都改写为经过this操作。</p><p>3.将成员函数写成一个外部函数，对函数名进行“mangling”处理，使之成为独一无二的名称。</p><p>可以看出，将一个成员函数改写成一个外部函数的关键在于两点，一是给函数提供一个可以直接读写成员数据的通道；<br>二是解决好有可能带来的名字冲突。第一点通过给函数提供一个额外的指针参数来解决，第二点则是通过一定的规则将名字转换，使之独一无二。</p><p>于是在VC中对于上面的例子中的成员函数的调用将发生如下的转换：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p-&gt;X();被转化为</span></span><br><span class="line">?X@Point@@QAEMXZ(p);</span><br><span class="line"><span class="comment">//obj.X();被转化为</span></span><br><span class="line">?X@Point@@QAEMXZ(&amp;obj);</span><br></pre></td></tr></table></figure><p>覆盖（override）、重载（overload）、隐藏（hide, overwrite）的区别：</p><ul><li>覆盖（也叫重写）是指在派生类中重新对基类中的虚函数（注意是虚函数）重新实现。即函数名和参数都一样（函数签名一样），只是函数的实现体不一样。</li><li>重载是指 <strong>在同一个类中</strong> 不同的函数使用相同的函数名，但是函数的参数个数或类型不同。调用的时候根据函数的参数来区别不同的函数。</li><li>隐藏是指派生类中的函数把基类中相同名字的函数屏蔽掉了。隐藏与另外两个概念表面上看来很像，很难区分，其实他们的关键区别就是在多态的实现上。</li></ul><blockquote><p>C++多态（polymorphism）表示”以一个public base class的指针（或者reference），寻址出一个derived class object”</p></blockquote><p>我专门写了一篇关于这些容易弄混的概念的文章：<a href="../2017/11/14/Override-Overload-Overwrite">Override Overload Overwrite</a></p><h2 id="Virtual-Member-Function"><a href="#Virtual-Member-Function" class="headerlink" title="Virtual Member Function"></a>Virtual Member Function</h2><p>如果function()是一个虚拟函数，那么用指针或引用进行的调用将发生一点特别的转换——一个中间层被引入进来。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p-&gt;function()</span></span><br><span class="line"><span class="comment">//将转化为</span></span><br><span class="line">(*p-&gt;vptr[<span class="number">1</span>])(p);</span><br></pre></td></tr></table></figure><ul><li>其中vptr为指向虚函数表的指针，它由编译器产生。vptr也要进行名字处理，因为一个继承体系可能有多个vptr。</li><li>1是虚函数在虚函数表中的索引，通过它关联到虚函数function().</li></ul><p>何时发生这种转换？答案是在必需的时候 — 一个再熟悉不过的答案。当通过指针调用的时候，要调用的函数实体无法在编译期决定，必需待到执行期才能获得，所以上面引入一个间接层的转换必不可少。但是当我们通过对象（不是引用，也不是指针）来调用的时候，<br>进行上面的转换就显得多余了，因为在编译器要调用的函数实体已经被决定。此时调用发生的转换，与一个非静态成员函数(Nonstatic Member Functions)调用发生的转换一致。p.function()的处理就跟非静态成员函数一样了。</p><h2 id="Static-Member-Function"><a href="#Static-Member-Function" class="headerlink" title="Static Member Function"></a>Static Member Function</h2><ul><li>不能够直接存取其类中的非静态成员（nostatic members），包括不能调用非静态成员函数(Nonstatic Member Functions)。</li><li>不能声明为const、volatile或virtual</li><li>参数没有this</li><li>可以不用对象访问，直接 类名::静态成员函数 访问，当然，通过对象调用也被允许</li></ul><p>需要注意的是通过一个表达式或函数对静态成员函数进行调用，被C++ Standard要求对表达式进行求值。如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(a+=b).static_fuc();</span><br><span class="line">func().static_fuc();</span><br></pre></td></tr></table></figure><p>虽然省去对a+b求值对于static_fuc()的调用并没有影响，但是程序员肯定会认为表达式a+=b已经执行，一旦编译器为了效率省去了这一步，很难说会浪费多少程序员多少时间去查找这个bug。这无疑是一个明智的规定。func()返回一个对象。</p><p>vtable的内容：</p><ul><li>virtual class offset（有虚基类才有）</li><li>topoffset</li><li>typeinfo</li><li>继承基类所声明的虚函数实例，或者是覆盖（override）基类的虚函数</li><li>新的虚函数（或者是纯虚函数占位）</li></ul><p>虚函数表的构造挺简单的：</p><p><img src="https://i.loli.net/2018/04/25/5ae01bb4b32a9.gif" alt="虚函数表的构造"></p><p>从内存布局的角度看，类对象继承基类的时候只把基类的 nonstatic data member和member function（函数入口，也可以说是函数指针） 放进自己内存里，static data member和static function都在global address里面。然后就是虚函数表是复制了一份基类的虚函数表，然后把virtual实现了的部分替换掉，没实现的就不改，依然用父类的。然后虚函数表指针自然也要不一样，毕竟指向的内存地址不一样，对吧。</p><h2 id="Inside-the-C-Object-Model-系列笔记向导"><a href="#Inside-the-C-Object-Model-系列笔记向导" class="headerlink" title="Inside the C++ Object Model 系列笔记向导"></a>Inside the C++ Object Model 系列笔记向导</h2><ul><li><a href="../../19/Inside-the-C++-Object-Model-系列笔记--Object-Lessons">Inside the C++ Object Model 系列笔记 一 — Object Lessons</a></li><li><a href="../../19/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-constructors">Inside the C++ Object Model 系列笔记 二 — The Semantics of constructors</a></li><li><a href="../../21/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Data">Inside the C++ Object Model 系列笔记 三 — The Semantics of Data</a></li><li><a href="../../23/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Function">Inside the C++ Object Model 系列笔记 四 — The Semantics of Function</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《Inside the C++ Object Model》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inside the C++ Object Model 系列笔记 三 -- The Semantics of Data</title>
      <link href="/blog/2017/10/21/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--The-Semantics-of-Data/"/>
      <url>/blog/2017/10/21/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--The-Semantics-of-Data/</url>
      
        <content type="html"><![CDATA[<p>C++对象模型的细节，讨论了 data members 的处理。</p><h2 id="空类在内存中有空间吗"><a href="#空类在内存中有空间吗" class="headerlink" title="空类在内存中有空间吗"></a>空类在内存中有空间吗</h2><a id="more"></a><p>一个实例引出的思考：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> X&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> X&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">public</span> Y, <span class="keyword">public</span> Z&#123;&#125;;</span><br></pre></td></tr></table></figure><p>猜猜sizeof上面各个类都为多少？</p><p>Lippman的一个法国读者的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sizeof X yielded 1</span><br><span class="line">sizeof Y yielded 8</span><br><span class="line">sizeof Z yielded 8</span><br><span class="line">sizeof A yielded 12</span><br></pre></td></tr></table></figure><p>Lippman自己的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sizeof X yielded 1</span><br><span class="line">sizeof Y yielded 4</span><br><span class="line">sizeof Z yielded 4</span><br><span class="line">sizeof A yielded 8</span><br></pre></td></tr></table></figure><p>事实上，对于像X这样的一个空类，编译器会对其动点手脚——隐晦的插入一个字节。为什么要这样做呢？插入了这一个字节，那么X的每一个对象都将有一个独一无二的地址。<br>如果不插入这一个字节呢？哼哼，那对X的对象取地址的结果是什么？两个不同的X对象间地址的比较怎么办？</p><p>我们再来看Y和Z。首先我们要明白的是实现虚继承，将要带来一些额外的负担——额外需要一个某种形式的指针。到目前为止，对于一个32位的机器来说Y、Z的大小应该为5，而不是8或者4。我们需要再考虑两点因素：内存对齐（alignment—）和编译器的优化。</p><p>空类也有1Byte的大小，因为这样才能使得这个class的2个objects在内存中有独一无二的地址。</p><h2 id="The-Binding-of-a-Data-Member"><a href="#The-Binding-of-a-Data-Member" class="headerlink" title="The Binding of a Data Member"></a>The Binding of a Data Member</h2><p>考虑下面这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span> x;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3d</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">truePoint3d(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>);</span><br><span class="line">true<span class="comment">//问题是 x 到底是哪个 x 呢</span></span><br><span class="line">true<span class="function"><span class="keyword">float</span> <span class="title">X</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">true<span class="function"><span class="keyword">void</span> <span class="title">X</span><span class="params">(<span class="keyword">float</span> new_x)</span> <span class="keyword">const</span></span>&#123;x = new_x;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">true<span class="keyword">float</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对member functions本身的分析会直到整个class的声明都出现了才开始（直到看到代表 class 结束的}右大括号）。所以class的 member functions 可以引用声明在后面的成员，C 语言就做不到。</p><p>和member functions对比，需要十分注意的一点是:<br>class中的typedef并不具备这个性质。<br>因此，类中的 typedef 的影响会受到函数与 typedef 的先后顺序的影响。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> length;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3d</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">true<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(length l)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">true<span class="keyword">typedef</span> <span class="built_in">string</span> length;</span><br><span class="line">true<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(length l)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样 f1 绑定的 length 类型是 int;<br>而 f2 绑定的 length 类型才是 string。</p><p>所以，对于 typedef 需要防御性的程序风格:<br>始终把 nested type 声明(即 typedef)放在 class 起始处!</p><h2 id="Data-Member-Layout"><a href="#Data-Member-Layout" class="headerlink" title="Data Member Layout"></a>Data Member Layout</h2><p>C++只保证处于同一个 access section（也就是private,public,protected片段）的数据，一定会以声明的次序出现在内存布局当中(要求较晚出现的数据成员处在较大的内存地址中)。<br>C++标准只提供了这一点点的保证。<br>允许编译器将多个Acess Section的顺序自由排列，而不必在乎它们的声明次序。但似乎没有编译器这样做。<br>对于继承类，C++标准并未指定是其基类成员在前还是自己的成员在前。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">int</span> k;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据 i 一定在 j 之前，k 一定在 n 之前。具体什么顺序就看编译器了。</p><p>传统上，vptr被安放在所有被明确声明的member的最后，不过也有些编译器把vptr放在最前面(MSVC++就是把 vptr 放在最前面，而 G++ 是把 vptr 放在最后面)。</p><h2 id="Access-of-a-Data-Member"><a href="#Access-of-a-Data-Member" class="headerlink" title="Access of a Data Member"></a>Access of a Data Member</h2><p>在C++中，直观上来说，由一个对象存取一个member会比由一个指针存取一个member更快捷。<br>但是对于经由一个对象来存取和由一个指针来存取一个静态的 member 来说，是完全一样的，都会被编译器所扩展。</p><p>经由 member selection operators（也就是 “.” 运算符）对一个 static data member 进行存取操作只是一种语法上的便宜行事而已。member 其实并不在 class object 中，因此存取并不需要通过 class object。</p><p>经由一个函数调用的结果来存取静态成员，C++标准要求编译器必须对这个函数进行求值，虽然这个求值的结果并无用处。</p><p>foo().static_member = 100;</p><p>foo()返回一个类型为 X 的对象，含有一个 static_member，foo()其实可以不用求值而直接访 问这个静态成员，但是 C++标准保证了 foo()会被求值，可能的代码扩展为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">void</span>) foo();</span><br><span class="line">X::static_member = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="static-data-members"><a href="#static-data-members" class="headerlink" title="static data members"></a>static data members</h2><p>如果有两个 class ，每个都声明了一个 static member freelist，那么当他们都被放在程序的 data segment时，就会导致名称冲突。编译器的解决方法是暗中对每一个 static data member 编码（这种手法有个很美的名称：name-mangling），以获得一个独一无二的程序识别代码。有多少种编译器就有多少种 name-mangling 做法！通常不外乎是表格啦，语法措辞啦等等。任何 name-mangling 都有两个要点：</p><ol><li>一种算法，推导出独一无二的名称。</li><li>万一编译系统（或环境工具）必须和使用者交谈，那些独一无二的名称可以轻易被推导回原来的名称。</li></ol><h2 id="nonstatic-data-members"><a href="#nonstatic-data-members" class="headerlink" title="nonstatic data members"></a>nonstatic data members</h2><p>Nonstatic data members are stored directly within each class object and cannot be accessed except through an explicit or implicit class object. An implicit class object is present whenever the programmer directly accesses a nonstatic data member within a member function. For example, in the following code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Point3d</span><br><span class="line">Point3d::translate( <span class="keyword">const</span> Point3d &amp;pt ) &#123;</span><br><span class="line">   x += pt.x;</span><br><span class="line">   y += pt.y;</span><br><span class="line">   z += pt.z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the seemingly direct access of x, y, and z is actually carried out through an implicit class object represented<br>by the this pointer. Internally, the function is augmented as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// internal augmentation of member function</span></span><br><span class="line">  Point3d</span><br><span class="line">  Point3d::translate( <span class="keyword">const</span> Point3d* <span class="keyword">this</span>, <span class="keyword">const</span> Point3d &amp;pt ) &#123;</span><br><span class="line">     <span class="keyword">this</span>-&gt;x += pt.x;</span><br><span class="line">     <span class="keyword">this</span>-&gt;y += pt.y;</span><br><span class="line">     <span class="keyword">this</span>-&gt;z += pt.z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>地址：&amp;origin._y;和&amp;origin + ( &amp;Point3d::_y - 1 );是一样的。指向 data member 的指针，其 offset 值总是被加上1。这样可以使编译系统区分出 “一个指针 data member 的指针，用以指向 class 的第一个 member”和“一个指向 data member 的指针，但是没有指向任何 member”两种情况(成员指针也需要有个表示 NULL 的方式，0 相当于用来表示 NULL 了，其它的就都要加上 1 了)。</p><h2 id="Inheritance-and-the-Data-Member"><a href="#Inheritance-and-the-Data-Member" class="headerlink" title="Inheritance and the Data Member"></a>Inheritance and the Data Member</h2><p>C++ Standard 保证:“出现在派生类中的 base class subobject 有其完整原样性!” 子类会被放在父类的对齐空白字节之后，因为父类的完整性必须得以保证，父类的对齐空白字节 也是父类的一部分，也是不可分割的。</p><p>请看下面例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:</span><span class="keyword">public</span> X</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span>  c2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>X2的布局应当是x(4),c(1),c2(1),这么说来sizeof(X2)的值应该是8？错了，实际上是12。原因在于X后面的三个字节的填充空白不能为c2所用。也就是说X2的大小实际上为：X(8)+c2(1)+填补（3）=12。这样看来编译器似乎是那么的呆板，其实不然，看一下下面的语句会发生什么？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X2 x2;</span><br><span class="line">X x;</span><br><span class="line">x2=x;</span><br></pre></td></tr></table></figure><p>如果X后面的填充空白可以被c2使用的话，那么X2和X都将是8字节。上面的语句执行后x2.c2的值会是多少？一个不确定的值！这样的结果肯定不是我们想要的。</p><p>在多重继承的派生体系中，将派生类的地址转换为第 1 基类时成本与单继承是相同的，只需要改换地址的解释方式而已；而对于转换为非第 1 基类的情况，则需要对地址进行一定的 offset 操作 才行。<br>C++ Standard 并未明确 base classes 的特定排列次序，但是目前的编译器都是按照声明的次序来安放他们的。(有一个优化:如果第 1 基类没有 vtable 而后继基类有，则可能把它们调 个位置)。<br>多重继承中，可能会有多个 vptr 指针，视其继承体系而定:派生类中 vptr 的数目最多等于所有基<br>类的 vptr 数目的总和。</p><h2 id="Inside-the-C-Object-Model-系列笔记向导"><a href="#Inside-the-C-Object-Model-系列笔记向导" class="headerlink" title="Inside the C++ Object Model 系列笔记向导"></a>Inside the C++ Object Model 系列笔记向导</h2><ul><li><a href="../../19/Inside-the-C++-Object-Model-系列笔记--Object-Lessons">Inside the C++ Object Model 系列笔记 一 — Object Lessons</a></li><li><a href="../../19/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-constructors">Inside the C++ Object Model 系列笔记 二 — The Semantics of constructors</a></li><li><a href="./">Inside the C++ Object Model 系列笔记 三 — The Semantics of Data</a></li><li><a href="../../23/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Function">Inside the C++ Object Model 系列笔记 四 — The Semantics of Function</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《Inside the C++ Object Model》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inside the C++ Object Model 系列笔记 二 -- The Semantics of constructors</title>
      <link href="/blog/2017/10/19/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--The-Semantics-of-constructors/"/>
      <url>/blog/2017/10/19/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--The-Semantics-of-constructors/</url>
      
        <content type="html"><![CDATA[<p>这一章详细的讨论了 constructor 如何工作，讨论构造一个对象的过程以及构造一个对象给程序带来的影响。</p><h2 id="区分trivial和notrivial"><a href="#区分trivial和notrivial" class="headerlink" title="区分trivial和notrivial"></a>区分trivial和notrivial</h2><ol><li>只有编译器需要的时候(为什么会需要?后面讲的很清楚)，合成操作才是nontrivial的， 这样的构造函数才会被真正的合成出来;</li><li>如果编译器不需要，而程序员又没有提供，这时的默认构造函数就是trivial的。虽然它在概念上存在，但是编译器实际上根本不会去合成出来，因为他不做任何没有意义的事情，所以当然可以忽略它不去合成。trivial 的函数只存在于概念上，实际上不存在这个函数。</li></ol><a id="more"></a><h2 id="default-constructor"><a href="#default-constructor" class="headerlink" title="default constructor"></a>default constructor</h2><p>A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).</p><h3 id="通常很多C-程序员存在两种误解"><a href="#通常很多C-程序员存在两种误解" class="headerlink" title="通常很多C++程序员存在两种误解"></a>通常很多C++程序员存在两种误解</h3><ul><li>没有定义默认构造函数的类都会被编译器生成一个默认构造函数。</li><li>编译器生成的默认构造函数会明确初始化类中每一个数据成员。</li></ul><p><strong>被声明：declared，被定义：defined</strong>。声明代表分配内存空间，定义代表初始化，也就是分配具体的值。</p><blockquote><p>注意如果声明的是一个指针（或者在其他语言里声明了一个对象或者数组的引用），那么只会开辟一个指针的空间，真正的对象要到定义的时候，也就是初始化的时候，分配内存并初始化。</p></blockquote><p>所以所有成员都在声明的时候被分配内存，构造函数的作用是初始化它们，non-object 成员需要程序员自己初始化，编译器不帮忙。</p><p>C++中对于默认构造函数的解释是:<br><strong>默认的构造函数会在需要的时候被编译器产生出来。</strong><br>这里非常重要的一点是:<br>谁需要?是程序的需要还是编译器的需要?如果是程序的需要，那是程序员的责任;<br>只有在是编译器的需要时，默认构造函数才会被编译器产生出来，而且被产生出来的默认构造函数只会执行编译器所需要的行动，而且这个产生操作只有在默认构造函数真正被调用时才会进行合成。</p><p>例如:成员变量初始化为 0 操作，这个操作就是程序的需要，而不是编译器的需要。</p><p>总结变量的初始化:</p><p>Global objects are guaranteed to have their associated memory “zeroed out” at program start-up. Local objects allocated on the program stack and heap objects allocated on the free-store do not have their associated memory zeroed out; rather, the memory retains the arbitrary bit pattern of its previous use.</p><p>只有全局变量和静态变量才会保证初始化，其中静态变量可以视为全局变量的一种，因为静态变量也是保存在全局变量的存储空间上的。<br>Golbal objects 的内存保证会在程序激活的时候被清 0；Local objects 配置于程序的堆栈中，Heap objects 配置于自由空间中，都不一定会被清为 0,它们的内容将是内存上次被使用后的痕迹!</p><p>全局变量和静态变量都放在 global data Segment 上，且在类被声明的时候就已经分配内存和初始化，也就是 <strong>在任何对象被定义之前静态变量就已经存在了（即使该 class 没有任何 object 实体，static data members也已经存在）。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span> <span class="keyword">public</span>: <span class="keyword">int</span> val; Foo *pnext; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// Oops:  program needs bar's members zeroed out</span></span><br><span class="line">   Foo bar;</span><br><span class="line">   <span class="keyword">if</span> ( bar.val || bar.pnext )</span><br><span class="line">      <span class="comment">// ... do something</span></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When is a default constructor synthesized, then? Only when the implementation needs it. Moreover, the synthesized constructor performs only those activities required by the implementation. That is, even if there were a need to synthesize a default constructor for class Foo, that constructor would not include code to zero out the two data members val and pnext. For the previous program fragment to execute correctly, the designer of class Foo needs to provide an explicit default constructor that properly initializes the class’s two members.</p><p>意思是初始化 val 和 pnext 是程序员的责任，编译器不负责，所以你这里不初始化它们，它们存储的结果就是内存遗留的痕迹。</p><h3 id="什么时候编译器会给你生成默认构造函数"><a href="#什么时候编译器会给你生成默认构造函数" class="headerlink" title="什么时候编译器会给你生成默认构造函数"></a>什么时候编译器会给你生成默认构造函数</h3><p>首先你得没有写默认构造函数，编译器才会给你生成。有四类情况，编译器会给你加代码：</p><ol><li>类中有一个对象（成员变量），这个对象包含了默认构造函数</li><li>继承自带有默认构造函数的基类的类</li><li>带有虚函数的类</li><li>继承自虚基类的类</li></ol><p>如果class A内含一个或以上的member objects，那么A的constructor必须调用每一个 member class 的默认构造函数。<br>具体方法是:编译器会扩张 constructors（注意：是所有的构造函数，不仅仅是默认构造函数会被扩张），在其中安插代码使得在 user code 被调用之前先调 用 member objects 的默认构造函数(当然如果需要调用基类的默认构造函数，则放在基类的 默认构造函数调用之后:基类构造函数-&gt;成员构造函数-&gt;user code)。<br>C++要求以“member objects 在 class 中的声明次序”来调用各个 construtors。这就是声明的次序决定了初始化次序(构造函数初始化列表一直要求以声明顺序来初始化)的根本原因!<br>所以你打乱 member initialization list 的顺序根本没有用哦~</p><p>理解了初始化列表中的实际执行顺序中“以 member 声明的次序”来决定的，就可以理解一些很 微妙的错误了。比如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A() : i(<span class="number">99</span>), j(<span class="number">66</span>), value(foo()) &#123;... &#125;</span><br><span class="line"><span class="keyword">int</span> i, value, j;</span><br></pre></td></tr></table></figure><p>这会不会产生错误取决于成员函数 foo()是依赖于 i 还是 j:<br>如果 foo 依赖于 i，由于 i 声明在 value 之前，所以不会产生错误;<br>如果 foo 依赖于 j，由于 j 声明在 value 之后，就产生了使用未初始化成员的错误。</p><p>带有virtual functions的类的默认构造函数毫无疑问是nontrivial的，需要编译器安插额外的<br>成员 vptr 并在构造函数中正确的设置好 vptr，这是编译器的重要职责之一。<br>继承自 virtual base class 的类的默认构造函数同样也毫无疑问的 nontrivial，编译器需要正确设置相关的信息以使得这些虚基类的信息能够在执行时准备妥当，这些设置取决于编译器实现虚基类的手法。</p><p>编译器有4种情况会使得编译器真正的为class生成nontrivial的默认构造函数，这个 nontrivial 的默认构造函数只满足编译器的需要(调用 member objects 或 base class 的默认构造函数、初始化 virtual function 或 virutal base class 机制)。其它情况时，类在概念上拥有默认构造函数，但是实际上根本不会被产生出来(前面的区分 trivial 和 nontrivial)。</p><p>对于一个trivial默认构造函数，编译器的态度是，既然它全无用处，干脆就不合成它。在这儿要厘清的是概念与实现的差别，概念上追求缜密完善，在实现上则追求效率，可以不要的东西就不要。</p><h2 id="copy-constructor"><a href="#copy-constructor" class="headerlink" title="copy constructor"></a>copy constructor</h2><p>有一个参数的类型是其类类型的构造函数是为拷贝构造函数。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X::X( <span class="keyword">const</span> X&amp; x);</span><br><span class="line">Y::Y( <span class="keyword">const</span> Y&amp; y, <span class="keyword">int</span> =<span class="number">0</span> );</span><br><span class="line"><span class="comment">//可以是多参数形式，但其第二个即后继参数都有一个默认值</span></span><br></pre></td></tr></table></figure><h3 id="什么时候编译器会给你生成拷贝构造函数"><a href="#什么时候编译器会给你生成拷贝构造函数" class="headerlink" title="什么时候编译器会给你生成拷贝构造函数"></a>什么时候编译器会给你生成拷贝构造函数</h3><blockquote><p>其实和前面默认构造函数一样，四种情况</p></blockquote><p>如果一个类没有定义拷贝构造函数，通常按照“成员逐一初始化(Default Memberwise Initialization)”的手法来解决“一个类对象以另一个同类实体作为初值”——也就是说把内建或派生的数据成员从某一个对象拷贝到另一个对象身上，如果数据成员是一个对象，则递归使用“成员逐一初始化(Default Memberwise Initialization)”的手法。</p><p>成员逐一初始化(Default Memberwise Initialization)具体的实现方式则是位逐次拷贝（Bitwise copy semantics）</p><p>Copy constructors和默认构造函数一样，只有在必须的时候才会被产生出来，对于大部分的class 来说，拷贝构造函数仅仅需要按位拷贝就可以。满足 bitwise copy semantics 的拷贝构造函数是 trivial 的，就不会真正被合成出来(与默认构造函数一样，只有 nontrivial 的拷贝构 造函数才会被真正合成出来)。对大多数类按位拷贝就够了，什么时候一个 class 不展现出 bitwise copy semantics 呢? 分为 4 种情况，前 2 种很明显，后 2 种是由于编译器必须保证正确设置虚机制而引起的。</p><ul><li>当class内含一个member object而后者声明了(也可能由于nontrivial语意从而编译器 真正合成出来的)一个 copy constructor 时;</li><li>当class继承自一个存在有copy constructor的base class(同样也可能是合成)时;</li><li>当class声明了一个或多个virtual functions时;(vf影响了位语意，进而影响效率)</li><li>当class派生自一个继承串链，其中一个或多个virtual base classes时。</li></ul><p>对于前两种情况，不论是基类还是对象成员，既然后者声明有拷贝构造函数时，就表明其类的设计者或者编译器希望以其声明的拷贝构造函数来完成“一个类对象以另一个同类实体作为初值”的工作，而设计者或编译器这样做——声明拷贝构造函数，总有它们的理由，而通常最直接的原因莫过于因为他们想要做一些额外的工作或“位逐次拷贝”无法胜任。</p><p>对于有虚函数的类，如果两个对象的类型相同那么位逐次拷贝其实是可以胜任的。但问题将出现在，如果基类由其继承类进行初始化时，此时若按照位逐次拷贝来完成这个工作，那么基类的vptr将指向其继承类的虚函数表，这将导致无法预料的后果——调用一个错误的虚函数实体是无法避免的，轻则带来程序崩溃，更糟糕的问题可能是这个错误被隐藏了。所以对于有虚函数的类编译器将会明确的使被初始化的对象的vptr指向正确的虚函数表。因此有虚函数的类没有声明拷贝构造函数，编译将为之合成一个，来完成上述工作，以及初始化各数据成员，声明有拷贝构造函数的话也会被插入完成上述工作的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  b.i=<span class="number">1</span>;</span><br><span class="line">  A a = b;</span><br><span class="line">  A *p = &amp;a;</span><br><span class="line">  p-&gt;f();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p-&gt;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子可以看出，如果 A a = b;是 bitwise copy semantics 的话，a 内放置的就是 b 的 vptr。但其实不是，编译器给 a 生成了拷贝构造函数，初始化了 a 的 vptr。b 的 vptr 是由编译器给 b 生成的默认构造函数初始化的。但对于其他成员变量 bitwise copy semantics依然有效，所以 i 的结果是1。我在做这个试验的时候发现了一个有趣的现象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  b.i=<span class="number">1</span>;</span><br><span class="line">  A a = b;</span><br><span class="line">  A *p = &amp;a;</span><br><span class="line">  p-&gt;f();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p-&gt;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个 i 不是同一个 i，b.i=1;优先给 b 中的同名变量赋值了。这样的代码简直可怕。那么怎么访问到从 A 继承来的成员变量 i 呢，请看：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  b.A::i=<span class="number">6</span>;</span><br><span class="line">  b.B::i=<span class="number">1</span>;</span><br><span class="line">  A a = b;</span><br><span class="line">  A *p = &amp;a;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p-&gt;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名返回值优化"><a href="#命名返回值优化" class="headerlink" title="命名返回值优化"></a>命名返回值优化</h2><p>对于一个如foo()这样的函数，它的每一个返回分支都返回相同的对象，编译器有可能对其做Named return Value优化（下文都简称NRV优化），方法是以一个参数result取代返回对象。</p><p>foo()的原型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">X <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    X xx;</span><br><span class="line">    <span class="keyword">if</span>(...)</span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后的foo()以result取代xx：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">foo</span><span class="params">(X &amp;result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    result.X::X();</span><br><span class="line">    <span class="keyword">if</span>(...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//直接处理result</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//直接处理result</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比优化前与优化后的代码可以看出，对于一句类似于X a = foo()这样的代码，NRV优化后的代码相较于原代码节省了一个临时对象的空间（省略了xx）,同时减少了两次函数调用（减少xx对象的默认构造函数和析构函数，以及一次拷贝构造函数的调用，增加了一次对a的默认构造函数的调用）。</p><h2 id="Inside-the-C-Object-Model-系列笔记向导"><a href="#Inside-the-C-Object-Model-系列笔记向导" class="headerlink" title="Inside the C++ Object Model 系列笔记向导"></a>Inside the C++ Object Model 系列笔记向导</h2><ul><li><a href="../Inside-the-C++-Object-Model-系列笔记--Object-Lessons">Inside the C++ Object Model 系列笔记 一 — Object Lessons</a></li><li><a href="./">Inside the C++ Object Model 系列笔记 二 — The Semantics of constructors</a></li><li><a href="../../21/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Data">Inside the C++ Object Model 系列笔记 三 — The Semantics of Data</a></li><li><a href="../../23/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Function">Inside the C++ Object Model 系列笔记 四 — The Semantics of Function</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《Inside the C++ Object Model》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inside the C++ Object Model 系列笔记 一 -- Object Lessons</title>
      <link href="/blog/2017/10/19/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--Object-Lessons/"/>
      <url>/blog/2017/10/19/Inside-the-C++-Object-Model-%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0--Object-Lessons/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多态：统一的接口，不同的实现</p></blockquote><p><strong>C++多态（polymorphism）</strong> 表示“以一个public base class的指针（或者reference），寻址出一个derived class object”</p><h2 id="Layout-Costs-for-Adding-Encapsulation-封装"><a href="#Layout-Costs-for-Adding-Encapsulation-封装" class="headerlink" title="Layout Costs for Adding Encapsulation(封装)"></a>Layout Costs for Adding Encapsulation(封装)</h2><blockquote><p>意思是：为了添加封装所需要付出的内存布局花销</p></blockquote><p>第一章 Object Lessons 介绍了 C++如何在背后实现一个对象，内存中的布局以及空间上的关系。</p><p><strong>在计算机的原理中，要实现某个机制，我们总能找到很多种实现方式</strong>（对比着学习，多思考每种实现方法的利弊），C++的类的实现也不例外，让我们对比以下三种实现方式：</p><a id="more"></a><h3 id="三种对象实现模式"><a href="#三种对象实现模式" class="headerlink" title="三种对象实现模式"></a>三种对象实现模式</h3><h4 id="A-Simple-Object-Model"><a href="#A-Simple-Object-Model" class="headerlink" title="A Simple Object Model"></a>A Simple Object Model</h4><p><img src="https://wx4.sinaimg.cn/mw690/006zFO3ggy1fknaq5739jj30nu0l4jsy.jpg" alt="A Simple Object Model"></p><p>可以看到，简单对象模型把所有的data member和member function（函数指针）都放在对象里了。</p><h4 id="A-Table-driven-Object-Model"><a href="#A-Table-driven-Object-Model" class="headerlink" title="A Table-driven Object Model"></a>A Table-driven Object Model</h4><p><img src="https://wx4.sinaimg.cn/mw690/006zFO3ggy1fmxnb321f6j30n80kemzy.jpg" alt="A Table-driven Object Model"></p><p>表驱动模型把member分为data和function两类，用两个指针分别指向两个表，一个存放所有的data member，一个存放所有的function指针。</p><h4 id="The-C-Object-Model"><a href="#The-C-Object-Model" class="headerlink" title="The C++ Object Model"></a>The C++ Object Model</h4><p><img src="https://wx3.sinaimg.cn/mw690/006zFO3ggy1fmxnd1t7ucj30ua0ju0wu.jpg" alt="The C++ Object Model"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Point3d</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point3d(Type x, Type y, Type z) : x_(x), y_(y), z_(z) &#123;&#125;</span><br><span class="line">    <span class="function">Type <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x_; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Type x_, y_, z_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 C++ 类并不会比 C 语言 的struct 耗费更多的内存空间，三个 data members 直接内含于 Object 中，member functions 则放在 Object 外。</p><p>C++的 data members 有两种：<strong>static 和 nonstatic</strong></p><p>C++的 member functions 有三种：<strong>static 、nonstatic 、virtual</strong></p><blockquote><p>放在 Object 中的只有 nonstatic data members，其他的统统是放在 Object 外。</p></blockquote><p>一个对象的内存布局大小(通常由 3 部分组成):</p><ul><li>其 nonstatic data member 的总和大小;</li><li>任何由于位对齐所需要的填补上去的空间;(关于内存对齐，自己查)</li><li>为了支持virtual机制而引起的额外负担。</li></ul><h3 id="data-members-在内存中的布局"><a href="#data-members-在内存中的布局" class="headerlink" title="data members 在内存中的布局"></a>data members 在内存中的布局</h3><p><code>C++</code>只保证处于同一个 access section（也就是private,public,protected片段）的数据，一定会以声明的次序出现在内存布局当中(要求较晚出现的数据成员处在较大的内存地址中)。<br><code>C++</code>标准只提供了这一点点的保证。<br>允许编译器将多个Acess Section的顺序自由排列，而不必在乎它们的声明次序。但似乎没有编译器这样做。<br>对于继承类，C++标准并未指定是其基类成员在前还是自己的成员在前。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">int</span> k;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据 i 一定在 j 之前，k 一定在 n 之前。其他顺序就看编译器了。</p><h3 id="Virtual-Table-vtbl-vtable-和-vptr"><a href="#Virtual-Table-vtbl-vtable-和-vptr" class="headerlink" title="Virtual Table(vtbl, vtable) 和 vptr"></a>Virtual Table(vtbl, vtable) 和 vptr</h3><p>Virtual function 机制由以下2个步骤来支持：</p><ol><li>每个 class 产生的 Virtual function 的指针放在 Virtual Table 中</li><li>编译器给每个 class object 添加一个指针 vptr，指向相应的 vtable</li></ol><p>一个 vtable 对应一个 class，一个 vptr 才对应一个 class object，必须区分开这 2 个概念。vtable 独立于对象，就跟函数独立于对象一样。这样所有对象才能共享它们，就像 static data members 被共享一样。</p><p><code>nonstatic data member</code>是对象独有的，每个对象都有自己的一份。而其他的member全都是公用的。其实这里可以顺便学一下<a href="https://zh.wikipedia.org/zh/序列化" target="_blank" rel="noopener">序列化</a>这个概念，思考一下序列化对象的时候哪些东西需要存储。</p><p>RTTI(run-time type identification):一般来说，每一个 class 相关联的 type_info 对象的指针通常也保存在 vtable 的第一个 slot 中。关于 type_info 是什么，可以自己查。</p><h3 id="引入继承后的对象模型成本"><a href="#引入继承后的对象模型成本" class="headerlink" title="引入继承后的对象模型成本"></a>引入继承后的对象模型成本</h3><ul><li>如果是普通继承，父对象被直接包含在子对象里面，这样父对象的存取也是直接进行的，没有额外的指针成本。</li><li>如果是虚拟继承，父对象由一个指针指出来，这样父对象的存取就必须由指针访问，添加了一层间接性。</li></ul><p>virtual base class，用以实现 “多次出现在继承体系中的base class，有一个单一而被共享的实例”</p><p><img src="https://wx3.sinaimg.cn/mw690/006zFO3gly1fknlhzg45wj30bs0asq3w.jpg" alt="虚基类"></p><p><img src="https://wx1.sinaimg.cn/mw690/006zFO3gly1fknli0837fj317w0mmhao.jpg" alt="虚拟多重继承"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span> <span class="keyword">public</span>: <span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>我觉得这里有个问题，class D继承class B和class C的时候并不是虚继承，所以何不将B和C直接放在D中呢？这样就省了两次指针。</p></blockquote><p>这是我看到的一个讲的很不错的博客：<a href="https://liuhongjiang.github.io/hexotech/2012/11/30/virtual-inheritance/" target="_blank" rel="noopener">虚拟继承</a></p><h2 id="struct-和-class-关键字的区别"><a href="#struct-和-class-关键字的区别" class="headerlink" title="struct 和 class 关键字的区别"></a>struct 和 class 关键字的区别</h2><p>总共就两个区别：</p><ul><li>struct defaults to public access and class defaults to private access.</li><li>When inheriting, struct defaults to public inheritance and class defaults to private inheritance. (Ironically, as with so many things in C++, the default is backwards: public inheritance is by far the more common choice, but people rarely declare structs just to save on typing the “public” keyword). 哈哈，我觉得这么做的目的无非就是提醒你注意封装，不要给外部暴露没必要的东西，所以才把默认搞成private。</li></ul><p>除此之外 struct 和 class 一样。</p><p>struct 用来表现那些只有数据的集合体 POD(Plain Old Data)、而 class则希望表达的是<code>ADT(abstract data type)</code>的思想。</p><blockquote><p>POD stands for Plain Old Data - that is, a class (whether defined with the keyword struct or the keyword class) without constructors, destructors and virtual members functions.</p></blockquote><p>由于这2个关键字在本质上无区别，所以class并没有必须要引入，但是引入它的确非常令人满意，因为这个语言所引入的不止是这个关键字，还有它所支持的封装和继承的哲学。可以这样想象：struct只剩下方便C程序员迁徙到C++的用途了。</p><h2 id="programming-paradigms"><a href="#programming-paradigms" class="headerlink" title="programming paradigms"></a>programming paradigms</h2><p>C++支持三种形式的编程风格(或称典范 paradigm):</p><ul><li>面向过程的风格（procedural model）: 就像C一样，一条语句接一条语句的执行或者函数跳转;</li><li>抽象数据类型模型(abstract data type model，ADT): 仅仅使用了class的封装，很多人都是 在用基于对象的风格却误以为自己在使用面向对象的风格;</li><li>面向对象的风格(object-oriented): 使用了class的封装和多态的编程思维(多态才是 真正的面向对象的特征)。</li></ul><p>纯粹以一种paradigm写程序，有助于整体行为的良好稳固。</p><blockquote><p>一个 reference 通常是以一个指针来实现的，所以 point 和 reference 并没有本质的区别，reference 和 const 指针的区别就是，你取 reference 指针的地址的时候，取到的是数据的地址，const 指针取地址取到的是指针的地址。下面的程序说明了这一点：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> &amp;b=a;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; &amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; &amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说你取不到 b 的地址。所以说引用相当于一个 <code>别名</code>。引用常用在函数调用里，可以直接操作原有对象，这样就可以不用写指针的指针这种绕弯的东西了。</p><blockquote><p>函数的实参传递给形参是值传递，也就是一个 copy，形参在函数里将是一个局部变量。这个特性是许多新手面临的大坑。一道经典的考察题目便是，实现一个 C 语言的 swap 函数，由于 C 语言没有引用，你就只能用指针来操作原有对象了。java更坑，java没有指针，所以需要用引用，但基础数据类型没有引用，所以你如果要交换基础数据类型的话，根本没办法写swap函数。</p><p>如果你对C语言的程序栈很了解的话，就会知道形参实际上是不存在的，实参直接拷贝到了寄存器中，所以底层上来说参数都是值拷贝，而且操作结果无法写回到实参，实参稳稳的放在上一个栈帧中从未发生任何变化。具体的细节可以看：<a href="../../../../2018/10/08/程序的机器级表示/#过程调用例子">《CSAPP》读书笔记 — 第3章：程序的机器级表示</a></p></blockquote><h2 id="指针的类型"><a href="#指针的类型" class="headerlink" title="指针的类型"></a>指针的类型</h2><ul><li>对于内存来说，不同类型的指针并没有什么不同。它们都是占用一个word的大小（所以word的大小决定了内存可访问空间的大小，32位系统是4字节，64位系统是8字节），包含一个数字，这个数字代表内存中的一个地址;</li><li>指针的类型是编译器的概念，对于硬件来说，并没有什么指针类型的概念;</li><li>转型操作也只是一种编译器的指令，它改变的是编译器对被指内存的解释方式而已!</li><li><code>void*</code>指针只能够持有一个地址（一个字节），而不能通过它操作所指向的object</li></ul><h2 id="Inside-the-C-Object-Model-系列笔记向导"><a href="#Inside-the-C-Object-Model-系列笔记向导" class="headerlink" title="Inside the C++ Object Model 系列笔记向导"></a>Inside the C++ Object Model 系列笔记向导</h2><ul><li><a href="./">Inside the C++ Object Model 系列笔记 一 — Object Lessons</a></li><li><a href="../Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-constructors">Inside the C++ Object Model 系列笔记 二 — The Semantics of constructors</a></li><li><a href="../../21/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Data">Inside the C++ Object Model 系列笔记 三 — The Semantics of Data</a></li><li><a href="../../23/Inside-the-C++-Object-Model-系列笔记--The-Semantics-of-Function">Inside the C++ Object Model 系列笔记 四 — The Semantics of Function</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 《Inside the C++ Object Model》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
