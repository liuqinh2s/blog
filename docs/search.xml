<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode： 560. 和为K的子数组</title>
      <link href="/blog/2021/05/29/leetcode-560-%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/blog/2021/05/29/leetcode-560-%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这题是在做每日一题中遇到的问题的子问题：<a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/" target="_blank" rel="noopener">1074. 元素和为目标值的子矩阵数量</a></p></blockquote><h2 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560. 和为K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a></h2><p>遇到这类问题，首先想的是复杂度，然后复杂度天然是跟问题规模有关的。遍历一遍肯定是必要的，当我们遍历到第n这个位置，我们怎么判断从0到n中有多少个解，进一步的，我们还只要增量数据，n-1的解不应该去重复计算。第n这个位置上的数是一定要考虑进去的，所以我们从后往前寻找。具体代码如下：</p><a id="more"></a><p>JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraySum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> start = <span class="number">0</span>; start &lt; nums.length; ++start) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> end = start; end &gt;= <span class="number">0</span>; --end) &#123;</span><br><span class="line">            sum += nums[end];</span><br><span class="line">            <span class="keyword">if</span> (sum == k) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样的话，算法的时间复杂度是O(n^2)。有没有重复计算的问题呢，似乎不太好说，但结果是：有，像此类问题有统一的规律，就是我们可以记录前缀和。如果我们知道前缀和，那么我们只需要用当前和减去k，看是否等于某个前缀和，如果有，我们不就正好找到一个子数组的和等于k了吗？所以基于前缀和，我们一次遍历即可解决问题。</p><p>JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraySum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> preRecord = &#123;<span class="number">0</span>: <span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        pre += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(preRecord[pre-k])&#123;</span><br><span class="line">            count += preRecord[pre-k]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preRecord[pre])&#123;</span><br><span class="line">            preRecord[pre]++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            preRecord[pre]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>前缀和对过往的遍历总结提取了信息，使我们不用再去进行重复的计算，是非常重要的技巧。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode： 1074. 元素和为目标值的子矩阵数量</title>
      <link href="/blog/2021/05/29/leetcode-1074-%E5%85%83%E7%B4%A0%E5%92%8C%E4%B8%BA%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E5%AD%90%E7%9F%A9%E9%98%B5%E6%95%B0%E9%87%8F/"/>
      <url>/blog/2021/05/29/leetcode-1074-%E5%85%83%E7%B4%A0%E5%92%8C%E4%B8%BA%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E5%AD%90%E7%9F%A9%E9%98%B5%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个问题需要拆分出子问题才好解决，要不然没有思路。它的子问题是：<a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a></p></blockquote><h2 id="1074-元素和为目标值的子矩阵数量"><a href="#1074-元素和为目标值的子矩阵数量" class="headerlink" title="1074. 元素和为目标值的子矩阵数量"></a><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/" target="_blank" rel="noopener">1074. 元素和为目标值的子矩阵数量</a></h2><p>当你理解了子问题之后，我们来想想，怎么把这个问题转换到子问题上呢？也就是如何把二维问题变一维问题呢？</p><p>我们想象把一个矩阵的列上的元素全部加起来，不就是一个一维数组了吗。这个一维数组可以等效的应用在这个问题上。</p><a id="more"></a><p>那这样的组合有哪些呢？通过简单的二次遍历，就能得出我们想要的组合：</p><p>JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次i到j之间的数就是我们想要的组合，拿这些数的和，组成新的一维数组，然后用一维数组的解法去解。这里有个小技巧是这个和也要避免重复计算，所以要把每次计算所得存下来，下次在这个基础上算，这样可以省下从头开始求和的时间。</p><p>JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; matrix</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numSubmatrixSumTarget = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;matrix.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="keyword">new</span> <span class="built_in">Array</span>(matrix[<span class="number">0</span>].length).fill(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&lt;matrix.length;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;matrix[<span class="number">0</span>].length;k++)&#123;</span><br><span class="line">                sum[k] += matrix[j][k]</span><br><span class="line">            &#125;</span><br><span class="line">            count += subarraySum(sum, target)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subarraySum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> preRecord = &#123;<span class="number">0</span>: <span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        pre += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(preRecord[pre-k])&#123;</span><br><span class="line">            count += preRecord[pre-k]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preRecord[pre])&#123;</span><br><span class="line">            preRecord[pre]++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            preRecord[pre]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>简化问题的办法有很多，比如降低问题规模，降低维度，二维 -&gt; 一维。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode每日一题： 477. 汉明距离总和</title>
      <link href="/blog/2021/05/28/leetcode-477-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/"/>
      <url>/blog/2021/05/28/leetcode-477-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>leetcode每日一题是leetcode中文版官方推出的活动，每日一题锻炼解决问题的思维能力。</p></blockquote><h2 id="477-汉明距离总和"><a href="#477-汉明距离总和" class="headerlink" title="477. 汉明距离总和"></a><a href="https://leetcode-cn.com/problems/total-hamming-distance/" target="_blank" rel="noopener">477. 汉明距离总和</a></h2><p>这题初看上去特别简单，就是一个O(n^2)的遍历（组合），对每一组求汉明距离累加起来。不过我一开始就觉得可能会超时，提交后果然超时了。更优的做法是按位遍历，每一位上所有的数要么是0要么是1，把0和1的个数统计出来，相乘，就是这一位的汉明距离总和。</p><a id="more"></a><p>JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> totalHammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...nums)</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(max&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        max&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> zero = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> one = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">let</span> temp = nums[j]&gt;&gt;i;</span><br><span class="line">            <span class="keyword">if</span>(temp%<span class="number">2</span>)&#123;</span><br><span class="line">                one++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                zero++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res += zero*one;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>position sticky</title>
      <link href="/blog/2021/05/28/position-sticky/"/>
      <url>/blog/2021/05/28/position-sticky/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在做公司项目的过程中遇到一个问题：让表头固定，同时其宽度必须占满整个父元素。用fixed，可以固定但是宽度无法撑开。最终用<code>position: sticky</code>解决了问题。</p></blockquote><p>参考资料：</p><ol><li><a href="https://www.zhangxinxu.com/wordpress/2018/12/css-position-sticky/" target="_blank" rel="noopener">杀了个回马枪，还是说说position:sticky吧« 张鑫旭-鑫空间-鑫生活</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener">position - CSS（层叠样式表） | MDN</a></li></ol><a id="more"></a><h2 id="position-sticky-的作用"><a href="#position-sticky-的作用" class="headerlink" title="position: sticky 的作用"></a>position: sticky 的作用</h2><p>这个坑先放着，等深入研究了再来填，放上codepen试验现场：<a href="https://codepen.io/liuqinh2s/pen/oNZWbeX" target="_blank" rel="noopener">https://codepen.io/liuqinh2s/pen/oNZWbeX</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode每日一题： 1190. 反转每对括号间的子串</title>
      <link href="/blog/2021/05/27/leetcode-1190-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/"/>
      <url>/blog/2021/05/27/leetcode-1190-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写之前：<br>2020年整整一年没有写过博客了，沉痛的一年。<br>写博客还是继续下去吧，不管怎样。</p></blockquote><h2 id="1190-反转每对括号间的子串"><a href="#1190-反转每对括号间的子串" class="headerlink" title="1190. 反转每对括号间的子串"></a><a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/" target="_blank" rel="noopener">1190. 反转每对括号间的子串</a></h2><p>这道题一看就知道用栈来解决，但具体到怎么做却依旧不容易想通。直到看过答案后，才发现，实际上真的只需要遍历一遍就能解决问题。</p><a id="more"></a><p>思路如下：</p><p>每遇到一个括号块，就需要把里面的字符串翻转（这是单步操作），然后递归翻转每一层。这是我们人的思维，但机器是看不到这种宏观信息的，我们需要安排具体到每一步的任务。代码在遍历的时候只会遇到左括号或者右括号，假如我们遇到左括号的时候开始记录字符串，那么在遇到右括号的时候，就有翻转的目标对象了。但如果连续遇到两个左括号呢？我们将记录的信息先入栈，然后继续上面的步骤即可。</p><p>具体步骤（单步）：</p><ol><li>遇到左括号：入栈已记录的字符串，清空我们用于记录的变量</li><li>遇到普通字符：记录</li><li>遇到右括号：翻转记录的字符串，将栈顶字符串pop出来拼接上翻转好的字符串</li></ol><p>JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseParentheses = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)&#123;</span><br><span class="line">            stack.push(str)</span><br><span class="line">            str = <span class="string">''</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">            str = stack.pop() + <span class="built_in">Array</span>.from(str).reverse().join(<span class="string">''</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            str += s[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>后记：这是新年的第一篇博客，以后会做更多的记录，不管有没有人看。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图灵机</title>
      <link href="/blog/2019/04/26/%E5%9B%BE%E7%81%B5%E6%9C%BA/"/>
      <url>/blog/2019/04/26/%E5%9B%BE%E7%81%B5%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="图灵机"><a href="#图灵机" class="headerlink" title="图灵机"></a><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA" target="_blank" rel="noopener">图灵机</a></h2><p>图灵机（Turing Machine）是 <a href="https://zh.wikipedia.org/wiki/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5" target="_blank" rel="noopener">英国数学家艾伦·图灵</a> 在1936年发表的 &quot;<a href="https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf" target="_blank" rel="noopener">On Computable Numbers, with an Application to the Entscheidungsproblem</a>&quot;（《论可计算数及其在判定性问题上的应用》）中提出的数学模型。在文章中图灵描述了它是什么，并且证明了，只要图灵机可以被实现，就可以用来解决任何可计算问题。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li><a href="https://www.bilibili.com/video/av30479683?from=search&amp;seid=11735601712045998475" target="_blank" rel="noopener">妈咪说：图灵</a></li><li><a href="https://movie.douban.com/subject/10463953/" target="_blank" rel="noopener">模仿游戏</a></li></ul><a id="more"></a><h3 id="图灵机的基本思想"><a href="#图灵机的基本思想" class="headerlink" title="图灵机的基本思想"></a>图灵机的基本思想</h3><p>图灵机是一种 <strong>抽象计算模型</strong>，图灵机的构成：</p><ul><li>一条无限长的纸带，纸带由很多个格子构成，用于输入输出信息。每个格子中包含一个来自有限字母表的符号，字母表中有一个特殊符号表示空白。纸带上一端的格子从0开始编号，另一端无限延伸一直到无穷大。</li><li>一个读写头，用于读写纸带</li><li>一个状态寄存器，用于保存机器状态。图灵机的状态个数有限，并且有一个特殊的状态：停机状态</li><li>一套控制规则，根据当前机器状态和纸带内容来确定下一步的动作：<ul><li>写入或擦除当前格子内容</li><li>移动读写头，向左、向右、或不动</li><li>保持当前状态或转移到另一状态</li></ul></li></ul><h3 id="图灵机的正式定义"><a href="#图灵机的正式定义" class="headerlink" title="图灵机的正式定义"></a>图灵机的正式定义</h3><p>a (one-tape) Turing machine can be formally defined as a <strong>7-tuple</strong> $M=\langle Q,\Gamma ,b,\Sigma ,\delta ,q_{0},F\rangle $   where</p><ul><li>$Q$ is a finite, non-empty set of <strong>states</strong>;</li><li>$\Gamma$  is a finite, non-empty set of <strong>tape alphabet symbols</strong>;</li><li>$b\in \Gamma$  is the <strong>blank symbol</strong> (the only symbol allowed to occur on the tape infinitely often at any step during the computation);</li><li>$\Sigma \subseteq \Gamma \setminus {b}$ is the set of <strong>input symbols</strong>, that is, the set of symbols allowed to appear in the initial tape contents;</li><li>$q_{0}\in Q$ is the <strong>initial state</strong>;</li><li>$F\subseteq Q$ is the set of <strong>final states or accepting states</strong>. The initial tape contents is said to be accepted by $M$ if it eventually halts in a state from $F$.</li><li>$\delta :(Q\setminus F)\times \Gamma \not \to Q\times \Gamma \times \{L,R\}$ is a partial function called the <strong>transition function</strong>, where L is left shift, R is right shift. (A relatively uncommon variant allows &quot;no shift&quot;, say N, as a third element of the latter set.) If $\delta$ is not defined on the current state and the current tape symbol, then the machine <strong>halts</strong>;</li></ul><h3 id="图灵机的实践"><a href="#图灵机的实践" class="headerlink" title="图灵机的实践"></a>图灵机的实践</h3><ul><li><a href="https://zh.wikipedia.org/wiki/Brainfuck" target="_blank" rel="noopener">Brainfuck</a></li></ul><h3 id="图灵完备"><a href="#图灵完备" class="headerlink" title="图灵完备"></a>图灵完备</h3><p>只要能模拟单带图灵机，就是图灵完备的。这也意味着其计算能力与通用图灵机等同。</p><p>不是图灵完备的的常见情况有；</p><ol><li>递归或循环有限，无法写不终止的程序，如<code>while(true){}</code></li><li>无法实现类似数组或列表这样的数据结构（不能模拟纸带）</li></ol><p>图灵完备也有可能带来坏处，不图灵完备也不是完全没用，比如：有些场景我们需要限制语言的表达能力，如 限制无限循环和递归，保证我们的程序一定是可终止的。</p><h3 id="停机问题"><a href="#停机问题" class="headerlink" title="停机问题"></a><a href="https://zh.wikipedia.org/wiki/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">停机问题</a></h3><p>停机问题（英语：halting problem）是逻辑数学中可计算性理论的一个问题。通俗地说，停机问题就是判断任意一个程序是否能在有限的时间之内结束运行的问题。该问题等价于如下的判定问题：是否存在一个程序P，对于任意输入的程序w，能够判断w会在有限时间内 <strong>结束或者死循环</strong>。</p><p>艾伦·图灵在1936年用 <a href="https://zh.wikipedia.org/wiki/%E5%B0%8D%E8%A7%92%E8%AB%96%E8%AD%89%E6%B3%95" target="_blank" rel="noopener">对角论证法</a> 证明了，不存在解决停机问题的通用算法。</p><blockquote><p>停机问题包含了 <a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E6%8C%87" target="_blank" rel="noopener">自我指涉</a>，本质是 <a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91" target="_blank" rel="noopener">一阶逻辑</a> 的不完备性，类似的命题有 <a href="https://zh.wikipedia.org/wiki/%E7%90%86%E5%8F%91%E5%B8%88%E6%82%96%E8%AE%BA" target="_blank" rel="noopener">理发师悖论</a>、<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E8%83%BD%E6%82%96%E8%AB%96" target="_blank" rel="noopener">全能悖论</a> 等。</p></blockquote><p>证明很简单，构造<code>G=~G</code>命题（G等于G非），让逻辑崩溃，无论G是真还是假，都是错的，最后推导出：不存在这样的G。</p><p>停机问题证明过程（反证法）：</p><ol><li>如果存在可以判定任意程序是否停机的程序，我们姑且称它为 <strong>上帝程序</strong></li><li>那我们定义这样一个程序，它利用上帝程序判断自己是否停机，但如果上帝程序输出停机，它就不停；如果上帝程序输出不停机，它就停机（就是反着干）。这样一来无论上帝程序输出什么，上帝程序都是错的。那么我们只能说不存在这样的上帝程序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_halt</span><span class="params">(program, input)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> program halts on input:</span><br><span class="line">        <span class="keyword">return</span> true</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck_is_halt</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_halt(fuck_is_halt):</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://www.matrix67.com/blog/archives/901" target="_blank" rel="noopener">Matrix67：停机问题、Chaitin常数与万能证明方法</a></li><li><a href="https://blog.csdn.net/pongba/article/details/1336028" target="_blank" rel="noopener">刘未鹏：康托尔、哥德尔、图灵——永恒的金色对角线(rev#2)</a></li></ul><h3 id="自我指涉"><a href="#自我指涉" class="headerlink" title="自我指涉"></a><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E6%8C%87" target="_blank" rel="noopener">自我指涉</a></h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Ouroboros.png/220px-Ouroboros.png" alt="自我指涉"></p><p>在数学中，对自指的研究最终导致了著名的 <a href="https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">哥德尔不完备定理</a>。</p><blockquote><p>计算机程序中的自指主要是为 <a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" target="_blank" rel="noopener">递归</a></p></blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E7%BD%97%E6%96%AF%E7%89%B9%E6%95%88%E5%BA%94" target="_blank" rel="noopener">德罗斯特效应</a>：</p><p>我们经常可以在主播间看到类似的画面：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b3/Screenshot_Recursion_via_vlc.png/128px-Screenshot_Recursion_via_vlc.png" alt="德罗斯特效应"></p><p>也可以用两面镜子自己做这个实验。</p><ul><li><a href="https://www.bilibili.com/video/av31411706?from=search&amp;seid=7703410137961337640" target="_blank" rel="noopener">妈咪说：哥德尔</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>冯·诺依曼结构</title>
      <link href="/blog/2019/04/22/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/"/>
      <url>/blog/2019/04/22/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="冯·诺依曼结构"><a href="#冯·诺依曼结构" class="headerlink" title="冯·诺依曼结构"></a><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">冯·诺依曼结构</a></h2><p>冯·诺伊曼结构与 <strong>存储程序型计算机</strong> 是互相通用的名词</p><blockquote><p><strong>哈佛结构</strong> 是一种将程序数据与普通数据分开存储的设计概念，可以说是冯·诺依曼结构的一种。</p></blockquote><p>存储程序计算机在体系结构上主要特点有：</p><ul><li>以运算单元为中心</li><li><strong>采用存储程序原理</strong></li><li>存储器是按地址访问、线性编址的空间</li><li><strong>控制流由指令流产生</strong></li><li>指令由 <strong>操作码</strong> 和 <strong>地址码</strong> 组成</li><li>数据以二进制编码</li></ul><p>五个组成部分：</p><ul><li>存储器</li><li>控制器</li><li>运算器（算术逻辑单元）</li><li>输入</li><li>输出</li></ul><a id="more"></a><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li><a href="https://www.weibo.com/p/1001603799832564268572" target="_blank" rel="noopener">文明之光：电子计算机的发明－从图灵到冯诺依曼（上）</a></li><li><a href="http://blog.sina.com.cn/s/blog_ac194d320102vdzu.html" target="_blank" rel="noopener">文明之光：冯诺依曼系统结构和电子计算机的发明（下）</a></li><li><a href="https://www.bilibili.com/video/av30558057?from=search&amp;seid=11377470098091075406" target="_blank" rel="noopener">妈咪说：过目不忘的天才——冯诺依曼的传奇人生 他为何被称作通用计算机之父？</a></li><li><a href="https://www.youtube.com/watch?v=WTbZRcW_iTM" target="_blank" rel="noopener">冯·诺依曼</a></li></ul><blockquote><p>冯·诺依曼由于在曼哈顿工程中需要大量的运算，从而使用了当时最先进的两台计算机 Mark I 和 ENIAC，在使用 Mark I 和 ENIAC 的过程中，他意识到了存储程序的重要性，从而提出了存储程序逻辑架构。</p></blockquote><p>最早的计算机内含固定用途的程序，并非可编程，若想要改变此机器的程序，你必须更改线路、更改结构甚至重新设计机器。而存储程序型计算机的概念改变了这一切。借着将指令当成一种特别类型的静态数据，一台存储程序型计算机可轻易改变其程序，并在程序控制下改变其运算内容。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>冯·诺依曼架构第一次 <strong>将存储器和运算器分开</strong>，指令和数据均放置于存储器中，为计算机的 <strong>通用性</strong> 奠定了基础。虽然在规范中计算单元依然是核心，但冯·诺依曼架构事实上导致了 <strong>以存储器为核心</strong> 的现代计算机的诞生。</p><blockquote><p>注：请各位在心里明确一件事情：存储器指的是内存，即 RAM。磁盘理论上属于输入输出设备。</p></blockquote><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ol><li><strong>程序可修改很可能是非常具伤害性的</strong>：在一个简单的存储程序型计算机上，一个设计不良的程序可能会伤害自己、其他程序甚或是操作系统，导致死机、缓存溢出就是一个典型例子。而创造或更改其他程序的能力也导致了恶意软件的出现。利用缓存溢出，一个恶意程序可以覆盖调用堆栈（Call stack）并改写代码，并且修改其他程序文件以造成连锁破坏。存储器保护机制及其他形式的访问控制可以保护意外或恶意的代码更动。</li><li><strong>冯·诺伊曼瓶颈（von Neumann bottleneck）</strong>：在内存容量指数级提升以后，CPU 和内存之间的数据传输带宽成为了瓶颈。缓解的办法有：<ol><li>在CPU和内存之间提供cache（缓存，速度比内存快很多倍）</li><li>将数据和指令分开存储并能够做到同时访问（在一般的冯·诺依曼结构中数据和指令放在同一内存通过同一数据总线访问，取数据和取指令不能同时进行，而哈佛结构则是将数据和指令分开，可同时访问）</li><li>分支预测和流水线</li></ol></li></ol><blockquote><p>实际上，绝大多数现代计算机使用的是所谓的“Modified Harvard Architecture”，指令和数据共享同一个 address space，但缓存是分开的。在内存里，指令和数据是在一起的。而在CPU内的缓存中，还是会区分指令缓存和数据缓存，最终执行的时候，指令和数据是从两个不同的地方出来的。你可以理解为在CPU外部，采用的是冯诺依曼模型，而在CPU内部用的是哈佛结构。</p></blockquote><blockquote><p>大部分的<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E8%A8%8A%E8%99%9F%E8%99%95%E7%90%86%E5%99%A8" target="_blank" rel="noopener">DSP</a>都没有缓存，因而直接就是哈佛结构。</p></blockquote><p><img src="https://i.loli.net/2019/04/22/5cbd7fbac175d.png" alt="TIM图片20190422164727.png"></p><p>上图是 i9-7980XE 18 核 36 线程的民用最强 CPU，其配合超频过的 DDR4 3200MHz 的内存，测试出的内存读取速度为 90GB/S。看起来很快了是不是？看看图中的 L1 Cache，3.7TB/S。</p><p>我们再来算算时间。这颗 CPU 最大睿频 4.4GHz，就是说 CPU 执行一个指令需要的时间是 0.000000000227273 秒，即 0.22ns（纳秒），而内存的延迟是 68.1ns。换句话说，只要去内存里取一个字节，就需要 CPU 等待 300 个周期，何其的浪费 CPU 的时间啊。</p><p>CPU L1 L2 L3 三级缓存是使用和 CPU 同样的 14 纳米工艺制造的硅半导体，每一个 bit 都使用六个场效应管（通俗解释成三极管）构成，成本高昂且非常占用 CPU 核心面积，故不能做成很大容量。</p><p>除此之外，L1 L2 L3 三级缓存对计算机速度的提升来源于计算机内存的「局部性」，相关内容我们之后会专门讨论。</p><p><a href="https://zh.wikipedia.org/zh-hans/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8" target="_blank" rel="noopener">RAM</a>（Random Access Memory，俗称 <strong>内存</strong>）：内存最大的特点是：<strong>掉电失去数据</strong>。程序是静态的文件存放在外存中，进程正在运行的程序，进程存放在内存中。我们之所以使用内存是因为内存的速度比外存快100倍左右。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%94%AF%E8%AE%80%E8%A8%98%E6%86%B6%E9%AB%94" target="_blank" rel="noopener">ROM</a>（Read-Only Memory，只读存储器）：<strong>ROM掉电不失去数据</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是字符集和编码</title>
      <link href="/blog/2019/04/21/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/"/>
      <url>/blog/2019/04/21/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>文本文件中，为了让比特表示文字，我们发明了字符集，让特定的比特序列对应特定的字符。</p><p>常见的字符集有：</p><ul><li><a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a></li><li><a href="https://zh.wikipedia.org/wiki/EASCII" target="_blank" rel="noopener">EASCII</a></li><li><a href="https://zh.wikipedia.org/wiki/GB_2312" target="_blank" rel="noopener">GB2312</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">GBK</a></li><li><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a></li><li><a href="https://zh.wikipedia.org/zh/UTF-8" target="_blank" rel="noopener">UTF-8</a> （严格来说UTF-8只是Unicode的一种编码方式）</li><li><a href="https://baike.baidu.com/item/ANSI%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">ANSI编码</a></li></ul><a id="more"></a><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>计算机诞生于美国，因此最早的时候，人们只需要表示英文26个字符在内的少数字符，用半个字节就可以表示完这些字符。这就是ASCII字符集，最高位为0，其余7位可以表示的范围是：<code>0~127</code>。总共128个字符。</p><p>ASCII字符分为：<strong>控制字符</strong>（不可显示） 和 <strong>可显示字符</strong></p><p>其中，0x20以下为控制字符，不可显示。比如，0x10表示换行，0x07表示发声。另外还有个特殊的控制字符：0x7f表示删除，所以总共是33个控制字符，95个可显示字符。</p><h2 id="EASCII"><a href="#EASCII" class="headerlink" title="EASCII"></a>EASCII</h2><p>欧洲国家使用计算机之后，也有了创建字符集的需求，于是对ASCII进行扩展，使用了剩下一半字节的空间，<code>0x80 - 0xff</code>的定义就被填充成了希腊字母，罗马字母等符号。</p><p>此时，编码依旧控制在8位以内，相安无事。</p><h2 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h2><blockquote><p>GB是国标的意思</p></blockquote><p>中国开始使用计算机，于是有了这个字符集，由于中文是象形文字，如果每个字符一个键的话，肯定放不下：</p><p><img src="https://i.loli.net/2019/04/21/5cbc05ae5526e.jpg" alt="1555825210135.jpg"></p><p>但我们有拼音，所以直接用美国键盘就行了。</p><p>GB2312共收录了6763个汉字，其中一级汉字3755个，二级汉字3008个。它所收录的汉字已经覆盖中国大陆99.75%的使用频率。</p><p>GB2312的基本思想很简单，如果一个字符值为127及以下，那它就是一个单字节字符，和ASCII兼容；如果一个字符值为127以上，那它和后面的那个字符组成一个汉字。（同时，后面那个字符也一定是127以上的）</p><p>通过这个方式，我们扩展出来了7000+的简体汉字，同时还把日本假名，罗马希腊字母，数学符号也容纳了进来。</p><p>同时还产生了一个新的概念，全角字符：ASCII码里本身有的字符，也被我们扩展成了双字节字符。为了区分，前者称为半角字符，后者称为全角字符。比如逗号、冒号、引号等等都有半角和全角之分。</p><p>至此，中文也可以在计算机上表示了。</p><h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><blockquote><p>K是扩展的意思</p></blockquote><p>7000个简体汉字并不能把汉字穷举了，一些生僻字并不包含在GB2312里。</p><p>GB2312表示，我可能还可以抢救一下，我还有另一半的潜力没有发挥呢！</p><p>这另一半的潜力就是，第二个字节的<code>0x00 - 0x7f</code>部分。这部分空出来，是由于GB2312表示汉字时，要求两个字节都是在<code>0x80 - 0xff</code>范围内的。</p><p>填上这部分的空档之后，再生僻的字也被表示出来了，同时，我们还考虑到港澳台同胞的感受，包含了繁体字，一共大概增加了20k的汉字和符号。</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>随着时间的推移，互联网的兴起，不止海峡两岸，全世界范围内共建一个字符集的呼声越来越高。</p><p>Unicode，统一了所有地区的字符，且还在不断扩充中。Unicode编码系统可分为 <strong>编码方式</strong> 和 <strong>实现方式</strong> 两个层次。Unicode的实现方式称为Unicode转换格式（Unicode Transformation Format，简称为UTF）</p><blockquote><p>UTF-8兼容ASCII，UTF-16不兼容ASCII。</p></blockquote><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>前面说的都是字符集，UTF-8却是一种编码方式，因为它并不是去做字符集的事情，而是为的便于Unicode码的传输和存储而生的。UTF-8兼容ASCII编码，所以应用非常广泛，几乎已经是互联网标准。</p><p>与其他的编码方式（如哈夫曼编码）的思想一致，UTF-8的原则就是，使用不定长字节（1-6字节）来表达一个字符，使用频率越高的字符，字节数越少。这样就能最大程度上节约空间。具体的编码方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单字节字符：</span><br><span class="line">    以0开头，后面7位表示字符，事实上，UTF-8的单字节字符就是ASCII字符，完美兼容；</span><br><span class="line">n字节字符：</span><br><span class="line">    第一个字节的前n位为1，第n+1位为0。读到此字节时，可以方便的知道后续多少字节是用来表示一个字符；</span><br><span class="line">    其余字节，以10开头。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Unicode符号范围 | UTF-8编码方式</span><br><span class="line">(十六进制) | （二进制） </span><br><span class="line">—————————————————————– </span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx </span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx </span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx </span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><blockquote><p>实际上从第二行对照开始，就存在空间浪费，因为右边的x的位数足够用来表示0到左边的第二个数所表示范围内的所有数，每行浪费的空间大小是左边的第一个数。</p></blockquote><p>UTF-8和Unicode是一一对应的，对于常用汉字，基本上都是占用3个字节，生僻汉字可能占用到6个字节。对于GB2312和GBK来讲，UTF-8无疑造成了浪费，所以，UTF-8可以说是对英文友好，但对中文不友好的一种编码方式。所以在中文界，GB2312与GBK依旧有自己的市场。</p><h2 id="ANSI编码"><a href="#ANSI编码" class="headerlink" title="ANSI编码"></a>ANSI编码</h2><p>ANSI 并不是确定的一种编码，在简体中文操作系统指的是 GB2312，在繁体操作系统指的是 BIG5。</p><p>Windows 里说的「ANSI」其实是 Windows code pages，这个模式根据当前 locale 选定具体的编码，比如简中 locale 下是 GBK。把自己这些 code page 称作「ANSI」是 Windows 的臭毛病。在 ASCII 范围内它们应该是和 ASCII 一致的。</p><h2 id="字符集（character-set）与编码（encoding）的区别"><a href="#字符集（character-set）与编码（encoding）的区别" class="headerlink" title="字符集（character set）与编码（encoding）的区别"></a>字符集（character set）与编码（encoding）的区别</h2><p>对于 ASCII、GB 2312、Big5、GBK、GB 18030 之类的遗留方案来说，基本上一个字符集方案只使用一种编码方案。</p><p>比如 ASCII 这部标准本身就直接规定了字符和字符编码的方式，所以既是字符集又是编码方案；而 GB 2312 只是一个区位码形式的字符集标准，不过实际上基本都用 EUC-CN 来编码，所以提及「GB 2312」时也说的是一个字符集和编码连锁的方案；GBK 和 GB 18030 等向后兼容于 GB 2312 的方案也类似。</p><p>于是，很多人受这些遗留方案的影响而无法理解字符集和编码的关系。</p><p>对于 Unicode，字符集和编码是明确区分的。Unicode/UCS 标准首先是个统一的字符集标准。而 Unicode/UCS 标准同时也定义了几种可选的编码方案，在标准文档中称作「encoding form」，主要包括 UTF-8、UTF-16 和 UTF-32。</p><p>所以，对 Unicode 方案来说，同样的基于 Unicode 字符集的文本可以用多种编码来存储、传输。所以，用「Unicode」来称呼一个编码方案不合适，并且误导。</p><h2 id="字节顺序标记（BOM）"><a href="#字节顺序标记（BOM）" class="headerlink" title="字节顺序标记（BOM）"></a><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F" target="_blank" rel="noopener">字节顺序标记（BOM）</a></h2><p>这里涉及到一个 <strong><a href="../../../../2019/04/21/计算机中的信息/#字节序">字节序</a></strong> 的概念，请先了解这个概念。</p><p>BOM（Byte-Order Mark）:一种为了跨平台设计的文件起始标记，但很多程序没去处理这个，用了BOM反而常造成问题。</p><p>在UTF-16中，字节顺序标记被放置为文件或字符串流的第一个字符，以标示字节顺序。</p><ul><li>大端：0xFEFF</li><li>小端：0xFFFE</li></ul>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机中的信息</title>
      <link href="/blog/2019/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
      <url>/blog/2019/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="信息的本质"><a href="#信息的本质" class="headerlink" title="信息的本质"></a>信息的本质</h2><p><strong>信息的本质是消除不确定性</strong>：我们抛掷一枚硬币，然后用手盖住，出现正面朝上和反面朝上的概率都是二分之一。当我们偷看了结果，确定了是正面还是反面朝上，也就获得了信息。在这个例子中，我们消除的不确定性是一个二分之一的概率。在 <strong><a href="https://zh.wikipedia.org/zh-hans/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C" target="_blank" rel="noopener">香农</a></strong> 划时代的论文 <strong><a href="http://math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf" target="_blank" rel="noopener">通信的数学原理</a></strong> 中，首次提出了信息是可量化的，以及如何量化信息。我们以bit为信息的度量单位，一个bit可以是0或者1，我们每获得一个bit的信息，就会消除一个二分之一的不确定性。</p><blockquote><p>小思考题：如果我们抛掷的是一个骰子呢，当我们确定了一次投掷结果，我们获得多少信息（用bit为单位衡量）？<br>我们都知道，骰子有6个面，分别刻有1~6，我们有六分之一的概率得到其中任意一个面朝上。那么我们获得的信息应该是：$\log_2 6$。</p></blockquote><a id="more"></a><h2 id="信息计量单位"><a href="#信息计量单位" class="headerlink" title="信息计量单位"></a>信息计量单位</h2><p>比特（bit）：我们现在所使用的计算机都是二进制的电子计算机，每个bit非0即1。之所以使用二进制是因为物理上容易实现，<strong>高电压或低电压</strong>。</p><p>字节（byte）：在计算机中为了方便的管理内存，我们以8个比特为一个单位，这个单位叫做字节。</p><blockquote><p>在你购买宽带的时候，比如100M宽带，指的是100Mb/s，换算成字节为单位的速度：$\frac{100Mb/s}{8}=12.5MB/s$。所以我们发现下载速度通常没有听起来那么夸张，因为下载的文件通常是以字节为单位的，而运营商口中的100M指的是以比特为单位的速度。</p></blockquote><p>K、M、G：这三个是最常见的倍数单位，可以用来搭配b（bit）或者B（Byte）。它们都是词根的缩写，K是Kilo，表示$2^{10}$ ；M是Mega，表示$2^{20}$ ；G是Giga，表示$2^{30}$ 。</p><blockquote><p>其实在一般的场合中，K表示$10^3$，M表示$10^6$，G表示$10^9$。而我们看到上面都是以<code>1024</code>倍递增（$2^{10}=1024$），是1000的近似。在你购买硬盘的时候，厂商却是使用1000这一套进率的。比如100GB的硬盘，其实际容量只有：$\frac{100\times1000^3}{1024^3}=93.13GB$。而内存则是用1024进率算的，1GB的内存就是$2^{30}$个字节，因为采用地址总线寻址，寻址空间必须是$2^n$，否则就会造成内存浪费或者定位到一个不存在的内存。</p></blockquote><p>T、P：这两个如果你是程序员的话会比较常见。T是Tera，$2^{40}$；P是Peta，$2^{50}$。</p><blockquote><p>往上走还有几个单位，但几乎没机会碰到：<br>1EB（Exabyte 百亿亿字节 艾字节）=1024PB，<br>1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,<br>1YB (Yottabyte 一亿亿亿字节 尧字节)= 1024 ZB,<br>1BB (Brontobyte 一千亿亿亿字节)= 1024 YB.</p></blockquote><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p><strong>信息是bit位+上下文</strong>（这里的信息可以理解为：人能读懂的有意义的信息），比特位中的信息可以根据上下文被任意地解读。举个例子，这里有一个<code>hello.c</code>文件，文件内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果以 <strong><a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII编码</a></strong> 的话，每个字节的内容如下：</p><p><img src="https://i.loli.net/2019/04/21/5cbbc51c0887c.png" alt="一份C程序的ASCII码表示.png"></p><ul><li>文本文件：内容是文本，文本文件都会采用一种特定的编码方式</li><li>二进制文件：除去文本文件，其他的都是二进制文件</li></ul><blockquote><p>如果你碰到过乱码问题，那么可以尝试了解一下：<a href="../../../../2019/04/21/什么是字符集和编码/">什么是字符集和编码</a></p></blockquote><p>Windows记事本的bug（具体原因可以自己上网查）：</p><ul><li>新建一个文本文件，输入“写”，保存之后再打开，乱码<code>д</code>。</li><li>新建一个文本文件，输入“联通”，保存之后再打开，乱码<code>��ͨ</code>。</li></ul><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>计算机的内存地址是按字节编号，比如4GB的内存，它的内存地址从0到$2^{30}$，这里有个问题就是多字节的数据如何确定存放顺序。有的计算机采用 <strong>大端</strong> 有的则采用 <strong>小端</strong>。</p><p>假设我有一个int型数（4字节）：0x29 16 10 57</p><p>29是高位，57是低位，如果高位存放的内存地址也是高地址，那么我们就称之为 <strong>大端</strong> 字节序。反之就是 <strong>小端</strong> 字节序。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ map的remove函数实现</title>
      <link href="/blog/2019/04/15/C++%20map%E7%9A%84remove%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2019/04/15/C++%20map%E7%9A%84remove%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>今天同学群里面讨论了这样一段代码，说是产品出了bug，现场急着修复。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; mapPeople;</span><br><span class="line">    mapPeople[<span class="number">1</span>] = <span class="string">"hexu1"</span>;</span><br><span class="line">    mapPeople[<span class="number">2</span>] = <span class="string">"hexu2"</span>;</span><br><span class="line">    <span class="comment">// mapPeople[3] = "hexu3";</span></span><br><span class="line">    <span class="comment">// mapPeople[4] = "hexu4";</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt;::iterator iter = mapPeople.begin();</span><br><span class="line">    <span class="keyword">for</span> (; iter != mapPeople.end(); iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (iter-&gt;first == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"id : "</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">", name : "</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            mapPeople.erase(iter++);</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (iter != mapPeople.end()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//for (; iter != mapPeople.end();)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//if (iter-&gt;first == 2)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; "id : " &lt;&lt; iter-&gt;first &lt;&lt; ", name : " &lt;&lt; iter-&gt;second &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">//mapPeople.erase(iter++);</span></span><br><span class="line">    <span class="comment">//if (iter == mapPeople.end())</span></span><br><span class="line">    <span class="comment">//break;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//iter++;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    getchar();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说是第一个for循环会崩溃，第二个for循环可以通过。经过分析，主要问题其实是出在对迭代器和erase的不熟悉上，导致错误的使用，这个程序的错误很明显，就是在erase这条分支中，iter++了两次。那么如何写一个正确的remove函数呢？代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; mapPeople;</span><br><span class="line">    mapPeople[<span class="number">1</span>] = <span class="string">"hexu1"</span>;</span><br><span class="line">    mapPeople[<span class="number">2</span>] = <span class="string">"hexu2"</span>;</span><br><span class="line">    mapPeople[<span class="number">3</span>] = <span class="string">"hexu3"</span>;</span><br><span class="line">    mapPeople[<span class="number">4</span>] = <span class="string">"hexu4"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt;::iterator iter = mapPeople.begin();</span><br><span class="line">    <span class="keyword">while</span> (iter != mapPeople.end())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (iter-&gt;first == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"id : "</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">", name : "</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            iter = mapPeople.erase(iter);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iter++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，碰到删除的时候，要小心，可以这么写：<code>iter = mapPeople.erase(iter);</code>，也可以这么写：<code>mapPeople.erase(iter++);</code>（必须在删除前给迭代器++，否则迭代器会失效，这个问题那位程序员倒是考虑到了）。</p><p>最后我想说的一点是，根据指定key删除map中的元素，这个功能在其他语言中都有库函数可以调用，而C++却没有，还要自己动手写，而且需要对map的原理有一定的了解。这就从侧面反映了C++可能并不是一个高效的生产工具。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo把英文引号渲染成中文引号的问题</title>
      <link href="/blog/2019/04/15/hexo%E6%8A%8A%E8%8B%B1%E6%96%87%E5%BC%95%E5%8F%B7%E6%B8%B2%E6%9F%93%E6%88%90%E4%B8%AD%E6%96%87%E5%BC%95%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2019/04/15/hexo%E6%8A%8A%E8%8B%B1%E6%96%87%E5%BC%95%E5%8F%B7%E6%B8%B2%E6%9F%93%E6%88%90%E4%B8%AD%E6%96%87%E5%BC%95%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>其实这个问题我早就发现了，但一直没太在意，今天写博客的时候又看到这个难看的引号，终于忍不住想看看到底出了什么问题。</p><p>首先我试了中文的单引号和英文的单引号，发现渲染效果都一样，然后想看看当我分别打中文单引号和英文单引号的时候，hexo的渲染结果到底是不是一样。</p><p>打开chrome开发工具，发现页面上的英文单引号统一被渲染成了中文的单引号。</p><p>然后我手动修改页面看了下英文单引号是什么样子，发现样式确实很不一样。</p><p>那么问题就确定了：hexo把英文引号渲染成了中文引号。</p><a id="more"></a><p>谷歌搜了一下：<code>hexo 渲染 单引号 中文单引号</code>，得到几条不错的结果：</p><ul><li><a href="https://github.com/hexojs/hexo/issues/1981" target="_blank" rel="noopener">求助：单引号显示异常 #1981</a></li><li><a href="https://github.com/theme-next/hexo-theme-next/issues/462" target="_blank" rel="noopener">6.4.0版本之后的两个问题 #462</a></li></ul><p>对于我所使用的<code>kramed</code>，只需要在<code>_config.yml</code>中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kramed:</span><br><span class="line">  smartypants: false</span><br></pre></td></tr></table></figure><p>问题的原因是markdown渲染器把英文引号渲染成了中文引号，但这其实是可以配置的，所以解决起来比较简单。</p><p>在解决这个问题的过程中，如果你想顺利的解决问题，你需要的知识点有：</p><ul><li><strong>字符集的知识</strong></li><li><strong>Chrome开发工具使用经验</strong></li><li><strong>前端开发知识</strong></li><li><strong>好的搜索习惯</strong></li><li><strong>一定的英语水平</strong></li><li><strong>查阅文档的意识和习惯</strong></li></ul><p>如果你已经具备了以上前提，那么就能比较轻松愉快的解决这个问题了。</p>]]></content>
      
      
      <categories>
          
          <category> Fixed Issues </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态数组的分摊分析</title>
      <link href="/blog/2019/03/03/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%86%E6%91%8A%E5%88%86%E6%9E%90/"/>
      <url>/blog/2019/03/03/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%86%E6%91%8A%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>动态数组在每次容量用尽时，重新申请2倍于当前数组的空间，并将原数组中的内容拷贝到新的空间，然后释放原数组的内存空间。对于动态数组，每次插入的花费有两种情况：</p><ol><li>容量够用，我们只需要存储新的元素</li><li>容量不够用，创建新的空间，拷贝原数组进新的空间，再存储这个新的元素</li></ol><p>分析方法有许多，统称为：amortized analysis（分摊分析）</p><a id="more"></a><p><a href="https://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec21-amortized/lec21.html" target="_blank" rel="noopener">Lecture 21: Amortized Analysis</a></p><h3 id="统计分析（aggregate-method）"><a href="#统计分析（aggregate-method）" class="headerlink" title="统计分析（aggregate method）"></a>统计分析（aggregate method）</h3><p>把n词操作花费求和，然后取平均值。</p><p>每次扩容时，后半部分元素统一进行第一次移动，而这些元素之后的所有移动操作也是一起发生的，因而我们发现元素是以组为单位，组内的元素移动次数相同。那么有多少个这种组呢？第一组是单个元素，第二组也是单个元素，第三组是两个元素，第四组是四个元素，第五组是8个元素，... ，以此类推。而：</p><p>$$<br>1 + 1 + 2+ 2^2 + \cdots + 2^i = n<br>$$</p><p>$$<br>i = \log_2 n -1<br>$$</p><p>而这些组的移动次数分别是多少呢？最后一组元素只移动一次，倒数第二组元素移动2次，以此类推。所以总的移动次数是：</p><p>$$<br>1\times 2^i+2\times 2^{i-1}+3\times 2^{i-2}+\cdots+k\times 1<br>$$</p><p>$$<br>k = \log_2n + 1<br>$$</p><p>这个式子挺有规律的，我们可以将其分为很多个组，第一组是：</p><p>$$<br>1 + 1 + 2+ 2^2 + \cdots + 2^i = n<br>$$</p><p>第二组是：</p><p>$$<br>1 + 1 + 2+ 2^2 + \cdots + 2^{i-1} = \frac{n}{2}<br>$$</p><p>以此类推。</p><p>于是我们得到上式的等价表示：</p><p>$$<br>n + \frac{n}{2} + \cdots + 1 = 2n-1<br>$$</p><p>所以移动的平均次数是：$\frac{2n-1}{n}$，也就是每个元素最多移动2次，加上插入操作，最多三个操作。</p><h3 id="银行算法（banker-method）"><a href="#银行算法（banker-method）" class="headerlink" title="银行算法（banker method）"></a>银行算法（banker method）</h3><p>对动态数组的插入来说，大部分（后半部分）插入操作是不需要重新分配内存的，是廉价的操作。而少部分操作是需要重新分配内存的，是复杂的操作。我们可以试着想象在每次廉价操作的时候存储额外的费用，相当于存款，来支付复杂操作的费用。</p><p>我们假设一次基本的操作费用是一个硬币，当我们插入了一个下标为n的元素时：</p><ol><li>我们要花费第一个硬币，作为基本的插入操作花费</li><li>我们还要存储第二个硬币，作为新插入的n在重新分配内存时移动它的费用</li><li>最后我们要存储第三个硬币，作为数组的前半部分的某个对应元素重新分配内存时移动费用</li></ol><p>这样来计算，每个插入操作最多需要付出三个硬币，而第一个元素是不需要第三个硬币的。所以费用总数是：3n-1。</p><h3 id="势能算法（Potential-Method）"><a href="#势能算法（Potential-Method）" class="headerlink" title="势能算法（Potential Method）"></a>势能算法（Potential Method）</h3><p>首先说明一下，目前我对这个方法还是无法直观的理解。先祭出这个势能函数：</p><p>$$<br>\Phi(h) = 2n-m<br>$$</p><p>其中n是当前数组元素的个数，m是当前数组内存空间大小。</p><p>每次插入的费用函数定义为：</p><p>$$<br>c+\Phi(h&#39;)-\Phi(h)<br>$$</p><p>c表示当前插入操作的总的花费，$\Phi(h&#39;)$是插入后的势能函数，$\Phi(h)$是插入前的势能函数。</p><p>这里分为两种情况：</p><ol><li>如果<code>n&lt;m</code>，不必扩容，c=1，势能函数相差2，所以加起来是3</li><li>如果<code>n=m</code>，那么就要扩容，c=n+1，$\Phi(h&#39;)=2(n+1)-2n$，$\Phi(h)=2n-n$，加起来还是3</li></ol><p>所以费用函数其实是一个等于3的常数函数。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/blog/2019/02/19/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2019/02/19/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>快速排序算法是一个原理非常简单易懂的算法，但如果现场手写的话又有多少人能写得出来呢？我今天又试了一下，发现还是存在一些认知上的问题。首先我明白快排的核心操作是：<strong>选取一个中枢，然后把小于中枢的放到左边，大于中枢的放到右边</strong>。但我发现时隔仅仅一年多，我居然已经忘了这个操作的英文名字了。直到我在写这篇文章的时候才突然想起来：partition操作。</p><p>在使用partition操作的前提下，递归解决问题就OK了。</p><a id="more"></a><p>partition具体操作如下：</p><p>我选取的中枢是第一个元素，且从前往后遍历数组。遇到小于中枢的，我要交换当前结点和中枢。遇到大于中枢的，直接略过。</p><p>第一个分支也就是遇到小于中枢的结点，这里才是操作比较复杂的部分，仔细想想其实这里要交换两次。将小于中枢的结点与中枢交换之后，中枢跑到了最后面，此时的结构相当于：<code>小小小..大大大..中枢</code>。<strong>我们还要将中枢塞到中间去</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin&gt;=end-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pivotIndex = partition(array, begin, end);</span><br><span class="line">    qsort(array, begin, pivotIndex);</span><br><span class="line">    qsort(array, pivotIndex+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = array[begin];</span><br><span class="line">    <span class="keyword">int</span> pivotIndex = begin;</span><br><span class="line">    <span class="keyword">int</span> index = begin+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(index&lt;end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[index]&lt;pivot)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[index];</span><br><span class="line">            array[index] = array[pivotIndex];</span><br><span class="line">            array[pivotIndex++] = temp;</span><br><span class="line">            temp = array[index];</span><br><span class="line">            array[index] = array[pivotIndex];</span><br><span class="line">            array[pivotIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pivotIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以思考一下：</p><ul><li>选第一个元素做中枢，从后往前遍历</li><li>选最后一个元素做中枢，从前往后遍历</li><li>选最后一个元素做中枢，从后往前遍历</li></ul><p>所以最后我发现快速排序确实是一个简单易懂的算法，难点在于partition操作的具体问题具体分析。四类partition全部写一遍。应该差不多了。</p><p>上面的方法归根结底都是使用 <strong>一个中枢</strong> 来划分，实际上也可以用两个指针来划分：一个记录小部的末尾，一个记录大部的首部。这两个指针一个从前往后，一个从后往前，直到相遇，本轮划分操作就结束。</p><p>于是我又抽空写了一下这个两个指针往中间靠的，结果并没有一遍写对，原因是边界检查，居然要不停的检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition1</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = array[begin];</span><br><span class="line">    <span class="keyword">int</span> smallEnd = begin;</span><br><span class="line">    <span class="keyword">int</span> bigBegin = end-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(smallEnd&lt;bigBegin)&#123;</span><br><span class="line">        <span class="keyword">while</span> (smallEnd&lt;bigBegin &amp;&amp; array[bigBegin]&gt;pivot)&#123;</span><br><span class="line">            bigBegin--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(smallEnd&lt;bigBegin)&#123;</span><br><span class="line">            array[smallEnd++] = array[bigBegin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(smallEnd&lt;bigBegin &amp;&amp; array[smallEnd]&lt;pivot)&#123;</span><br><span class="line">            smallEnd++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(smallEnd&lt;bigBegin)&#123;</span><br><span class="line">            array[bigBegin--] = array[smallEnd];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array[smallEnd] = pivot;</span><br><span class="line">    <span class="keyword">return</span> smallEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样感觉就太不美了。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/blog/2019/01/19/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/blog/2019/01/19/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="什么是并查集"><a href="#什么是并查集" class="headerlink" title="什么是并查集"></a>什么是并查集</h3><p>并查集的核心是<code>parent</code>指针，一个结点可以找到自己所属的结点。从而把结点<strong>归类</strong>。有两个核心操作：</p><ul><li>Union（用来合并两个并查集）</li><li>Find（用于查找一个结点的<code>parent</code>）</li></ul><p>所以并查集可以叫做：union-find data structure。</p><a id="more"></a><h3 id="什么是路径压缩"><a href="#什么是路径压缩" class="headerlink" title="什么是路径压缩"></a>什么是路径压缩</h3><p>我们看两个结点是否属于同一个并查集，实际上只看最顶层的那个<code>parent</code>，如果这两个结点属于同一个最顶层<code>parent</code>，那么它们就在同一个并查集中。</p><p>所以我们实际上只需要两层的树结构，让所有其他结点的<code>parent</code>指针指向最顶层<code>parent</code>，这样就能达到扁平化并查集的目的，从而使<code>Find</code>操作从<code>O(logN)</code>的时间复杂度变成<code>O(1)</code>。这就叫：<strong>路径压缩</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findParent</span><span class="params">(UnionFindSetNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.parent!=node)&#123;</span><br><span class="line">        node.parent = findParent(node.parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很巧妙，可以在查找本结点父亲的时候，将路径上的所有祖先扁平化。</p><h3 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h3><p>核心目标是：尽可能减少深度。所以需要注意的点是：把深度小的并查集归并到深度大的并查集。我们给并查集多添加一个深度属性：rank，比如两层的并查集，parent的rank就是1，叶子节点们的rank就是0。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(UnionFindSetNode node1, UnionFindSetNode node2)</span></span>&#123;</span><br><span class="line">    UnionFindSetNode parent1 = findParent(node1);</span><br><span class="line">    UnionFindSetNode parent2 = findParent(node2);</span><br><span class="line">    <span class="keyword">if</span>(parent1!=parent2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent1.rank&gt;parent2.rank)&#123;</span><br><span class="line">            parent2.parent = parent1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent1.rank&lt;parent2.rank)&#123;</span><br><span class="line">            parent1.parent = parent2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parent1.parent = parent2;</span><br><span class="line">            parent2.rank++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/blog/2019/01/17/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/blog/2019/01/17/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>KMP算法用来在一个文本中查找模式串，如下图所示：</p><p>文本匹配例子：</p><p><img src="https://i.loli.net/2019/02/01/5c545a0ceea57.jpg#align=left&amp;display=inline&amp;height=78&amp;linkTarget=_blank&amp;originHeight=78&amp;originWidth=392&amp;width=392" alt></p><p>我们把上面那个长字符串的称为<strong>文本</strong>，下面这个短的称为<strong>模式串</strong>。我们的目的是查看<code>ABADABAD</code>是否出现在文本中。</p><p>不必要的比较：</p><p><img src="https://i.loli.net/2019/02/01/5c545a0d27686.jpg#align=left&amp;display=inline&amp;height=100&amp;linkTarget=_blank&amp;originHeight=100&amp;originWidth=418&amp;width=418" alt></p><p>跳过不必要的比较：</p><p><img src="https://i.loli.net/2019/02/01/5c545a0cf058c.jpg#align=left&amp;display=inline&amp;height=90&amp;linkTarget=_blank&amp;originHeight=90&amp;originWidth=410&amp;width=410" alt></p><p>KMP算法的核心作用在于帮助模式串顺利的跳过很多不必要的比较（模式串没有任何前缀与文本匹配），直接后移到一部分前缀已经匹配的位置，开始下一次的比较。更准确的讲是移动到：最长真前后缀匹配的位置，如上图所示的<code>ABA</code>。</p><a id="more"></a><h3 id="什么是真前后缀"><a href="#什么是真前后缀" class="headerlink" title="什么是真前后缀"></a>什么是真前后缀</h3><p>前缀和后缀我们都不陌生，比如单词<code>ABA</code>，它有三个前缀：<code>A</code>、<code>AB</code>、<code>ABA</code>，和三个后缀：<code>A</code>、<code>BA</code>、<code>ABA</code>。</p><p>真前后缀的意思是，前后缀必须是单词的<strong>真子集</strong>，也就是说不能是单词本身。所以上面那个单词<code>ABA</code>的真前缀是：<code>A</code>、<code>AB</code>，真后缀是：<code>A</code>、<code>BA</code>。</p><p>那么单词<code>ABA</code>真前后缀的最长匹配是：<code>A</code>。</p><h4 id="那么真前后缀是否匹配有什么用？"><a href="#那么真前后缀是否匹配有什么用？" class="headerlink" title="那么真前后缀是否匹配有什么用？"></a>那么真前后缀是否匹配有什么用？</h4><p>我们仔细观察文章最开头的文本匹配例子。在不必要的比较中，我们拿<code>BADABA</code>和<code>ABADAB</code>比较。而这两个，前者是模式串<code>ABADABA</code>部分的后缀，后者则是前缀。如果我们算得了<code>ABADABA</code>的真前后缀的最长匹配，就已经知道了<code>BADABA</code>和<code>ABADAB</code>不相等。而且还知道<code>ADABA</code>和<code>ABADA</code>也不相等，等等。</p><p><strong>只要我们知道了真前后缀的最长匹配是什么，我们可以直接跳过所有这些没必要的比较。</strong></p><p>KMP的核心就是：<strong>在每一次失配的时候</strong>，利用最长真前后缀匹配长度，直接跳过不必要的比较。</p><h3 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h3><p>next数组也就是：部分匹配表（Partial Match Table）。<strong>就是一个最长真前后缀匹配长度表。</strong></p><p><strong>首先next数组只需要用模式串得出，它是对模式串的解析，跟要匹配的文本没有半毛钱关系。</strong>其次next数组记录的其实就是<strong>最长真前后缀匹配长度</strong>，但错开了一位。</p><blockquote><p>真前后缀的意思是，前后缀不能是字符串本身，只能是字符串的真子集</p></blockquote><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">模式串</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">\0</td></tr><tr><td style="text-align:center">next[i]</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table><ol><li>i = 0，<code>next[0]</code>，我们填-1；</li><li>i = 1，前面的字符串为<code>A</code>，其最长相同真前后缀长度为0，即<code>next[1] = 0</code>；</li><li>i = 2，前面的字符串为<code>AB</code>，其最长相同真前后缀长度为0，即<code>next[2] = 0</code>；</li><li>i = 3，前面的字符串为<code>ABA</code>，其最长相同真前后缀为<code>A</code>，即<code>next[3] = 1</code>；</li><li>i = 4，前面的字符串为<code>ABAD</code>，其最长相同真前后缀长度为0，即<code>next[4] = 0</code>；</li><li>i = 5，前面的字符串为<code>ABADA</code>，其最长相同真前后缀长度为<code>A</code>，即<code>next[5] = 1</code>；</li><li>i = 6，前面的字符串为<code>ABADAB</code>，其最长相同真前后缀长度为<code>AB</code>，即<code>next[6] = 2</code>；</li><li>i = 7，前面的字符串为<code>ABADABA</code>，其最长相同真前后缀为<code>ABA</code>，即<code>next[7] = 3</code>；</li><li>i = 8，前面的字符串为<code>ABADABAD</code>，其最长相同真前后缀为<code>ABAD</code>，即<code>next[8]=4</code>；</li></ol><p>这张next表及其有用，前面说了，在字符串匹配的每一次失配的时候，我们都可以用已经匹配上的这段字符串的最长真前后缀匹配长度来定位将要跳转的位置。还是拿最开始的文本匹配例子：</p><p>当图一失配的时候，我们查<code>ABADABAD</code>的失配位置的next数组，也就是<code>next[7]</code>，得到<code>ABADABA</code>的最长真前后缀匹配长度<code>3</code>，然后拿<code>&quot;ABADABAD&quot;.charAt(3)</code>也就是<code>D</code>跟文本中失配处的字符<code>&#39; &#39;</code>继续匹配。如果又失配，那么递归处理。递归的边界是什么？答案是<code>next[0]</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个代码并不难写，我简单讲一下。</p><p>首先我们需要构造next数组，需要的参数只有一个：模式串。</p><p>然后我们使用一个指针遍历模式串，另一个指针负责记录匹配深度。</p><p>分支只有两个，一个是<strong>递归的边界</strong>或者<strong>匹配的时候</strong>：i++，j++，next[i]=j。一个是<strong>非递归边界且不匹配的时候</strong>，递归查找下一个必要的匹配：j=next[j]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getNextArray(String pattern)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()+<span class="number">1</span>];</span><br><span class="line">    nextArray[<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==-<span class="number">1</span> || pattern.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            nextArray[i]=j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nextArray[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = getNextArray(pattern);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==-<span class="number">1</span> || text.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nextArray[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pattern.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然这种错开，和<code>next[0]=-1</code>的设定，不那么自然。其实可以有更自然的设计：</p></blockquote><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">模式串</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">D</td><td style="text-align:center">\0</td></tr><tr><td style="text-align:center">next[i]</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table><p>这样一一对应就行了，next数组也与模式串等长。</p><p>这种next表的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getNextArray(String pattern)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; pattern.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;pattern.length() &amp;&amp; pattern.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            nextArray[i++] = ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            nextArray[i++] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = getNextArray(pattern);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; text.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length() &amp;&amp; text.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pattern.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来远不如上面第一种next表的代码简洁清晰。下面做一个简化，去掉内部的循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getNextArray(String pattern)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; pattern.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pattern.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            nextArray[i++] = ++j;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            nextArray[i++] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextArray = getNextArray(pattern);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;text.length() &amp;&amp; j&lt;pattern.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; text.charAt(i)!=pattern.charAt(j))&#123;</span><br><span class="line">            j = nextArray[j-<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text.charAt(i)==pattern.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pattern.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看代码很容易知道，文本的指针是只增不减的，而且只在<strong>失配且匹配深度大于0</strong>的时候递归处理失配情况。但如何精确分析算法复杂度呢？</p><h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>这个算法的分析属于平摊分析。引入一个变量k，<code>k=2*i-j</code>。观察下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(j&lt;m &amp;&amp; i&lt;n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>&gt;j || T[i]==P[j])&#123;</span><br><span class="line">        i++;j++;    <span class="comment">// k加1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        j = next[j];    <span class="comment">// j至少减一，i不变，那么k至少加1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上述注释分析得出：k单调递增。k的最大值是<code>2*n+1</code>，而k是迭代次数的上界，所以算法最坏时间是：<code>2*n+1</code>，所以这是一个<code>O(n)</code>的算法。同理可得算出<code>next</code>表的时间复杂度是<code>O(m)</code>。所以总的算法复杂度是<code>O(m+n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>蓄水池算法</title>
      <link href="/blog/2019/01/15/%E8%93%84%E6%B0%B4%E6%B1%A0%E7%AE%97%E6%B3%95/"/>
      <url>/blog/2019/01/15/%E8%93%84%E6%B0%B4%E6%B1%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="蓄水池算法-Reservoir-Sampling"><a href="#蓄水池算法-Reservoir-Sampling" class="headerlink" title="蓄水池算法(Reservoir Sampling)"></a>蓄水池算法(Reservoir Sampling)</h2><p>这个算法真的很奇妙，它的核心是一个<strong>数学证明</strong>。外延，或者说应用场景是：</p><ol><li>$C_n^k$，也就是从大小为n的样本集中随机取k个不同的样本</li><li>流式数据，或者说无法直接根据索引拿到数据（更加不可能一遍加载到内存）</li></ol><a id="more"></a><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>算法的描述其实很简单：<a href="https://zh.wikipedia.org/zh-cn/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A8%A3" target="_blank" rel="noopener">维基百科：水塘抽样</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">问题描述：从包含n个不同的项目的集合S中随机选取k个不同的样本。</span><br><span class="line">算法：</span><br><span class="line">从S中取首k个放入[水塘]中</span><br><span class="line">对每个S[j]项（j&gt;=k，数组从0开始）：</span><br><span class="line">true随机产生一个范围从0到j的整数r</span><br><span class="line">true若r&lt;k则把水塘中的第r项换成S[j]项</span><br><span class="line">最后得到的水塘就是抽样结果</span><br></pre></td></tr></table></figure><p>这个算法保证了每一项最后可能存在于水塘中的概率都是一样的。</p><p>单看算法，你肯定不知道为什么是等概率，其实数学证明并不难，请看下面的证明：</p><h3 id="数学证明"><a href="#数学证明" class="headerlink" title="数学证明"></a>数学证明</h3><p>我们把样本分为两类：</p><ol><li>一类是首k个，它们一开始就在水塘中</li><li>一类是其他，它们一开始并不在水塘中</li></ol><p>我们发现两个简单的逻辑：</p><ol><li><strong>对于水塘中的样本，只要随机数不选到该样本，该样本就不会被替换</strong></li><li><strong>水塘的某个项一旦被替换，就不可能再回到水塘</strong>，不会出现被替换掉，然后再回到水塘的局面，这样就保证了问题不会进一步变得复杂。所以：<strong>某个项被保留的概率 = 被选中到水塘的概率 * 后续不被替换的概率</strong></li></ol><p>分类讨论，首k个样本最终存在于水塘中的概率，和其余样本最终存在于水塘中的概率：</p><ol><li>首k个样本，随便选一个做研究对象。被选中到水塘的概率为：1。（数组从1开始）从j=k+1开始考虑替换，第一次不被替换的概率是$\frac{k}{k+1}$，第二次不被替换的概率是$\frac{k+1}{k+2}$，第三次...，一直到最后一次不被替换的概率是$\frac{n-1}{n}$。<br><br>所以该项被保留的概率 = $1\times\frac{k}{k+1}\times\frac{k+1}{k+2}\times\frac{k+2}{k+3}\times\cdots\times\frac{n-1}{n}=\frac{k}{n}$</li><li>一开始不在水塘中的那一部分，随便选一个做研究对象。被选中到水塘的概率为：$\frac{k}{j}$，后续不被替换的概率$\frac{j}{j+1}$，一直到$\frac{n-1}{n}$。<br><br>所以该项被保留的概率 = $\frac{k}{j}\times\frac{j}{j+1}\times\cdots\frac{n-1}{n}=\frac{k}{n}$</li></ol><p>到此我们就证明了所以样本最终存在于水塘中的概率都是$\frac{k}{n}$，这也完全符合了我们的数学期望。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>弄个流式数据我们这里没有条件，只能用伪代码模拟一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Data[] reservoirSampling(<span class="keyword">int</span> k, DataStream dataStream)&#123;</span><br><span class="line">    Data[] reservoir = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init pool</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;reservoir.length;i++)&#123;</span><br><span class="line">        reservoir[i] = dataStream.getCurrentData();</span><br><span class="line">        dataStream.toNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;!dataStream.isFinish();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> d = random.nextInt(i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(d&lt;k)&#123;</span><br><span class="line">            reservoir[d] = dataStream.getCurrentData();</span><br><span class="line">        &#125;</span><br><span class="line">        dataStream.toNext();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> reservoir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$的证明</title>
      <link href="/blog/2019/01/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9E%81%E9%99%90%E7%9A%84%E8%AF%81%E6%98%8E/"/>
      <url>/blog/2019/01/07/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9E%81%E9%99%90%E7%9A%84%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>高数中的第一个证明，可能就是这个$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$的证明了。下面给出这个极限的证明，用到了解析几何（作图法）。</p><a id="more"></a><blockquote><p>作图工具 Geometry</p></blockquote><p><img src="https://i.loli.net/2019/01/07/5c3351ce31372.jpg" alt="1546867129927.jpg"></p><p>如图我们可以看到，有一个单位圆，圆心为 $A$ ，线段 $CE$ 的长度等于 $\sin x$，线段 $CB$ 是 <strong>弦</strong>（我们令他等于 $a$），弧 $\overset{\frown} {CB}$ 的长度就是 $x$，线段DB的长度等于 $\tan x$。</p><p>它们的长度的大小关系我们很容易得出：</p><ol><li>$\sin x &lt; a$，因为三角形的直角边小于斜边</li><li>$a &lt; x$，因为两点之间线段最短</li><li>$x &lt; \tan x$，这个略微不那么直接，可以用面积法（通过比较面积继而得到表达式中两个未知数的大小关系），扇形 $CAB$ 的面积：$\frac{1}{2} \cdot 1 \cdot x$ ，三角形 $\triangle DAB$ 的面积：$\frac{1}{2} \cdot 1 \cdot \tan x$ 。而 $CAB$ 的面积小于 $DAB$ 的面积。所以得到 $x &lt; \tan x$</li></ol><p>由此我们得到不等式：$\sin x &lt; x &lt; \tan x$ (当 $x&gt;0$ )，同时除以 $\sin x$，得到：$1 &lt; \frac{x}{\sin x} &lt; \frac{1}{\cos x}$。</p><p>当 $x&lt;0$ 时，显然 $\sin x &gt; x &gt; \tan x$，同时除以 $\sin x$（除以负数要变号），得到：$1 &lt; \frac{x}{\sin x} &lt; \frac{1}{\cos x}$。</p><p>令 $x\rightarrow 0^{-}$，由夹逼定理得到左极限 $\lim\limits_{x\rightarrow 0^{-}} \frac{\sin x}{x} = 1$ </p><p>令 $x\rightarrow 0^{+}$，由夹逼定理得到右极限 $\lim\limits_{x\rightarrow 0^{+}} \frac{\sin x}{x} = 1$ </p><p>最终可以得到：$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$ （左右极限都等于1）</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>熟练使用JetBrains家的IDE</title>
      <link href="/blog/2018/11/04/%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8JetBrains%E5%AE%B6%E7%9A%84IDE/"/>
      <url>/blog/2018/11/04/%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8JetBrains%E5%AE%B6%E7%9A%84IDE/</url>
      
        <content type="html"><![CDATA[<h2 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a>通用快捷键</h2><ol><li>格式化代码（reformat code）:<br>win: ctrl+alt+L<br>mac: command+option+L</li><li>在一行的任意位置使用： shift + enter，新建下一行并跳到下一行。</li><li>善用代码自动补全功能，变量名和方法名等可以用 enter 补全。导入包可以用 alt + enter。</li><li>上下移动代码，ctrl+shift+上下键</li><li>Android Studio 生成函数注释：你在方法前输入/**然后一回车，自动帮你生成方法和参数的注释。</li></ol><a id="more"></a><h2 id="Intellj-Idea"><a href="#Intellj-Idea" class="headerlink" title="Intellj Idea"></a>Intellj Idea</h2><p>快速打出常用语句：</p><ol><li><strong>sout</strong>：<code>System.out.println();</code></li><li><p><strong>psvm</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用IDE的右键中的生成Getter Setter选项自动生成Getter Setter，使用toString自动生成toString。</p></li><li><p>跳转到接口：<code>ctrl+b</code>； 跳转到实现类：<code>ctrl + alt +B</code></p></li><li><p><img src="../../../../images/2018/idea图解.png" alt></p></li></ol><p>上面这个按钮可以快速的在目录树中定位到当前类所在的路径</p><ol start="6"><li>ctrl+alt+t</li></ol><p><img src="../../../../images/2018/idea-ctrl+alt+t.png" alt="idea-ctrl+alt+t.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>精通一款编辑器之sublime text 3</title>
      <link href="/blog/2018/11/04/%E7%B2%BE%E9%80%9A%E4%B8%80%E6%AC%BE%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8Bsublime%20text%203/"/>
      <url>/blog/2018/11/04/%E7%B2%BE%E9%80%9A%E4%B8%80%E6%AC%BE%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8Bsublime%20text%203/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器常用功能"><a href="#编辑器常用功能" class="headerlink" title="编辑器常用功能"></a>编辑器常用功能</h2><ol><li>格式化代码：格式化代码可以让你不用管代码的格式，可以放肆的写程序，你可以少敲很多空格，不用关心代码的格式问题，机器给出的代码格式风格统一且漂亮，一键解决你的格式问题，真是提高码代码效率的非常重要的功能。</li><li>查找文件：查找文件是在集成开发的时候非常重要的功能，当文件多起来的时候，快速定位到文件可以节省很多时间，甚至有时候文件实在太多，你只能通过查找的方式找到那个文件。</li><li>正则全文件查找和替换：轻松让你更改全局变量和配置，这是一个必须的功能，没有它简直无法想象工作量有多大。</li><li>代码收缩和扩展：代码太长怎么办，收缩和扩展啊。</li></ol><a id="more"></a><h2 id="安装卸载插件"><a href="#安装卸载插件" class="headerlink" title="安装卸载插件"></a>安装卸载插件</h2><ol><li><code>cmd+shift+p</code>：打开命令板，输入<code>install</code>，点击：<strong>Package Control: Install Package</strong>选项，然后搜索你想要的插件。</li><li>卸载请在命令板输入：<code>remove</code>，点击：<strong>Package Control: Remove Package</strong>选项。其实卸载无非就是两个词：<code>remove</code>和<code>uninstall</code>，多试试就行了。</li></ol><blockquote><p>打开命令板之后什么都不想干，怎么关闭命令板呢？其实很简单，再按一次打开命令板的快捷键就行了，<strong>开关都用同一个键或者按钮（术语叫：toggle，可开可关），这是比较通用设计理念</strong>。</p></blockquote><h2 id="基本快捷键"><a href="#基本快捷键" class="headerlink" title="基本快捷键"></a>基本快捷键</h2><ul><li>显示隐藏菜单栏：alt，如果你不小心把菜单栏隐藏了，除了用快捷键唤出，还真不知道有什么其他办法。</li><li>显示隐藏目录树：ctrl+k+b，这个功能可以在菜单栏中的view中找到，所以我觉得记不记无所谓</li></ul><h2 id="vue-插件"><a href="#vue-插件" class="headerlink" title="vue 插件"></a>vue 插件</h2><ol><li><strong>vue-syntax-highlight</strong>：可以让<code>.vue</code>文件高亮。</li><li><strong>HTML-CSS-JS Prettify</strong>：可以格式化这三种语言的代码，特别是单文件的vue，非常需要这个来同时格式化三种语言。不过需要配置一下。工具栏路径：<code>Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; HTML/CSS/JS Prettify -&gt; Plugin Options - Default</code>，然后搜索：<code>allowed_file_extensions</code>，给这个配置项添加一个<code>vue</code>即可，要注意的是有四处有这个配置项，分别是<code>html</code>、<code>css</code>、<code>js</code>、<code>json</code>，如果你想它们全都能格式化，自然是要全都添加<code>vue</code>，但实验证明只加html里面就行了，如果在其他几个里面加反而引起了冲突。然后格式化代码的快捷键是什么呢？同样也有配置文件的，工具栏路径：<code>Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; HTML/CSS/JS Prettify -&gt; Keyboard Shortcuts - Default</code>，可以看到：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+shift+h&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;p&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_prettify_prefs&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;o&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_plugin_options&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;k&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_keyboard_shortcuts&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;keys&quot;: [&quot;super+alt+h&quot;, &quot;n&quot;],</span><br><span class="line">  &quot;command&quot;: &quot;htmlprettify_set_node_path&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>第一项即为使用这个插件的快捷键，也就是格式化代码的快捷键。</p><h2 id="底栏设置显示文件编码"><a href="#底栏设置显示文件编码" class="headerlink" title="底栏设置显示文件编码"></a>底栏设置显示文件编码</h2><p>在mac osx上一不小心按了cmd+shift+c，文件的存储格式现在变成了GBK格式，当我再按下cmd+s保存时，提示我UTF-8格式的文件不能用GBK格式来保存。怎么解决这个问题呢？首先我想查看这个文件是什么编码，Sublime Text的默认设置是不开启显示编码的，如果想开启，可通过菜单Perference → Settings – User，在打开的配置文件里 ，在大括号后面，增加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Display file encoding in the status bar</span><br><span class="line">&quot;show_encoding&quot;: true,</span><br><span class="line">// Display line endings in the status bar</span><br><span class="line">&quot;show_line_endings&quot;: true,</span><br></pre></td></tr></table></figure><p>此时保存该配置文件，就能够看到sublime最底下一行会显示文件编码格式了。以上的配置内容在Perference → Setting─Default都是false的。</p><p>然后在底栏点击文件编码，点击reopen with encoding，然后选择utf-8，然后cmd+w关闭窗口，然后cmd+shift+t重新打开刚刚关闭的窗口，就一切恢复正常了。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>处理器体系结构</title>
      <link href="/blog/2018/10/13/%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/blog/2018/10/13/%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>阅读这篇文章必须要对汇编码有足够的了解，如果你对IA32汇编码还不够了解，可以先看看这篇文章：<a href="../../08/程序的机器级表示">程序的机器级表示</a></p><h2 id="Y86指令集体系结构"><a href="#Y86指令集体系结构" class="headerlink" title="Y86指令集体系结构"></a>Y86指令集体系结构</h2><p>Y86指令集基本上是IA32指令集的一个子集。这个指令集就是我们处理器实现的目标。如下图：</p><a id="more"></a><p><img src="../../../../images/2018/Y86指令集.png" alt="Y86指令集"></p><p>IA32的movl指令分成了4个不同指令：irmovl、rrmovl、mrmovl和rmmovl，i表示立即数Immediate，r表示寄存器Register，m表示存储器Memmory。第一个字母表示源，第二个字母表示目的。</p><p>这里不实现的功能有：</p><ol><li>存储器引用方式是简单的基址+偏移量形式，不支持变址寄存器（second index register）和任何寄存器伸缩（scaling）。如果对操作数的结构不太了解可以看看这个：<a href="../../08/程序的机器级表示/#操作数指示符">操作数指示符</a></li><li>和IA32一样不允许从一个存储器直接传送到另一个存储器地址。</li><li>不允许立即数传送到存储器</li></ol><p>4个整数操作指令：addl、subl、andl、xorl</p><p>7个跳转指令：jmp、jle、jl、je、jne、jge、jg。</p><p>6个条件传送指令：cmovle、cmovl、cmove、cmovne、cmovge、cmovg。</p><p>另外还有：call、ret、pushl、popl，halt指令停止指令执行。IA32中有一个与之相当的指令hlt，IA32的应用程序不允许使用这条指令，因为它会导致整个系统暂停运行。对于Y86来说，执行halt指令会导致处理器停止，并将状态码设置为HLT。</p><h3 id="指令编码"><a href="#指令编码" class="headerlink" title="指令编码"></a>指令编码</h3><p>与IA32一样使用小端编码。</p><p><img src="../../../../images/2018/指令编码.png" alt="指令编码"></p><p>每条指令的第一个字节表明指令的类型，这个字节分为两部分，每部分4位：高4位是代码（code）部分，低4位是功能（function）部分。代码值为 0~0xB。可以观察到，<code>rrmovl</code>与条件传送指令有同样的代码部分，可以把它看作是一个无条件传送。</p><p>寄存器编码如下：</p><p><img src="../../../../images/2018/寄存器编码.png" alt="寄存器编码"></p><p>举个例子：用16进制表示指令 <code>rmmvol %esp, 0x12345(%edx)</code>的字节编码。</p><p>从上面图中可以看到，rmmovl第一个字节为40，由于%esp是4（占4位），%edx是2（占4位），所以第二个字节是42，最后再加上偏移量 00 01 23 45，小端表示是：45 23 01 00，所以最后得到指令的编码是：<code>404245230100</code>。</p><p>指令集的一个重要性质是字节编码必须有唯一解释，任意一个字节序列要么是一个唯一的指令，要么是一个不合法的指令。</p><p>相比于IA32，Y86没那么紧凑，IA32对寄存器只用了3位来编码，5位表明指令类型，所以IA32能将出栈入栈放进一个字节里。另外IA32可以将常数值编码成1、2、4字节，Y86总是编码成4字节。</p><h3 id="RISC-和-CISC"><a href="#RISC-和-CISC" class="headerlink" title="RISC 和 CISC"></a>RISC 和 CISC</h3><ul><li>RISC: reduced instruction set computers，精简指令集</li><li>CISC: complex instruction set computers，复杂指令集</li></ul><h3 id="Y86异常"><a href="#Y86异常" class="headerlink" title="Y86异常"></a>Y86异常</h3><p><img src="../../../../images/2018/Y86异常.png" alt="Y86异常"></p><p>对于Y86，当遇到这些异常的时候，我们简单的让处理器停止执行指令。在更完善的设计中，处理器通常会调用一个 exception handler（异常处理程序），这个过程被指定用来处理遇到的某种类型的异常，例如放弃程序或调用一个用户自定义的 signal handler（信号处理程序）。</p><h3 id="Y86程序"><a href="#Y86程序" class="headerlink" title="Y86程序"></a>Y86程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> *Start, <span class="keyword">int</span> Count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (Count) &#123;</span><br><span class="line">        sum += *Start;</span><br><span class="line">        Start++;</span><br><span class="line">        Count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/IA32对比Y86代码.png" alt="IA32对比Y86代码"></p><p>可以看到Y86有时候需要两条指令来完成IA32一条指令就能完成的事。然而如果用数组索引来写这个程序，要转换成Y86会很困难，因为Y86没有伸缩寻址。</p><p>完整代码如下：</p><p><img src="../../../../images/2018/Y86汇编代码.png" alt="Y86汇编代码"></p><p>以<code>.</code>开头的是 assembler directive（汇编器命令），命令<code>.pos 0</code>告诉汇编器应该从地址0处开始产生代码。第3、4行使用的Stack标签，在最后有声明，其位置是0x100。第9到13行声明了一个数组，4字节对齐，值分别是：0xd，0xc0，0xb00，0xa000，array标签是起址。</p><blockquote><p>细节问题，<code>pushl %esp</code>（这个指令只能用汇编语言写，C语言无法产生）是先把%esp的值转移到栈，还是先%esp减4再将结果转移到栈，实际上不同版本的intel处理器都会产生不同的结果，所以一个很重要的教训是要保证细节上的一贯性。</p></blockquote><h2 id="逻辑设计和硬件控制语言HCL（Hardware-Control-Language）"><a href="#逻辑设计和硬件控制语言HCL（Hardware-Control-Language）" class="headerlink" title="逻辑设计和硬件控制语言HCL（Hardware Control Language）"></a>逻辑设计和硬件控制语言HCL（Hardware Control Language）</h2><h3 id="逻辑门"><a href="#逻辑门" class="headerlink" title="逻辑门"></a>逻辑门</h3><p><img src="../../../../images/2018/逻辑门.png" alt="逻辑门"></p><h3 id="组合电路和HCL语言"><a href="#组合电路和HCL语言" class="headerlink" title="组合电路和HCL语言"></a>组合电路和HCL语言</h3><p>构建一个组合电路有两条限制：</p><ol><li>两个或多个逻辑门的输出不能连接在一起。这样会导致线上的信号矛盾，产生不合法的电压或电路故障。</li><li>必须是无环的，也就是不能形成回路。</li></ol><p>下面是个简单的例子：</p><p><img src="../../../../images/2018/组合电路.png" alt="组合电路"></p><p>用HCL来写这个网的函数就是：<code>bool eq = (a &amp;&amp; b) || (!a &amp;&amp; !b)</code></p><p>HCL是用来C语言风格的语法，但这里同C语言不一样，该语句的意思不是执行了一次计算并将结果放入存储器，而是使用一个名字eq来称谓一个表达式。</p><p>实际上上面的组合电路就是同或，异或的表达式是：<code>bool eq = (!a &amp;&amp; b) || (a &amp;&amp; !b)</code></p><p>多路复用器（multiplexor，通常称为：MUX）：</p><p><img src="../../../../images/2018/MUX组合电路.png" alt="MUX组合电路"></p><p><code>bool out = (s &amp;&amp; a) || (!s &amp;&amp; b)</code></p><h3 id="字级的组合电路和HCL整数表达式"><a href="#字级的组合电路和HCL整数表达式" class="headerlink" title="字级的组合电路和HCL整数表达式"></a>字级的组合电路和HCL整数表达式</h3><p>通常我们设计能对字（word）进行操作的组合电路，字级电路中用到的就是HCL整数表达式了。</p><p>字级与电路：</p><p><img src="../../../../images/2018/字级与电路.png" alt="字级与电路"></p><p><code>bool Eq = (A == B);</code></p><p>也可以用异或来实现：</p><p><img src="../../../../images/2018/字级异或电路.png" alt="字级异或电路"></p><p>在HCL中，多路复用函数是用情况表达式（case expression）来描述的。情况表达式的通用格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    select_1 : expr_1;</span><br><span class="line">    select_2 : expr_2;</span><br><span class="line">             .</span><br><span class="line">             .</span><br><span class="line">             .</span><br><span class="line">    select_k : expr_k;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同C语言的switch语句不同，我们不要求不同的选择表达式之间互斥。从逻辑上讲，这些选择表达式是顺序求值的，且第一个求值为1的情况就会被选中。</p><p>字级多路复用电路：</p><p><img src="../../../../images/2018/字级多路复用电路.png" alt="字级多路复用电路"></p><p>用HCL来描述就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int Out = [</span><br><span class="line">    s: A;</span><br><span class="line">    1: B;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>大多数人第一眼是看不懂这个表达式的，其实里面有个暗含的条件：先执行 <code>s: A;</code> 如果失败（没有输出A）才会再执行 <code>1: B;</code>。而<code>1: B;</code>实际上是<code>!s&amp;&amp;1: B;</code>的简写。没有输出A就已经代表s是0了，那么!s就是1。</p><p>四路复用器：</p><p><img src="../../../../images/2018/四路复用器.png" alt="四路复用器"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int Out4 = [</span><br><span class="line">    !s1 &amp;&amp; !s0: A; # 00</span><br><span class="line">    !s1       : B; # 01</span><br><span class="line">    !s0       : C; # 10</span><br><span class="line">    1         : D; # 11</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>第二个表达式可以写成<code>!s1</code>，而不用写的更完整<code>!s1&amp;&amp;s0</code>，是因为另一种可能<code>s0=0</code>已经出现在了第一个选择表达式了，若能到达第二个选择表达式，则<code>s0=1</code>。类似的，第三个表达式可以写成<code>!s0</code>，第四个表达式可以简单的写成1。</p><p>来看最后一个例子，假设我们想设计一个逻辑电路来找一组字A、B和C中的最小值，如下图所示：</p><p><img src="../../../../images/2018/最小值电路.png" alt="最小值电路"></p><p>用HCL来表达：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int Min3 = [</span><br><span class="line">    A&lt;=B &amp;&amp; A&lt;=C : A;</span><br><span class="line">    B&lt;=A &amp;&amp; B&lt;=C : B;</span><br><span class="line">    1            : C;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>算术逻辑单元（arithmetic/logic unit, ALU）</p><p><img src="../../../../images/2018/ALU.png" alt="ALU"></p><h3 id="集合关系"><a href="#集合关系" class="headerlink" title="集合关系"></a>集合关系</h3><p><img src="../../../../images/2018/集合关系.png" alt="集合关系"></p><p>在这个电路中，两位的信号code就可以用来控制对4个数据字A、B、C和D做选择。根据可能的code值，可以用相等测试来表示信号s1和s0的产生：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1= code==2 || code==3;</span><br><span class="line">bool s0= code==1 || code==3;</span><br></pre></td></tr></table></figure><p>还有一种更简洁的方式来表示这样的属性：当code在集合<code>{2,3}</code>中s1为1，而code在集合<code>{1,3}</code>中s0为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1= code in &#123;2,3&#125;;</span><br><span class="line">bool s0= code in &#123;1,3&#125;;</span><br></pre></td></tr></table></figure><p>判断集合关系的通用格式：<code>iexpr in {iexpr1, iexpr2, ... , iexprk}</code></p><h3 id="存储器和时钟"><a href="#存储器和时钟" class="headerlink" title="存储器和时钟"></a>存储器和时钟</h3><p>组合电路从本质上讲，不存储任何信息，它们只是简单的根据输入信号产生一个输出信号。为了产生时序电路（sequential circuit），也就是有状态并且在这个状态上进行计算的系统，我们必须引入按位存储信息的设备。存储设备都是由同一个时钟控制，时钟是一个周期性信号，决定什么时候要把新值加载到设备中。考虑两类存储器设备：</p><ul><li><strong>时钟寄存器</strong>（简称寄存器）存储单个位或字。时钟信号控制寄存器加载输入值。</li><li><strong>随机访问存储器</strong>（简称存储器）存储多个字，用地址来选择该读或该写哪个字。随机访问存储器的例子包括：1.处理器的虚拟存储器系统（由硬件和操作系统结合起来使处理器可以在一个很大的地址空间内访问任意的字，硬件上包括由缓存、内存、外存）。2.寄存器文件，在此，寄存器标识符作为地址。在IA32或Y86处理器中，寄存器文件有8个程序寄存器（%eax、%ecx等）。</li></ul><p>正如我们看到的那样，在说到硬件和机器级编程时，“寄存器”这个词是有两个不同的意思的。需要避免歧义的时候，我们分别称呼这两类寄存器为：<code>硬件寄存器</code>和<code>程序寄存器</code>。</p><p>下图说明了硬件寄存器是如何工作的：</p><p><img src="../../../../images/2018/硬件寄存器.png" alt="硬件寄存器"></p><p>寄存器是作为电路不同部分中的组合逻辑之间的屏障。我们的Y86处理器会用时钟寄存器保存程序计数器（PC），条件码（CC）和程序状态（Stat）。</p><p>下图展示了一个典型的寄存器文件：</p><p><img src="../../../../images/2018/寄存器文件.png" alt="寄存器文件"></p><p>寄存器文件有两个读端口，一个写端口。每个端口都有一个地址输入，地址是图4-4中的寄存器标识符。这样一个多端口随机访问存储器允许同时进行多个读和写操作。</p><p>虽然寄存器文件不是组合电路，因为它有内部存储。不过在我们的实现中，从寄存器文件中读数据就好像它是一个以地址为输入、数据为输出的一个组合逻辑块。当srcA或srcB被设成某个寄存器ID时，在一段延迟之后，存储在相应寄存器上的值就会出现在valA或valB上。</p><p>向寄存器文件写入字是由时钟信号控制的，控制方式类似于将值加载到时钟寄存器。每次时钟上升时，输入valW上的值会被写入dstW指明的寄存器上。当dstW设为特殊的ID值0xF时，不会写任何程序寄存器。</p><p>由于寄存器文件既可以读又可以写，一个很自然的问题就是：如果我们同时读和写一个程序寄存器会发生什么？答案简单明了：我们会看到一个旧值到新值的变化。所以在设计处理器的时候要把这个问题考虑进去。</p><p>我们的处理器有一个随机访问存储器，如下图所示：</p><p><img src="../../../../images/2018/随机访问存储器.png" alt="随机访问存储器"></p><p>同寄存器文件一样，从存储器中读的操作方式类似于组合逻辑：如果我们在输入address上提供一个地址，并将write控制信号设置为0，那么经过一些延迟之后，存储在那个地址上的值会出现在输出data上。如果地址超出了范围，error信号会置为1，否则就是0。</p><p>写存储器是由时钟控制的：我们将address设置为期望的地址，将data in设置为期望的值，而write设置为1。然后我们控制时钟时，只要地址是合法的，就会更新相应的地址中的值，如果是非法地址，error就会置为1。</p><h2 id="Y86的顺序实现"><a href="#Y86的顺序实现" class="headerlink" title="Y86的顺序实现"></a>Y86的顺序实现</h2><h3 id="将处理组织成阶段"><a href="#将处理组织成阶段" class="headerlink" title="将处理组织成阶段"></a>将处理组织成阶段</h3><ul><li><strong>取指（fetch）</strong>：从存储器取指令，地址为PC所指的地址。从指令中抽取出指令指示符字节的两个四位部分，称为icode（指令代码）和ifun（指令功能）。</li><li><strong>译码（decode）</strong>：译码阶段从寄存器文件最多读入两个操作数，得到值valA和valB（如果是两个的话）。通常，它读入指令rA和rB字段指明的寄存器，不过有些指令是读寄存器%esp的。</li><li><strong>执行（execute）</strong></li><li><strong>访存（memory）</strong>：访存阶段可以将数据写入存储器，或者从存储器读出数据。读出的值为valM。</li><li><strong>写回（write back）</strong>：写回阶段最多可以写两个结果到寄存器文件。</li><li><strong>更新PC（PC update）</strong>：将PC设置成下一条指令的地址。</li></ul><p>处理器无限循环，执行这些阶段。在我们简化的实现中，发生任何异常时，处理器就会停止。比如：它执行halt指令或非法指令，或者它试图读或者写非法地址。在更完整的设计中，处理器会进入异常处理模式，开始执行由异常的类型决定的特殊代码。</p><p>在硬件上复制逻辑块的成本比软件中有重复代码的成本要大得多。而且在硬件系统中处理许多特殊情况和特性要比用软件来处理困难得多。</p><p>我们面临的一个挑战是将每条不同指令所需要的计算放入到上述的通用框架中。我们会使用图4-17中所示的代码来描述不同的Y86指令的处理。图4-18到4-21描述了不同Y86指令在各阶段是怎样处理的。</p><p><img src="../../../../images/2018/Y86指令阶段解析.png" alt="Y86指令阶段解析"></p><p><img src="../../../../images/2018/4-18.png" alt="4-18"></p><p>让我们看一个具体的例子，图4-17中的第三条指令：</p><p><img src="../../../../images/2018/subl指令.png" alt="subl指令"></p><p><img src="../../../../images/2018/4-19.png" alt="4-19"></p><p>图4-17中第五条指令：</p><p><img src="../../../../images/2018/rmmovl指令.png" alt="rmmovl指令"></p><p><img src="../../../../images/2018/4-20.png" alt="4-20"></p><p>图4-17中第六条指令：</p><p><img src="../../../../images/2018/pushl指令.png" alt="pushl指令"></p><p>图4-21表明了三类控制转义指令的处理：各种跳转、call和ret。</p><p><img src="../../../../images/2018/4-21.png" alt="4-21"></p><p>图4-17中第8条指令：</p><p><img src="../../../../images/2018/je指令.png" alt="je指令"></p><p>图4-17中第13条指令：</p><p><img src="../../../../images/2018/ret指令.png" alt="ret指令"></p><h2 id="SEQ硬件结构"><a href="#SEQ硬件结构" class="headerlink" title="SEQ硬件结构"></a>SEQ硬件结构</h2><p><img src="../../../../images/2018/SEQ硬件结构.png" alt="SEQ硬件结构"></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>程序的机器级表示</title>
      <link href="/blog/2018/10/08/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
      <url>/blog/2018/10/08/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="从编译C语言文件说起"><a href="#从编译C语言文件说起" class="headerlink" title="从编译C语言文件说起"></a>从编译C语言文件说起</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc <span class="number">-01</span> -o p p1.c p2.c</span><br></pre></td></tr></table></figure><p>使用了gcc命令来编译，也可以简单写作：<code>cc</code>。</p><p>优化层级为1，1级是最低的，层级越高程序优化越好，但增加了编译时间，也使调试变得更难，且跟源程序差异很大不便于理解。</p><p>编译的流程是：</p><ol><li>预处理器（preprocessor）把诸如：<code>#include</code>、<code>#define</code>、<code>#if</code>、<code>#else</code>、<code>#elif</code>、<code>#ifdef</code>、<code>#endif</code>等预编译指令替换掉。</li><li>编译器（compiler）把<code>.c</code>源文件编译成<code>.s</code>的汇编代码文件。</li><li>汇编器（assembler）把汇编代码文件转换成相应的二进制目标文件<code>.o</code>，目标文件已经是机器码了，只是没有填入全局变量的地址。</li><li>链接器（linker），把多目标文件和库函数链接在一起，形成可执行文件。</li></ol><a id="more"></a><p><strong>instruction set architecture，ISA，指令集体系结构</strong>，定义了处理器状态，指令的格式和行为。intel的指令集包括32位的：IA32，以及64位的：x86-64。</p><p>编译器做了整个编译流程的大部分工作，汇编代码几乎就是机器码的供人阅读版。所以看懂汇编代码是关键。</p><p>IA32程序代码和C语言很不相同，一些在C语言下看不到的处理器状态可以在这里看到：</p><ul><li>程序计数器（program counter，PC，也叫：instructor pointer，IP）在IA32中叫：<code>%eip</code>，指出下一条指令在内存中的位置</li><li>整数寄存器，可以用来保存数据</li><li>状态码寄存器，可以用来实现条件控制代码如：if和while</li><li>浮点寄存器，用来计算浮点数</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> accum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = x + y;</span><br><span class="line">    accum += t;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要看到编译出的汇编代码，可以使用<code>-S</code>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -S code.c</span><br></pre></td></tr></table></figure><p>这样就会使编译流程停留在 <strong>预处理-&gt;编译</strong> 阶段，而不是继续进行接下来的汇编和链接，生成的文件是：<code>.s</code>汇编文件。编译后的汇编代码中会包含如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum:</span><br><span class="line">    pushl %ebp</span><br><span class="line">    movl %esp, %ebp</span><br><span class="line">    movl 12(%ebp), %eax</span><br><span class="line">    addl 8(%ebp), %eax</span><br><span class="line">    addl %eax, accum</span><br><span class="line">    popl %ebp</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>这段代码中的每一句都对应一个机器指令，比如pushl这句的意思就是把寄存器%ebp的内容push到程序栈（内存中）上。<strong>在汇编代码里所有的局部变量都不见了，全局变量还可以看到，因为编译器还没有决定这个变量在内存中的存储位置。</strong></p><p>如果我们使用<code>-c</code>选项，GCC就会既编译又汇编：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -c code.c</span><br></pre></td></tr></table></figure><p>这样就生成了目标文件<code>code.o</code>，在800bytes的code.o文件中，有17bytes是对应上面的汇编代码的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55 89 e5 8b 45 0c 03 45 08 01 05 00 00 00 00 5d c3</span><br></pre></td></tr></table></figure><p>可以使用反汇编将难懂的目标文件代码转成汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -d code.o</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/反汇编.png" alt="反汇编"></p><ul><li>IA32指令的长度是1到15字节，越常用的，操作数越少的指令越短，反之则越长。</li><li>给定一个开始的位置，只对应一种机器指令，比如只有<code>pushl %ebp</code>指令是以55开头的</li><li>反汇编只需要根据目标文件就可以翻译出汇编文件</li><li>反汇编出来的文件跟直接编译的汇编文件有些不一样，比如所有指令都省略了后缀<code>l</code>。<code>l</code>是大小指示符，而大多数情况下是可以省略l的。</li></ul><blockquote><p>头两个属性跟<a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">哈夫曼编码</a>的原理是一致的，可以说这是一种通用的编码原则，第一条用来保证节省字节空间，第二条则保证编码的唯一性。</p></blockquote><p>生成真正可执行的文件还需要链接操作，而且必须包含main函数。假设我们的<code>main.c</code>文件如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用如下指令生成可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -o prog code.o main.c</span><br></pre></td></tr></table></figure><p>prog文件增长到了9123bytes，因为它不仅包含我们写的代码，而且包含了用来开始和结束的程序，以及与操作系统进行交互的程序。</p><p><img src="../../../../images/2018/链接之后的反汇编代码1.png" alt="链接之后的反汇编代码1"></p><p><img src="../../../../images/2018/链接之后的反汇编代码2.png" alt="链接之后的反汇编代码2"></p><p>可以看到第6行，全局变量在链接的时候定址。</p><h2 id="汇编代码的格式"><a href="#汇编代码的格式" class="headerlink" title="汇编代码的格式"></a>汇编代码的格式</h2><p>假设我们有一个C语言文件<code>simple.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">simple</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> y)</span> 2</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *xp + y;</span><br><span class="line">    *xp = t;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到如下汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.file   &quot;simple.c&quot;</span><br><span class="line">  .text</span><br><span class="line">.globl simple</span><br><span class="line">  .type   simple, @function</span><br><span class="line">simple:</span><br><span class="line">  pushl   %ebp</span><br><span class="line">  movl    %esp, %ebp</span><br><span class="line">  movl    8(%ebp), %edx</span><br><span class="line">  movl    12(%ebp), %eax</span><br><span class="line">  addl    (%edx), %eax</span><br><span class="line">  movl    %eax, (%edx)</span><br><span class="line">  popl    %ebp</span><br><span class="line">  ret</span><br><span class="line">  .size   simple, .-simple</span><br><span class="line">  .ident  &quot;GCC: (Ubuntu 4.3.2-1ubuntu11) 4.3.2&quot;</span><br><span class="line">  .section        .note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><p>所有以<code>.</code>开头的行都是用来指导汇编器和链接器的，我们不用去管。而这段代码的大概意思如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">simple:</span><br><span class="line">    pushl %ebp           保存帧指针</span><br><span class="line">    movl  %esp, %ebp     创建新的帧指针</span><br><span class="line">    movl  8(%ebp), %edx  从内存中读取xp</span><br><span class="line">    movl  12(%ebp), %eax 从内存中读取y</span><br><span class="line">    addl  (%edx), %eax   *xp+y=t</span><br><span class="line">    movl  %eax, (%edx)   把t存到xp指向的地址中</span><br><span class="line">    popl  %ebp           重新获取帧指针</span><br><span class="line">    ret                  返回</span><br></pre></td></tr></table></figure><blockquote><p>这段代码对%ebp和%esp的操作涉及到了程序栈模型，看不懂很正常，文章下面会有讲解的。</p></blockquote><h3 id="ATT和intel汇编格式"><a href="#ATT和intel汇编格式" class="headerlink" title="ATT和intel汇编格式"></a>ATT和intel汇编格式</h3><p>ATT即AT&amp;T，是贝尔实验室旗下的公司。</p><p>GCC和OBJDUMP默认生成ATT格式的汇编代码，微软和因特尔的编程工具则默认生成intel格式的汇编代码。</p><p>使用如下命令可以让GCC生成intel格式的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -01 -S -masm=intel code.c</span><br></pre></td></tr></table></figure><p>两者的区别如下：</p><ul><li>intel代码省略了用来指定大小的后缀，比如使用<code>mov</code>而不是<code>movl</code></li><li>intel代码省略了寄存器前面的%，比如使用<code>esp</code>而不是<code>%esp</code></li><li>intel代码用了不同的方式来描述内存地址，比如使用<code>DWORD PTR [ebp+8]</code>而不是<code>8(%ebp)</code></li><li>intel代码多操作数指令的操作数顺序跟ATT相反</li></ul><p>由于是由16bit架构扩展到32bit架构的，intel管16bit数据类型叫：<code>word</code>，32bit数据类型叫：<code>double words</code>，64bit数据类型叫：<code>quad words</code>。</p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p><img src="../../../../images/2018/数据格式.png" alt="数据格式"></p><h2 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h2><p>IA32 CPU 包含了8个寄存器，每个有32bit存储空间，用来存储整形值以及指针。</p><p><img src="../../../../images/2018/IA32寄存器.png" alt="IA32寄存器"></p><p>x86-64则进一步扩展了这些寄存器：</p><p><img src="../../../../images/2018/x86-64寄存器.jpg" alt="x86-64寄存器"></p><p>前六个寄存器称为通用寄存器，有其特定的用途：</p><ul><li>%rax(%eax) 用于做累加，过程调用返回值</li><li>%rcx(%ecx) 用于计数</li><li>%rdx(%edx) 用于保存数据</li><li>%rbx(%ebx) 用于做内存查找的基础地址</li><li>%rsi(%esi) 用于保存源索引值</li><li>%rdi(%edi) 用于保存目标索引值</li></ul><h3 id="操作数指示符"><a href="#操作数指示符" class="headerlink" title="操作数指示符"></a>操作数指示符</h3><p><img src="../../../../images/2018/操作数指示符.png" alt="操作数指示符"></p><p>有三种类型的操作数，立即数(Imm)、寄存器值(Reg)、内存值(Mem)。</p><h3 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h3><p><img src="../../../../images/2018/mov指令.png" alt="mov指令"></p><p><img src="../../../../images/2018/汇编栈操作.png" alt="汇编栈操作"></p><p><code>pushl %ebp</code>指令等价于下面的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subl $4,%esp     减小栈指针</span><br><span class="line">movl %ebp,(%esp) 把%ebp中的数据写到%esp指向的内存中</span><br></pre></td></tr></table></figure><p><code>popl %eax</code>指令等价于下面的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl (%esp), %ebp  把%esp指向的内存地址中的值读到%eax中</span><br><span class="line">addl $4, %esp      增加栈指针</span><br></pre></td></tr></table></figure><h2 id="算术和逻辑操作"><a href="#算术和逻辑操作" class="headerlink" title="算术和逻辑操作"></a>算术和逻辑操作</h2><p>load effective address，leal指令，实际上是一个movl指令。</p><p><img src="../../../../images/2018/算术和逻辑操作指令.png" alt="算术和逻辑操作指令"></p><p>多个操作数的指令，注意一下两个操作数的顺序即可</p><h3 id="位移操作"><a href="#位移操作" class="headerlink" title="位移操作"></a>位移操作</h3><p>位移的值是用一个单字节来表示，且数值只能是0到31，所以这个字节只有低五位才会被考虑。</p><h3 id="扩展乘除指令"><a href="#扩展乘除指令" class="headerlink" title="扩展乘除指令"></a>扩展乘除指令</h3><p><img src="../../../../images/2018/扩展乘除操作.png" alt="扩展乘除操作"></p><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>使用单比特的状态码来描述算数和逻辑运算的状态。最常用的状态码如下：</p><ul><li>CF: carry flag 进位符，用来表示最高位的进位。通常用来检测无符号运算的溢出</li><li>ZF: zero flag，零标志符，最近的操作产生了0</li><li>SF: sign flag，符号位，最近的操作产生了负数</li><li>OF: overflow flag，溢出符，补码溢出，正负都可以，表示有符号溢出</li></ul><p><img src="../../../../images/2018/流程控制指令.png" alt="流程控制指令"></p><p>举个例子：t=a+b，a、b、t都是整形数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CF: (unsigned)t&lt;(unsigned)a       无符号溢出</span><br><span class="line">ZF: (t==0)                        零</span><br><span class="line">SF: (t&lt;0)                         负数</span><br><span class="line">OF: (a&lt;0 == b&lt;0) &amp;&amp; (t&lt;0 != a&lt;0)  有符号溢出</span><br></pre></td></tr></table></figure><blockquote><p>OF的表达式也可以写作：(a&lt;0 &amp;&amp; b<0 && t>0) || (a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; t&lt;0)，也就是说a、b都是负数相加却是正数，或者a、b都是正数相加却是负数，这两种情况就代表溢出了。</0></p></blockquote><p>leal操作不会改变状态码，因为这个指令只是用来计算地址。除此之外表3.7中的所有操作都可能改变状态码。例如逻辑操作：XOR，会使CF和OF置零，移位操作会使CF置为最后一个移位出去的bit，但OF要置零。自增和自减指令会设置OF和ZF，不设置CF。</p><p>CMP指令类似于SUB指令，但只修改状态码而不改变其他寄存器，如果两个操作数相等，ZF就会被设置；TEST指令类似于AND指令，但只修改状态码而不改变其他寄存器，如果两个操作数是重复的： testl %eax,%eax，作用是检测%eax是0，还是正数，还是负数。</p><h3 id="访问状态码"><a href="#访问状态码" class="headerlink" title="访问状态码"></a>访问状态码</h3><p>有三种常用的方式访问状态码：</p><ol><li>根据几个状态码的逻辑组合，设置单个字节为0或1，也就是set指令</li><li>根据状态码，跳转到程序的其他分支</li><li>根据状态码传送数据</li></ol><p><img src="../../../../images/2018/set指令.png" alt="set指令"></p><p>举个例子：计算<code>a&lt;b</code>，a和b都是int型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a is in %edx, b is in %eax</span><br><span class="line">cmpl   %eax, %edx       Compare a:b</span><br><span class="line">setl   %al              Set low order byte of %eax to 0 or 1</span><br><span class="line">movzbl %al, %eax        Set remaining byte of %eax to 0</span><br></pre></td></tr></table></figure><p>setl 指令是：<code>D &lt;- SF^OF</code>，也就是有两种情况代表 <code>a-b&lt;0</code>：</p><ol><li>OF=0（a-b没有发生溢出），且SF=1（a-b结果为负）</li><li>OF=1（a-b发生了溢出），且SF=0（a-b结果为非负）</li></ol><p>第二种情况比较复杂，需要简单分析一下。a-b发生了溢出，有两种情况：<strong>正溢出和负溢出</strong>。负溢出：a是负数，b是正数，但a-b结果为正（结果小于了最小的负数，发生溢出）；正溢出：a是正数，b是负数，但a-b结果为负（结果大于了最大的正数，发生溢出）。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-128： 1000 0000</span><br><span class="line">127:   0111 1111</span><br><span class="line">-127:  1000 0001</span><br></pre></td></tr></table></figure><p>a=-128, b=127, a-b=-128-127= $(1 0000 0001)_2$ , 从结果上来看就变成了1（正数），这就是负溢出</p><p>a=127, b=-127, a-b=127-(-127) = $(1111 1110)_2$ , 从结果上来看就变成了 -2（负数），这就是正溢出</p><p>OF=1, SF=0，就是负溢出，而负溢出代表着a是负数，b是正数，也就是<code>a&lt;b</code></p><p>其他三个有符号比较以此类推。</p><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p><img src="../../../../images/2018/跳转指令.png" alt="跳转指令"></p><p>可以看到条件跳转必须是直接的，而无条件跳转可以使用操作数。</p><p>跳转位置的编码有两种：</p><ol><li>借助PC使用相对定位</li><li>使用绝对定位</li></ol><p>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jle .L2                  if &lt;=, goto dest2</span><br><span class="line">  .L5:                   dest1:</span><br><span class="line">  movl %edx, %eax</span><br><span class="line">  sarl %eax</span><br><span class="line">  subl %eax, %edx</span><br><span class="line">  leal (%edx,%edx,2), %edx</span><br><span class="line">  testl %edx, %edx</span><br><span class="line">jg .L5                   if &gt;, goto dest1</span><br><span class="line">  .L2:                   dest2:</span><br><span class="line">   movl %edx, %eax</span><br></pre></td></tr></table></figure><p>目标文件和汇编文件对应如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">8: 7e 0d                 jle 17 &lt;silly+0x17&gt; Target = dest2</span><br><span class="line">a: 89 d0                 mov %edx,%eax dest1:</span><br><span class="line">c: d1 f8                 sar %eax</span><br><span class="line">e: 29 c2                 sub %eax,%edx</span><br><span class="line">10: 8d 14 52             lea (%edx,%edx,2),%edx</span><br><span class="line">13: 85 d2                test %edx,%edx</span><br><span class="line">15: 7f f3                jg a &lt;silly+0xa&gt; Target = dest1</span><br><span class="line">17: 89 d0                mov %edx,%eax dest2:</span><br></pre></td></tr></table></figure><p>对应的关系是：<code>0xd+0xa=0x17</code>，<code>0xf3+0x17=0xa</code>，为什么是加下一条指令的地址而不是当前指令呢？这个传统要追溯到计算机的早期实现，当时的处理器会在执行每一条指令之前先更新一下PC（program counter）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">804839c: 7e 0d           jle 80483ab &lt;silly+0x17&gt;</span><br><span class="line">804839e: 89 d0           mov %edx,%eax</span><br><span class="line">80483a0: d1 f8           sar %eax</span><br><span class="line">80483a2: 29 c2           sub %eax,%edx</span><br><span class="line">80483a4: 8d 14           52 lea (%edx,%edx,2),%edx</span><br><span class="line">80483a7: 85 d2           test %edx,%edx</span><br><span class="line">80483a9: 7f f3           jg 804839e &lt;silly+0xa&gt;</span><br><span class="line">80483ab: 89 d0           mov %edx,%eax</span><br></pre></td></tr></table></figure><p>从反汇编代码来看，<strong>跳转如果使用PC相对地址，则不管代码存储到内存中的哪个位置，跳转的地址都不需要修改，且需要的编码更短</strong>。</p><h3 id="翻译条件分支"><a href="#翻译条件分支" class="headerlink" title="翻译条件分支"></a>翻译条件分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(test-expr)</span><br><span class="line">  then-statement</span><br><span class="line">else</span><br><span class="line">  else-statement</span><br></pre></td></tr></table></figure><p>先写成等价的goto版本，然后就可以很轻松的转成汇编了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t=test-expr;</span><br><span class="line">if(!t)</span><br><span class="line">  goto false;</span><br><span class="line">  then-statement</span><br><span class="line">  goto done;</span><br><span class="line">false:</span><br><span class="line">  else-statement</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p>从汇编的角度看 <code>&amp;&amp;短路</code> 原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void cond(int a, int *p)</span><br><span class="line">&#123;</span><br><span class="line">  if (p &amp;&amp; a &gt; 0)</span><br><span class="line">  *p += a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a %ebp +8, p at %ebp +12</span><br><span class="line"></span><br><span class="line">movl 8(%ebp), %edx</span><br><span class="line">movl 12(%ebp), %eax</span><br><span class="line">testl %eax, %eax</span><br><span class="line">je .L3</span><br><span class="line">testl %edx, %edx</span><br><span class="line">jle .L3</span><br><span class="line">addl %edx, (%eax)</span><br><span class="line">.L3:</span><br></pre></td></tr></table></figure><p>可以看到第一个条件通不过的时候就跳过了第二个条件判断。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">  body-statement</span><br><span class="line">  while(test-expr)</span><br></pre></td></tr></table></figure><p>goto版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line">  body-statement</span><br><span class="line">  t = test-expr;</span><br><span class="line">  if (t)</span><br><span class="line">goto loop;</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/while的汇编形式.png" alt="while的汇编形式"></p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while (test-expr)</span><br><span class="line">  body-statement</span><br></pre></td></tr></table></figure><p>先转成do while形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (!test-expr)</span><br><span class="line">  goto done;</span><br><span class="line">do</span><br><span class="line">  body-statement</span><br><span class="line">  while (test-expr);</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p>在把do while转成goto版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t = test-expr;</span><br><span class="line">if (!t)</span><br><span class="line">  goto done;</span><br><span class="line">loop:</span><br><span class="line">  body-statement</span><br><span class="line">  t = test-expr;</span><br><span class="line">  if (t)</span><br><span class="line">    goto loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (init-expr; test-expr; update-expr)</span><br><span class="line">  body-statement</span><br></pre></td></tr></table></figure><p>先转成while形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init-expr;</span><br><span class="line">while (test-expr) &#123;</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后转成do while形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">init-expr;</span><br><span class="line">if (!test-expr)</span><br><span class="line">  goto done;</span><br><span class="line">do &#123;</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr;</span><br><span class="line">&#125; while (test-expr);</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p>最后转成do while的goto版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">init-expr;</span><br><span class="line">t = test-expr;</span><br><span class="line">if (!t)</span><br><span class="line">  goto done;</span><br><span class="line">loop:</span><br><span class="line">  body-statement</span><br><span class="line">  update-expr;</span><br><span class="line">  t = test-expr;</span><br><span class="line">  if (t)</span><br><span class="line">    goto loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h3 id="状态转移指令"><a href="#状态转移指令" class="headerlink" title="状态转移指令"></a>状态转移指令</h3><p><img src="../../../../images/2018/状态表达式.png" alt="状态表达式"></p><p><img src="../../../../images/2018/状态转移指令.png" alt="状态转移指令"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = test-expr ? then-expr : else-expr;</span><br></pre></td></tr></table></figure><p>goto版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (!test-expr)</span><br><span class="line">  goto false;</span><br><span class="line">v = true-expr;</span><br><span class="line">goto done;</span><br><span class="line">false:</span><br><span class="line">  v = else-expr;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch主要使用了跳转表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">switch_eg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = x;</span><br><span class="line">  <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">      result *= <span class="number">13</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">102</span>:</span><br><span class="line">      result += <span class="number">10</span>;</span><br><span class="line">      <span class="comment">/* Fall through */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">103</span>:</span><br><span class="line">      result += <span class="number">11</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">104</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">106</span>:</span><br><span class="line">      result *= result;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">switch_eg_impl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Table of code pointers */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> *jt[<span class="number">7</span>] = &#123;</span><br><span class="line">    &amp;&amp;loc_A, &amp;&amp;loc_def, &amp;&amp;loc_B,</span><br><span class="line">    &amp;&amp;loc_C, &amp;&amp;loc_D, &amp;&amp;loc_def,</span><br><span class="line">    &amp;&amp;loc_D</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">unsigned</span> index = n - <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">goto</span> loc_def;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Multiway branch */</span></span><br><span class="line">  <span class="keyword">goto</span> *jt[index];</span><br><span class="line"></span><br><span class="line">  loc_def: <span class="comment">/* Default case*/</span></span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">  loc_C: <span class="comment">/* Case 103 */</span></span><br><span class="line">    result = x;</span><br><span class="line">    <span class="keyword">goto</span> rest;</span><br><span class="line"></span><br><span class="line">  loc_A: <span class="comment">/* Case 100 */</span></span><br><span class="line">    result = x * <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">  loc_B: <span class="comment">/* Case 102 */</span></span><br><span class="line">    result = x + <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/* Fall through */</span></span><br><span class="line"></span><br><span class="line">  rest: <span class="comment">/* Finish case 103 */</span></span><br><span class="line">    result += <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">  loc_D: <span class="comment">/* Cases 104, 106 */</span></span><br><span class="line">    result = x * x;</span><br><span class="line">    <span class="comment">/* Fall through */</span></span><br><span class="line"></span><br><span class="line">  done:</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码如下：</p><p><img src="../../../../images/2018/switch汇编代码.png" alt="switch汇编代码"></p><p><img src="../../../../images/2018/switch跳转表1.png" alt="switch跳转表1"></p><p><img src="../../../../images/2018/switch跳转表2.png" alt="switch跳转表2"></p><p>跳转表的步长是4</p><blockquote><p>.rodata的意思是：read only data</p></blockquote><h2 id="过程调用"><a href="#过程调用" class="headerlink" title="过程调用"></a>过程调用</h2><p><img src="../../../../images/2018/程序栈内存结构.png" alt="程序栈内存结构"></p><p>有以下几个要点：</p><ol><li>栈是倒着长的</li><li>每个过程调用都有一个stack frame，栈帧</li><li>栈顶帧用两个指针来维护，一个是帧起址：%ebp，一个是栈指针：%esp指向栈顶。</li></ol><p>%esp在过程运行的时候可能会被抹掉，这时候可以通过%ebp来定位。</p><p>可以看到返回地址在每一帧的最后。而每一帧的第一个位置存放着上一帧的帧起址%ebp。帧的中间则放置局部变量、过程参数等值。</p><p>有以下几种情况会将局部变量放到栈帧中：</p><ol><li>局部变量多到寄存器放不下</li><li>局部变量是数组或者结构体，必须用到引用</li><li>局部变量使用了取址符<code>&amp;</code>，所以我们必须给它生成地址</li></ol><h3 id="转移控制"><a href="#转移控制" class="headerlink" title="转移控制"></a>转移控制</h3><p><img src="../../../../images/2018/转移控制指令.png" alt="转移控制指令"></p><p>call指令的效果是：把返回地址push到栈中，然后跳到调用程序的地址（也就是把PC设置一下）。<strong>返回地址</strong>是汇编代码中call指令后面那条指令的地址。</p><p>ret指令把栈顶的返回地址pop出来，并跳转到这个地址。</p><p><img src="../../../../images/2018/程序调用模型.png" alt="程序调用模型"></p><h3 id="寄存器使用传统"><a href="#寄存器使用传统" class="headerlink" title="寄存器使用传统"></a>寄存器使用传统</h3><p>%eax, %edx, %ecx是调用者保存寄存器。也就是说当过程Q被过程P调用，过程Q可以随意的写这三个寄存器，因为在调用Q之前P必须保存这三个寄存器的值。</p><p>%ebx, %esi, %edi是被调用者保存寄存器。也就是说在过程Q写这些寄存器之前，必须保存里面的值，并在return之前恢复原样。</p><h3 id="过程调用例子"><a href="#过程调用例子" class="headerlink" title="过程调用例子"></a>过程调用例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int swap_add(int *xp, int *yp)</span><br><span class="line">&#123;</span><br><span class="line">  int x = *xp;</span><br><span class="line">  int y = *yp;</span><br><span class="line"></span><br><span class="line">  *xp = y;</span><br><span class="line">  *yp = x;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int caller()</span><br><span class="line">&#123;</span><br><span class="line">  int arg1 = 534;</span><br><span class="line">  int arg2 = 1057;</span><br><span class="line"></span><br><span class="line">  int sum = swap_add(&amp;arg1, &amp;arg2);</span><br><span class="line">  int diff = arg1 - arg2;</span><br><span class="line">  return sum * diff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../images/2018/过程调用内存模型.png" alt="过程调用内存模型"></p><p>一些编程语言，比如Pascal，提供了值传参和引用传参。但C语言只有值传参，C++提供了引用传参。C语言可以通过指针来实现引用传参。</p><p><img src="../../../../images/2018/过程调用汇编代码.png" alt="过程调用汇编代码"></p><p>总共申请了24字节的空间，8字节用来存局部变量，8字节用来存参数，还有8字节未使用。</p><blockquote><p>为什么要浪费8字节，原因是：内存对齐。GCC遵循一个x86编程方针：栈空间必须是16的整数倍，包括保存%ebp的4字节和返回地址的4字节。这里总共加起来是24字节，所以需要额外的8字节填充成32字节。</p></blockquote><p>swap_add的汇编代码如下：</p><p>分为三个部分：setup、body、finish</p><p>setup:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swap_add:</span><br><span class="line">  pushl %ebp                  Save old %ebp</span><br><span class="line">  movl %esp, %ebp             Set %ebp as frame pointer</span><br><span class="line">  pushl %ebx                  Save %ebx</span><br></pre></td></tr></table></figure><p>首先要保存调用者的帧基指针，然后重新设置当前帧基指针，然后如果用到%ebx,%esi,%edi等寄存器就需要保存。</p><p>body:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">movl 8(%ebp), %edx            Get xp</span><br><span class="line">movl 12(%ebp), %ecx           Get yp</span><br><span class="line">movl (%edx), %ebx             Get x</span><br><span class="line">movl (%ecx), %eax             Get y</span><br><span class="line">movl %eax, (%edx)             Store y at xp</span><br><span class="line">movl %ebx, (%ecx)             Store x at yp</span><br><span class="line">addl %ebx, %eax               Return value = x+y</span><br></pre></td></tr></table></figure><p>获取参数，进行计算。</p><p>finish:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">popl %ebx                     Restore %ebx</span><br><span class="line">popl %ebp                     Restore %ebp</span><br><span class="line">ret                           Return</span><br></pre></td></tr></table></figure><p>恢复两个寄存器，同时%esp回到了上一个帧的栈顶，指向了返回地址，然后ret指令就可以把PC置为返回地址了，这样就完成了控制权的转移。</p><p>然后执行调用完swap_add之后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movl -4(%ebp), %edx</span><br><span class="line">subl -8(%ebp), %edx</span><br><span class="line">imull %edx, %eax</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>leave指令的作用是重置栈指针和帧指针，也可以使用popl来重置，很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//使%esp指向%ebp的地址（也就是Saved %ebp那里）</span><br><span class="line">movl %ebp, %esp</span><br><span class="line">//popl指令会导致%esp+4，所以%esp之后会指向上一帧的帧尾（也就是Return Address那里），popl的内容则放到了%ebp里面</span><br><span class="line">popl %ebp</span><br></pre></td></tr></table></figure><p>而之后的<code>ret</code>指令继续将<code>Return Address</code> pop出来，并将<code>Return Address</code>放到PC中。</p><p>从这个例子我们可以看出，编译器遵循一组简单的惯例来管理栈结构。</p><ol><li>通过%ebp加偏移量（+8,+12,...）访问参数</li><li>通过push指令或者栈指针减偏移量来分配栈空间</li><li>在返回前恢复保存好的寄存器，并使栈指针指向调用者的返回地址（Return Address）</li></ol><p>数组、多维数组、结构体、联合体这些都比较简单，这里略过。</p><blockquote><p>要注意的点：只有call才会push一个返回地址，所以swap_add的栈帧中并没有返回地址，说明它没有调用其他函数</p></blockquote><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>每种数据类型都有对应的指针类型，但指针类型不是机器码的一部分，只是C语言提供的一种抽象，帮助程序员避免犯错。</p><h2 id="内存引用越界和缓冲区溢出"><a href="#内存引用越界和缓冲区溢出" class="headerlink" title="内存引用越界和缓冲区溢出"></a>内存引用越界和缓冲区溢出</h2><p>我们可以看到C语言对数组引用没有任何边界检查，而且栈里面既保存了局部变量又保存了寄存器值以及返回地址。所以一旦数组越界写就会破坏整个程序的运行。</p><p>看下面这个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Sample implementation of library function gets() */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">gets</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">char</span> *dest = s;</span><br><span class="line">  <span class="keyword">int</span> gotchar = <span class="number">0</span>; <span class="comment">/* Has at least one character been read? */</span></span><br><span class="line">  <span class="keyword">while</span> ((c = getchar()) != <span class="string">'\n'</span> &amp;&amp; c != EOF) &#123;</span><br><span class="line">    *dest++ = c; <span class="comment">/* No bounds checking! */</span></span><br><span class="line">    gotchar = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *dest++ = <span class="string">'\0'</span>; <span class="comment">/* Terminate string */</span></span><br><span class="line">  <span class="keyword">if</span> (c == EOF &amp;&amp; !gotchar)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">/* End of file or error */</span></span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read input line and write it back */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">/* Way too small! */</span></span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="built_in">puts</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段C语言代码对应的汇编代码如下：</p><p><img src="../../../../images/2018/gets缓冲区溢出.png" alt="gets缓冲区溢出"></p><p>分配数组空间的时候是直接固定了8字节，这里给buf分配的空间也是8字节：<code>leal -12(%ebp), %ebx</code>，并把buf作为参数放置于栈顶。</p><p><img src="../../../../images/2018/缓冲区溢出内存模型.png" alt="缓冲区溢出内存模型"></p><p>我们可以看到，当读写buf[8]的时候，实际上是在读写<code>Saved %ebx</code>。</p><p><img src="../../../../images/2018/缓冲区攻击范围.png" alt="缓冲区攻击范围"></p><p>通常给被攻击的程序输入一个字符串，这个字符串包含了可执行代码的字节编码，如果我们通过缓冲区溢出修改了返回地址，那么ret指令就可以跳转到我们攻击代码的位置。</p><blockquote><p>蠕虫（worms）和病毒（viruses）的区别：相同点：都可以复制和传播自身，不同点：蠕虫可以自己运行，病毒是把自己加入到其他程序中，包括操作系统代码，病毒是不能独立运行的。</p></blockquote><h3 id="对抗缓冲区溢出攻击的方法"><a href="#对抗缓冲区溢出攻击的方法" class="headerlink" title="对抗缓冲区溢出攻击的方法"></a>对抗缓冲区溢出攻击的方法</h3><h4 id="栈随机化"><a href="#栈随机化" class="headerlink" title="栈随机化"></a>栈随机化</h4><p>攻击者需要插入攻击代码（一个字符串），并知道攻击代码的位置（也就是字符串存放的栈地址），而且指向这段字符串的指针也是这个字符串的一部分。如果栈的位置是固定的，那么就很容易猜到攻击代码的存放位置。用如下代码可以检测栈的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> local;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"local at %p\n"</span>, &amp;local);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要打印一个局部变量的地址。</p><p>栈随机化的思想是程序每次运行时栈的位置都不一样，实现方式是：程序开始时，在栈上分配一段0~n字节之间的随机大小的空间，例如使用<code>alloca</code>可以在栈上分配空间。程序不使用这段空间，它的作用是使后续栈的位置发生变化。分配的n必须足够大，这样才能有足够多的变化，但又必须足够小，这样才不会浪费空间。</p><p>栈随机化是更大一类技术的一种，这类技术称为：Address-Space Layout Randomization，ASLR，地址空间布局随机化。但攻击者还是可以采取一定措施来增加攻击成功率，一种常见的手段就是在攻击代码前中插入很长一段的<code>nop</code>指令，这个指令只会使程序计数器（PC）加一，除此之外没有任何副作用。只要攻击者能够猜中这段序列中的某个地址，就可以顺利到达攻击代码。这个序列的常用术语是：<strong>nop sled空操作雪橇</strong>。</p><h4 id="栈破坏检测"><a href="#栈破坏检测" class="headerlink" title="栈破坏检测"></a>栈破坏检测</h4><p>在局部缓冲区和栈状态之间插入一个随机的金丝雀值（也叫哨兵值），一旦发现这个值被改变，就说明缓冲区溢出了，那么就可以将程序异常中止。</p><blockquote><p>攻击者只有输入局部缓冲区变量的权限，所以无从得知金丝雀值。</p></blockquote><p><img src="../../../../images/2018/金丝雀值.png" alt="金丝雀值"></p><p>GCC默认就会插入金丝雀值，如果不想要可以使用参数：<code>-fno-stack-protector</code>来阻止GCC产生这种代码。当不使用此参数时，产生代码如下：</p><p><img src="../../../../images/2018/含金丝雀值汇编码1.png" alt="含金丝雀值汇编码1"></p><p><img src="../../../../images/2018/含金丝雀值汇编码2.png" alt="含金丝雀值汇编码2"></p><p>指令参数<code>%gs20, %eax</code>指明金丝雀值使用 segmented addressing（段寻址）从存储器中读入。将段标志为只读，这样攻击者就不能同时修改段中的金丝雀值。最后使用<code>xorl</code>比较段和栈中的金丝雀值，如果不相等则<code>call __stack_chk_fail</code>。</p><p>这种做法可以带来很小的性能损失。</p><h4 id="限制可执行代码区域"><a href="#限制可执行代码区域" class="headerlink" title="限制可执行代码区域"></a>限制可执行代码区域</h4><p>在典型的程序中，只有保存编译器产生的代码的那一部分存储空间才需要是可执行的。其他部分可以被限制为只允许读写。虚拟存储器空间在逻辑上分成了页（page），典型的每页是 2048 或者 4096 字节。由硬件提供存储器保护。以前，x86体系结构将读和执行访问控制合并成一个1位标志，所以任何被标记为可读的部分也是可执行的，当然也有很多机制可以限制一些页是可读的但是不可执行，然而这些机制都很消耗性能。最近，AMD（Advanced Micro Devices）为它的64位处理器的内存加入了 NX, No-eXecute，不可执行位，intel也跟进了，检查页是否可执行由硬件来完成，效率上没有任何损失。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浮点数原理</title>
      <link href="/blog/2018/09/27/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2018/09/27/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>浮点数的作用</strong>：区别于整形数，用来表示小数。可以用来表示很大的数，或者非常接近0的小数，或者近似的做实数计算，浮点数的一般形式：$x\times 2^y$。</p><blockquote><p><strong>IEEE（pronounced “Eye-Triple-Eee”）浮点数标准</strong> 是行业内公认的标准。</p></blockquote><p><strong>rounding</strong>：when a number cannot be represented exactly in the format and hence must be adjusted upward or downward。可以翻译为：<strong>舍入</strong>。</p><p>十进制的小数表示：$d_m d_{m-1} \cdots d_1 d_0 . d_{-1} d_{-2} \cdots d_{-n}$，写成数学表达式：</p><p>$$<br>d = \sum_{i=-n}^m 10^i \times d_i<br>$$</p><p>相应的，二进制也可以写成这种形式：</p><p>$$<br>b = \sum_{i=-n}^m 2^i \times b_i<br>$$</p><a id="more"></a><h1 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h1><p>IEEE浮点数的格式：$V = (-1)^s \times M \times 2^E$</p><ul><li>s是符号（Sign），s为0时是正，s为1时是负</li><li>M是有效数字（Significand，即 <strong>尾数</strong>）</li><li>E是 <strong>指数</strong>，Exponent，也叫 <strong>幂数</strong>，<strong>阶码</strong></li><li>隐含的 <strong>基数</strong> 是 2</li></ul><p>下图是浮点数的内存分布模型，首先是符号域，然后是指数域，最后是分数域：</p><p><img src="../../../../images/浮点数内存模型.png" alt="浮点数内存模型"></p><ul><li>符号位s个，符号位只需要一位，s=1</li><li>指数位k个，指数域 $exp=e_{k-1}\cdots e_1 e_0$，用来计算指数E</li><li>分数为n个，分数域 $frac=f_{n-1}\cdots f_1 f_0$，用来计算有效数字M</li></ul><p>32位浮点数（单精度，float型）中，s=1，k=8，n=23；64位浮点数（双精度，double型）中，s=1，k=11，n=52。</p><h2 id="正常化值（Normalized-Values）"><a href="#正常化值（Normalized-Values）" class="headerlink" title="正常化值（Normalized Values）"></a>正常化值（Normalized Values）</h2><p>当 $exp$ 域既不是全0，也不是全1的时候，就是正常化值。</p><p>$E = e - Bias$，其中 $e$ 就是 $exp$ 域：$e_{k-1}\cdots e_1e_0$ 的值（除去全0和全1之后，取值范围是1到$2^k-2$），$Bias=2^{k-1}-1$（单精度的时候是127，双精度的时候是1023），那么 $E$ 的取值范围，单精度的时候是：<code>-126 ~ +127</code>，双精度的时候是：<code>-1022 ~ +1023</code>，其实 $E$ 的算法就是 <strong>移码</strong> 的计算方法。</p><p>$M = 1+f$，$0\le f\lt 1$，内存里只记录f，而1作为一个前导值计算时候再加上，所以f是分数域 $frac$ 的 $0.f_{n-1}\cdots f_1f_0$ 这种形式</p><h2 id="非正常化值（Denormalized-Values）"><a href="#非正常化值（Denormalized-Values）" class="headerlink" title="非正常化值（Denormalized Values）"></a>非正常化值（Denormalized Values）</h2><p>当指数域全0，就是非正常化格式。</p><p>在这种情况下，指数值是 $E = 1-Bias$，也就是固定了，有效数字值 $M = f$ 也就是没有前导1了。这个格式下可以表示0，因为正常化值中，一定有： $M\ge 1$，所以我们无法在正常化值格式下表示0。当符号位是0，有效数字 $M=f=0$，我们得到的就是<code>+0.0</code>，当符号位是1的时候就是<code>-0.0</code>。</p><p>除了可以表示0，这个格式的另一个作用就是用来表示非常接近0的数。</p><h2 id="特殊值（Special-Values）"><a href="#特殊值（Special-Values）" class="headerlink" title="特殊值（Special Values）"></a>特殊值（Special Values）</h2><p>当指数域全1的时候，且分数域是全0，就表示无穷大，如果符号域为0，表示 $+\infty$，如果符号位是1，则表示 $-\infty$。无穷大可以作为溢出的结果，当我们用两个很大的数相乘，或者除以0；</p><p>当指数域全1，且分数域并非全0的时候，结果可以叫做：<code>NaN</code>（Not a Number的简写），这种值用来表示不能用实数或者无穷大表示的计算结果，比如计算：$\sqrt{-1}$ 或者 $\infty - \infty$。</p><h2 id="综合理解"><a href="#综合理解" class="headerlink" title="综合理解"></a>综合理解</h2><p>下图是三类浮点数在数轴上的显示：</p><p><img src="../../../../images/浮点数三种类型.png" alt="浮点数三种类型"></p><p>可以看到非正常化值集中在0附近，正常化值散布在整个数轴的空间，特殊值则只表示两个无穷值。</p><p>下图是浮点数三种类型的光滑衔接：</p><p><img src="../../../../images/浮点数三种类型光滑衔接.png" alt="浮点数三种类型光滑衔接"></p><p>看完浮点数的设计和构造我们可以发现以下这些特点：</p><ul><li><strong>从编码上有效数字域采用了无符号整数编码，而指数域采用了移码编码</strong></li><li><strong>非正常化值均匀分布在0附近</strong></li><li><strong>正常化值的间隔随着 $2^E$ 变大而逐渐变大，也就是精度逐渐降低</strong></li><li><strong>精度是分组的，以 $2^E$ 增加1为一组，每组有 $2^n$ 个数（n是有效数字域的位数）</strong></li><li><strong>最高精度就是两个非正常化值的间隔，最低精度是最大的一组正常化值的相邻两数的间隔。</strong></li><li><strong>非正常化值按照精度只占一组，正常化值的数量是非正常化值数量的 $2^{k}-2$ 倍</strong></li><li><strong>正常化值的第一组的精度和非正常化值的精度一样，也就是实现了无缝衔接</strong></li></ul><h1 id="浮点数的计算"><a href="#浮点数的计算" class="headerlink" title="浮点数的计算"></a>浮点数的计算</h1><h2 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h2><p><img src="../../../../images/舍入四种策略.png" alt="舍入四种策略"></p><p><a href="https://en.wikipedia.org/wiki/Rounding" target="_blank" rel="noopener">Rounding维基百科</a></p><p><a href="https://upload.wikimedia.org/wikipedia/commons/8/8a/Comparison_rounding_graphs_SMIL.svg" target="_blank" rel="noopener">各种Rounding合集图</a></p><p>浮点数中使用的是：舍入到最近的偶数，因为舍入结果放大和缩小各占50%的概率，这样就可以防止最终结果偏大或者偏小。</p><p>下面是把浮点数舍入到小数点后两位数：</p><p>$10.00011_2(2\frac{3}{32})$ -&gt; $10.00_2(2)$ 不到一半，正常四舍五入<br>$10.00110_2(2\frac{3}{16})$ -&gt; $10.01_2(2\frac{1}{4})$ 超过一半，正常四舍五入<br>$10.11100_2(2\frac{7}{8})$ -&gt; $11.00_2(3)$ 正好一半，保证最后一位是偶数，所以向上舍入<br>$10.10100_2(2\frac{5}{8})$ -&gt; $10.10_2(2\frac{1}{2})$ 正好一半，保证最后一位是偶数，所以向下舍入</p><h2 id="浮点数加减运算"><a href="#浮点数加减运算" class="headerlink" title="浮点数加减运算"></a>浮点数加减运算</h2><h3 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h3><ul><li>相加可能产生 infinity 或者 NaN</li><li>不满足交换律，不满足结合律（因为舍入会造成精度上的损失）</li><li>加上0等于原来的数</li><li>除了 infinity 和 NaN，每个元素都有对应的相反数</li><li>除了 infinity 和 NaN，满足单调性，即 $a\ge b \rightarrow a+c\ge b+c$</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 浮点数加法不满足交换律</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3.14</span> + <span class="number">1e20</span> - <span class="number">1e20</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1e20</span> - <span class="number">1e20</span> + <span class="number">3.14</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 浮点数加法不满足结合律</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="number">3.14</span> + <span class="number">1e20</span>) - <span class="number">1e20</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3.14</span> + (<span class="number">1e20</span> - <span class="number">1e20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">3.14</span><br><span class="line">0</span><br><span class="line">3.14</span><br></pre></td></tr></table></figure><h3 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h3><p>设两个浮点数 $x$ 和 $y$：</p><p>$$<br>\begin{cases}<br>x=(-1)^{s_x} M_x 2^{E_x} \<br>y=(-1)^{s_y} M_y 2^{E_y}<br>\end{cases}<br>$$</p><p>则浮点数加减运算结果为：</p><p>$$<br>x\pm y = \left((-1)^{s_x}M_x 2^{E_x-E_y} \pm (-1)^{s_y}M_y \right)2^{E_y}<br>$$</p><ol><li><strong>对阶</strong>：首先要把指数位（阶码）调成一样，并相应的使M移位，由于有效域左移会引起最高有效位丢失，误差大，所以采用右移，此时阶码要增加。所以对阶原则是：<strong>小阶向大阶看齐</strong>。</li><li><strong>有效数加减</strong>：简单的无符号数字相加减。</li><li><strong>规格化</strong>：有效数求和结果可能大于1，那么就向右规格化：尾数右移1位，阶码加1。</li><li><strong>舍入</strong>：对于右移出去的位，采取舍入</li><li><strong>检查阶码是否溢出</strong>：<ul><li><strong>阶码下溢</strong>：运算结果为非规格化数</li><li><strong>阶码上溢</strong>：置溢出标志</li></ul></li></ol><h3 id="浮点数加减实例"><a href="#浮点数加减实例" class="headerlink" title="浮点数加减实例"></a>浮点数加减实例</h3><p>$x=3.14, y=2.718$ 求 $z=x+y$。</p><p>首先算出 $x$ 和 $y$ 的内存表示：</p><p>$x = 3+0.14$，3的二进制表示是<code>11</code>，0.14的二进制要稍微计算一下，我们让0.14不断的乘以2（也就是左移），得到的整数位部分就是其二进制值的一位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0.14 * 2 = 0.28     0</span><br><span class="line">0.28 * 2 = 0.56     0</span><br><span class="line">0.56 * 2 = 1.12     1</span><br><span class="line">0.12 * 2 = 0.24     0</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>我们可以写个程序来完成这个计算工作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取整形数的位数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDigits</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num/<span class="number">10</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        num %= <span class="number">10</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小数的二进制表示</span></span><br><span class="line"><span class="comment"> * @params precision 二进制表示精确到多少位</span></span><br><span class="line"><span class="comment"> * @params num 小数的整数表示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getFloatBitset</span><span class="params">(<span class="keyword">int</span> precision, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* res = <span class="keyword">new</span> <span class="keyword">char</span>[precision];</span><br><span class="line">    <span class="keyword">int</span> digits = getDigits(num);</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="built_in">pow</span>(<span class="number">10</span>, digits);</span><br><span class="line">    <span class="keyword">char</span> printFormat[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(printFormat,<span class="string">"%%0.%df"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; printFormat &lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;precision;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(printFormat, num*<span class="number">1.0</span>/mod);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" * 2 = "</span>;</span><br><span class="line">        num &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= mod)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num*<span class="number">1.0</span>/mod);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            num %= mod;</span><br><span class="line">            res[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num*<span class="number">1.0</span>/mod);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            res[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小数的二进制表示</span></span><br><span class="line"><span class="comment"> * @params precision 二进制表示精确到多少位</span></span><br><span class="line"><span class="comment"> * @params num 浮点型小数</span></span><br><span class="line"><span class="comment"> * @params digits 输入的时候浮点型小数的位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getFloatBitset2</span><span class="params">(<span class="keyword">int</span> precision, <span class="keyword">float</span> num, <span class="keyword">int</span> digits)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* res = <span class="keyword">new</span> <span class="keyword">char</span>[precision];</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="built_in">pow</span>(<span class="number">10</span>,digits);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;mod&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">char</span> printFormat[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(printFormat,<span class="string">"%%0.%df"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;precision;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(printFormat, num);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" * 2 = "</span>;</span><br><span class="line">        num*=<span class="number">2</span>;</span><br><span class="line">        num = round(num*mod)/mod;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            num -= <span class="number">1</span>;</span><br><span class="line">            res[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(printFormat, num);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"       0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            res[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// char* res = getFloatBitset(atoi(argv[1]), atoi(argv[2]));</span></span><br><span class="line">    <span class="keyword">char</span>* res = getFloatBitset2(atoi(argv[<span class="number">1</span>]), atof(argv[<span class="number">2</span>]), atoi(argv[<span class="number">3</span>]));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码保存成：<code>float2Bitset.cpp</code>文件，然后编译，并使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o float2Bitset float2Bitset.cpp</span><br><span class="line">$ ./float2Bitset 23 0.14 2</span><br></pre></td></tr></table></figure><p>小数位精确到23位的话，3.14的定点浮点数表示是：<code>11.00100011110101110000101</code>。</p><p>转成浮点数，首先规格化M，那么整体要右移1位，指数是1，由 $E = e-Bias$，$E=1$, $Bias=127$ 得 $e=128$，也就是：<code>1000 0000</code>。</p><p>最终3.14的内存表示是：<br>$$<br>\underbrace{0}_{Sign}~\underbrace{10000000}_{Exponent}~~\underbrace{10010001111010111000011}_{Significand}<br>$$</p><p>同样的方法得到2.718的内存表示：</p><p>$$<br>\underbrace{0}_{Sign}~\underbrace{10000000}_{Exponent}~~\underbrace{01011011111001110110110}_{Significand}<br>$$</p><p>这两个数恰好是同阶的，那么就不需要对阶操作了。将M相加，但这个数太长了看着眼花，我们写个加法程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个相同位数的二进制数相加</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">addBitset</span><span class="params">(<span class="keyword">char</span> num1[], <span class="keyword">char</span> num2[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* res = <span class="keyword">new</span> <span class="keyword">char</span>[length+<span class="number">2</span>];</span><br><span class="line">    res[length+<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        res[i+<span class="number">1</span>] = num1[i]-<span class="string">'0'</span>+num2[i]-<span class="string">'0'</span>+carry+<span class="string">'0'</span>;</span><br><span class="line">        carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(res[i+<span class="number">1</span>]&gt;<span class="string">'1'</span>)&#123;</span><br><span class="line">            res[i+<span class="number">1</span>] -= <span class="number">2</span>;</span><br><span class="line">            carry = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(carry)&#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="string">'1'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(argv[<span class="number">1</span>][i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span>* res = addBitset(argv[<span class="number">1</span>], argv[<span class="number">2</span>], i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码保存成：<code>addBitset.cpp</code>，编译并使用该程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o addBitset addBitset.cpp</span><br><span class="line">$ ./addBitset 10010001111010111000011 01011011111001110110110</span><br></pre></td></tr></table></figure><p>相加结果等于：<code>0 11101101110100101111001</code>，最高位没有产生进位，这里用了一个0来代替，但两个前导1相加产生了进位，所以还需要对M右归一下，再对指数加1。所以加法结果的浮点数表示是：</p><p>$$<br>\underbrace{0}_{Sign}~\underbrace{10000001}_{Exponent}~~\underbrace{01110110111010010111101}_{Significand}<br>$$</p><p>这个数的十进制表示的计算方法是：$$2^2 \times (1+0\times (\frac{1}{2})^1 + 1\times (\frac{1}{2})^2 + 1\times (\frac{1}{2})^3 +1\times (\frac{1}{2})^4+0\times(\frac{1}{2})^5+\cdots)$$</p><p>我们依然采用程序来计算这一长串二进制对应的十进制小数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bitset2Float</span><span class="params">(<span class="keyword">char</span>* num1, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> temp = (num1[i]-<span class="string">'0'</span>)/<span class="built_in">pow</span>(<span class="number">2</span>,count);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">        res += temp;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(argv[<span class="number">1</span>][i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> res = bitset2Float(argv[<span class="number">1</span>],i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码保存为：<code>Bitset2float.cpp</code>，编译并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o Bitset2float Bitset2float.cpp</span><br><span class="line">$ ./Bitset2float 01110110111010010111101</span><br></pre></td></tr></table></figure><p>对得到结果：<code>0.4645</code>，$1.4645\times 2^2 = 5.858$，而 $3.14+2.718=5.858$，这就说明我们的计算无误。</p><h3 id="算法流程图"><a href="#算法流程图" class="headerlink" title="算法流程图"></a>算法流程图</h3><p><img src="../../../../images/浮点数加减流程图.jpg" alt="浮点数加减流程图"></p><p>这个流程图并不是完美的，真实的浮点数流程图和浮点数计算电路比这个复杂。另外我忘画了一个东西，这个图最后应该加上溢出处理模块，E可能会上溢（当E加1的时候），也可能会下溢（当E减1的时候）。</p><p>最后这个流程图中没有对特殊值的判断，比如：$\infty - \infty = NaN$, $\infty + \infty = \infty$, $NaN + 任何数 = NaN$。</p><p>了解了浮点数加法的流程之后，最后我们回到最上面说的 <strong>浮点数加减法不满足交换律和结合律</strong>，从计算细节分析为什么不行。</p><p>首先 3.14 的浮点数表示我们已经计算过了，那么 1e20 的浮点数是多少呢？1e20也就是 $10^{20}$，用辗转相除法可以得到其二进制表示。我们这里使用计算器工具</p><p><img src="../../../../images/10的19次方的二进制.png" alt="10的19次方的二进制"></p><p>很遗憾的是64bit只能摆的下 $10^{19}$。我试了一下把源程序中的 1e20 换成 1e19 也是同样的结果。所以我们就使用 1e19 来分析这道题。</p><p>首先是M规格化，M右移63位，E加63，舍入M，那么 1e19 最终的双精度浮点数表示是：<code>0 10000111110 0001010110001110010001100000100100010011110100000000</code></p><p>小阶向大阶看齐，3.14的阶是1，M需要右移62位，而M的精度才52，可想而知M就是0了。那么 3.14 + 1e19 的结果就是 <strong>1e19</strong>。1e20就更加不用说了。</p><h2 id="浮点数乘除"><a href="#浮点数乘除" class="headerlink" title="浮点数乘除"></a>浮点数乘除</h2><h3 id="基本性质-1"><a href="#基本性质-1" class="headerlink" title="基本性质"></a>基本性质</h3><ul><li>相乘可能产生 infinity 或者 NaN</li><li>不满足交换律，结合律，分配率（因为溢出会造成程序无法计算出正确的结果）</li><li>乘以1会等于原来的数</li><li>除了 infinity 和 NaN，满足单调性：$a\ge b \rightarrow a\times c \ge b \times c$</li></ul><h3 id="具体细节-1"><a href="#具体细节-1" class="headerlink" title="具体细节"></a>具体细节</h3><p>设两个浮点数 $x$ 和 $y$ ：</p><p>$$<br>\begin{cases}<br>x = \pm M_x 2^{E_x} \<br>y = \pm M_y 2^{E_y}<br>\end{cases}<br>$$</p><p>则浮点数乘除运算结果是：</p><p>$$<br>xy = \pm (M_x\times M_y)2^{E_x\pm E_y}<br>$$</p><ol><li>计算阶码，判断是否溢出</li><li>求有效数的乘积</li><li>有效数舍入</li><li>计算符号位</li></ol><p>浮点数还有相当多的细节，可以参考：<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a></p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wsl oh my zsh 字符乱码问题</title>
      <link href="/blog/2018/09/20/wsl%20oh%20my%20zsh%20%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/09/20/wsl%20oh%20my%20zsh%20%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h2><p>首先检查自己有没有zsh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>如果有的话就下载<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh my zsh</a></p><a id="more"></a><h2 id="设置默认shell"><a href="#设置默认shell" class="headerlink" title="设置默认shell"></a>设置默认shell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>有可能会遇到设置不成功的问题，那么我们可以手动修改<code>/etc/passwd</code>，找到自己那一条配置信息，把默认shell改成<code>/bin/zsh</code>就OK了。</p><h2 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h2><p><code>-&gt;</code>等一些其他字符可能显示不出来，这是字体导致的。google一下：<code>wsl oh my zsh font</code>，找到：<a href="https://github.com/Microsoft/WSL/issues/1517" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/1517</a>，下载并设置字体为：<a href="https://github.com/powerline/fonts/blob/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf" target="_blank" rel="noopener">DejaVuSansMono</a>。</p><h2 id="怎么设置字体"><a href="#怎么设置字体" class="headerlink" title="怎么设置字体"></a>怎么设置字体</h2><p>右键标题栏，进入属性</p>]]></content>
      
      
      <categories>
          
          <category> Fixed Issues </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wsl修改右键bash图标</title>
      <link href="/blog/2018/09/19/wsl%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AEbash%E5%9B%BE%E6%A0%87/"/>
      <url>/blog/2018/09/19/wsl%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AEbash%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>使用 windows subsystem for linux (简称：WSL) 的时候，遇到一个小问题，在文件管理器中右键，唤出bash，发现图标不对：</p><p><img src="https://i.loli.net/2018/09/19/5ba25208ca7de.png" alt="截图1"></p><a id="more"></a><p>点击之后可以看到调用的是哪个程序：</p><p><img src="https://i.loli.net/2018/09/19/5ba254dbe66ea.png" alt="截图2"></p><p>google一下：<code>windows 右键图标</code>，搜到百度经验：<a href="https://jingyan.baidu.com/article/7c6fb428321b4a80642c90fd.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/7c6fb428321b4a80642c90fd.html</a>，照着修改就行了。</p><p>如图：</p><p><img src="https://i.loli.net/2018/09/19/5ba255cbd964f.png" alt="截图3"></p><p>那么改成什么呢？google一下：<code>wsl bash icon</code>，搜到：<a href="https://github.com/Microsoft/WSL/issues/1269" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/1269</a>，然后又在这个页面找到了这个：<a href="https://github.com/cmderdev/cmder/issues/1063#issuecomment-401947209" target="_blank" rel="noopener">https://github.com/cmderdev/cmder/issues/1063#issuecomment-401947209</a></p><p><img src="https://i.loli.net/2018/09/20/5ba2ffde07591.png" alt="截图4"></p><p>把icon换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\WindowsApps\CanonicalGroupLimited.UbuntuonWindows_1804.2018.817.0_x64__79rhkp1fndgsc\ubuntu.exe</span><br></pre></td></tr></table></figure><p>再点击右键，就能看到这个图标了。</p><p>除了修改右键显示的icon，还可以修改右键显示的名字，以及运行的目标程序。</p><p><img src="https://i.loli.net/2018/09/20/5ba301516885f.png" alt="TIM图片20180920100903.png"></p><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\WindowsApps\CanonicalGroupLimited.UbuntuonWindows_1804.2018.817.0_x64__79rhkp1fndgsc\ubuntu.exe</span><br></pre></td></tr></table></figure><p>但发现无法把工作目录定到当前右键的目录，需要加一个<code>run</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\WindowsApps\CanonicalGroupLimited.UbuntuonWindows_1804.2018.817.0_x64__79rhkp1fndgsc\ubuntu.exe run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fixed Issues </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mathjax常用公式记录</title>
      <link href="/blog/2018/04/30/mathjax%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E8%AE%B0%E5%BD%95/"/>
      <url>/blog/2018/04/30/mathjax%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="角度记法"><a href="#角度记法" class="headerlink" title="角度记法"></a>角度记法</h2><ul><li>度数：<code>$60^\circ$</code>，$60^\circ$</li><li>度数分：<code>$60^\prime$</code>，$60^\prime$</li><li>弧度：<code>$\frac{\pi}{2}$</code>，$\frac{\pi}{2}$</li><li>角度记法：<code>$\angle A$</code>，$\angle A$</li></ul><h2 id="三重环积分无法渲染的问题"><a href="#三重环积分无法渲染的问题" class="headerlink" title="三重环积分无法渲染的问题"></a>三重环积分无法渲染的问题</h2><p>在网上找了半天资料最终解决了，参考这个答案：<a href="https://math.meta.stackexchange.com/questions/9973/how-do-you-render-a-closed-surface-double-integral" target="_blank" rel="noopener">How do you render a closed surface double integral?</a>，做法是直接使用Unicode编码：<code>\unicode{x222F}</code>，三重环积分的编码，参考这里：<a href="http://unicode-search.net/unicode-namesearch.pl?term=INTEGRAL" target="_blank" rel="noopener">unicode-search.net</a>，所以只要将<code>$\oiiint$</code>换成<code>$\unicode{x2230}$</code>即可正确显示三重环积分。如下：</p><p>$$\unicode{x2230}$$</p><a id="more"></a><h2 id="行内limit"><a href="#行内limit" class="headerlink" title="行内limit"></a>行内limit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\lim\limits_&#123;x\rightarrow 0&#125; \frac&#123;\sin x&#125;&#123;x&#125; = 1$</span><br></pre></td></tr></table></figure><p>效果：$\lim\limits_{x\rightarrow 0} \frac{\sin x}{x} = 1$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\lim_&#123;x\rightarrow 0&#125; \frac&#123;\sin x&#125;&#123;x&#125; = 1$</span><br></pre></td></tr></table></figure><p>效果：$\lim_{x\rightarrow 0} \frac{\sin x}{x} = 1$</p><p>凭个人喜好，我就更喜欢第一种。</p><h2 id="弧"><a href="#弧" class="headerlink" title="弧"></a>弧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\overset&#123;\frown&#125; &#123;AB&#125;$</span><br></pre></td></tr></table></figure><p>$\overset{\frown} {AB}$</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数学基础公式推导</title>
      <link href="/blog/2018/04/25/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/"/>
      <url>/blog/2018/04/25/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<p>今天看到下面这个公式，突然想我好像不会推导啊：</p><p>$\sin(\beta-\alpha) = \sin\beta\cos\alpha - \cos\beta\sin\alpha$</p><p>遂想如何推导，在youtube上找了一个视频：<a href="https://www.youtube.com/watch?v=uX6hxwW5BYM" target="_blank" rel="noopener">三角函数正余弦和角公式推导</a></p><a id="more"></a><p>思路是先推导出：$\cos(\beta-\alpha) = \cos\alpha\cos\beta + \sin\alpha\sin\beta$</p><blockquote><p>然后根据这个再结合正弦余弦之间的关系就很容易推 $\sin(\beta-\alpha) = \sin\beta\cos\alpha - \cos\beta\sin\alpha$</p></blockquote><p>那么怎么推导上面这个公式呢？</p><p>需要用到解析几何：</p><p><img src="https://i.loli.net/2018/04/27/5ae29c4bf121f.png" alt="Screen Shot 2018-04-27 at 11.42.48 AM.png"></p><p>结合 <code>勾股定理</code> 和 <code>余弦定理</code> 可以推导出。</p><blockquote><p>这里不给出勾股定理和余弦定理的证明，感兴趣的可以自己证。</p></blockquote><p>根据勾股定理：</p><p>$$<br>\begin{align}<br>\overline{PQ}^2<br>&amp;= (\sin\alpha - \sin\beta)^2 + (\cos\beta - \cos\alpha)^2 \newline<br>&amp;= 2 - 2(\cos\alpha\cos\beta + \sin\alpha\sin\beta) \newline<br>\end{align}<br>$$</p><p>根据余弦定理（$a^2 = b^2 + c^2 -2ab\cos A$）：</p><p>$$<br>\begin{align}<br>\overline{PQ}^2<br>&amp; = 1^2 + 1^2 - 2\cdot1\cdot1\cdot\cos(\alpha-\beta)<br>\end{align}<br>$$</p><p>由此推出：</p><p>$$<br>\cos(\alpha-\beta) = \sin\alpha\sin\beta+\cos\alpha\cos\beta<br>$$</p><p>也即：</p><p>$$<br>\cos(\beta-\alpha) = \sin\alpha\sin\beta+\cos\alpha\cos\beta<br>$$</p><p>然后：</p><p>$$<br>\begin{align}<br>\sin(\beta-\alpha)<br>&amp;= \cos(\frac{\pi}{2}-(\beta-\alpha)) \newline<br>&amp;= \cos((\frac{\pi}{2}+\alpha) - \beta) \newline<br>&amp;= \sin(\frac{\pi}{2}+\alpha)\sin\beta + \cos(\frac{\pi}{2}+\alpha)\cos\beta \newline<br>&amp;= \cos\alpha\sin\beta - \sin\alpha\cos\beta \newline<br>&amp;= \sin\beta\cos\alpha - \cos\beta\sin\alpha<br>\end{align}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Override Overload Overwrite</title>
      <link href="/blog/2017/11/14/Override-Overload-Overwrite/"/>
      <url>/blog/2017/11/14/Override-Overload-Overwrite/</url>
      
        <content type="html"><![CDATA[<p>我们都知道有些东西容易混淆，在加上中文翻译得乱七八糟，更加让人困惑。今天我要讲的这三位可就真是绝了。</p><p>它们是：Override、Overload、Overwrite。</p><a id="more"></a><p>这是我查有道词典时候看到的可怕一幕：</p><p><img src="https://i.loli.net/2019/12/09/LAIVFxpekMXyogD.jpg" alt="006zFO3ggy1flhl8a9e69j312w0tatf9.jpg"></p><p>Override 一个把三个名字都占了，你怕不怕？反正我是看的心里一紧。</p><p>如果把概念都煮成了一锅粥，那还不如不要记这些概念，你应该向更深层次去探寻。就这三个的区别来说，我觉得主要理解两个概念就行了：</p><ol><li>函数签名（signature）</li><li>多态（polymorphism、polymorphic）</li></ol><h2 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h2><p>函数签名是什么，其实就是用来区别函数的，两个函数怎么样认定是不同的两个函数呢，只有两个方面：</p><ol><li>函数名</li><li>参数</li></ol><p>有人说还有返回值啊，不行，返回值不能作为函数签名的一部分，因为你调用一个函数的时候，返回值根本不能帮助编译器来识别你用的是哪个函数，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>请问我使用的是哪个函数？你看返回值确实不行吧。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是面向对象编程的概念，你可以看看它的准确定义：</p><p>Polymorphism，定义很简短：polymorphism is the provision of a single interface to entities of different types.</p><p>如果父类有一个函数，子类也定义了一个完全相同的函数（函数签名相同），那么你可以用父类指针（或者说父类对象）作为统一的接口，来调用子类的方法。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“Vehicles can move!!”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotorBike</span> <span class="title">extends</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“MotorBike can move <span class="keyword">and</span> accelerate too!!”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">extends</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“Hi! I am a car!”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Vehicle vh = <span class="keyword">new</span> MotorBike();</span><br><span class="line">        vh.move();    <span class="comment">// prints MotorBike can move and accelerate too!!</span></span><br><span class="line">        vh = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        vh.move();    <span class="comment">// prints Vehicles can move!!</span></span><br><span class="line">        vh = <span class="keyword">new</span> Car();</span><br><span class="line">        vh.move();   <span class="comment">// prints Hi! I am a car!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的好处是可以扩展啊，比如我后来又多了个 truck 类，我不需要去动已经写好的代码，只要把 truck 模块写好，加进去就行了。</p><h2 id="Override、Overload、Overwrite-的区别"><a href="#Override、Overload、Overwrite-的区别" class="headerlink" title="Override、Overload、Overwrite 的区别"></a>Override、Overload、Overwrite 的区别</h2><p>好了，知道了这两个概念，我们再来看看上面的那三个混在一起的东西：</p><ul><li>Override（推翻，对英文意思就是这个）subclass method overrides base class method means:<ul><li>in different range (in derived class and base class)</li><li>the same function signature</li><li>the base class method is virtual（if in C++）</li></ul></li><li>overload（超载）function overloading means:<ul><li>the same range (in the same class)</li><li>the same function name</li><li>but different function signature</li></ul></li><li>overwrite（重写）subclass method hides base class method means:<ul><li>in different range (in derived class and base class)</li><li>the same function name</li></ul></li></ul><p>我们应该记住只有 Override 才跟多态有关。</p><p>Overload 是本class 里面的不同函数（只不过函数名一样罢了，其实是两个不同的函数，看两个函数是否是同一个函数就看函数签名就行了），其实没啥稀奇的，不就是函数名一样嘛。函数签名一样，区分出是用父类还是子类的函数，这才是面向对象和多态要解决的问题。</p><h2 id="Override-和-Overwrite-的区别"><a href="#Override-和-Overwrite-的区别" class="headerlink" title="Override 和 Overwrite 的区别"></a>Override 和 Overwrite 的区别</h2><blockquote><p>比较容易混淆的其实是 Override 和 Overwrite，但你只要死记住：Override 必须函数签名要一样，而 Overwrite 只需函数名一样即可。另外 C++ 中一定要用virtual才算 Override，而 Java 默认就是 Override，不需要修饰词。</p></blockquote><blockquote><p>这里关于 Java 和 C++ 面向对象的细节区别可以写一大堆，比如：C++ class 后面是要加分号的，而 Java 不需要；但 Java 的类名是和文件名要一致的，而且只能有一个 public 类，而 C++不需要；Java 直接就能用 Override，而 C++必须要使用 virtual 关键字才能使用 Override（虚函数）；Java 的抽象方法跟 C++的纯虚函数对应。Java 是单继承，由接口来实现“多继承”，C++是多继承，没有接口，只有抽象类。C++还有个虚基类的概念。具体的写法上还有很多的不同，多用这两种语言写面向对象的代码，就慢慢会知道了。</p></blockquote><p>C++ 有一个 virtual 关键字和 virtual table 这个概念，没有加 virtual 的父类函数是不可能形成多态的，如果这时候你碰到父类和子类两个里面有同名的函数，那么就属于 Overwrite 这个概念了，你其实也可以称这种覆盖掉父类函数的行为为：hide 隐藏。Java 这种语言里面没有 virtual 这一套，Java 也可以表现出 Overwrite，但要注意函数签名如果一样的话，那又不叫 Overwrite 了，应该叫 Override 了（Java 如果要在子类中使用父类的同函数签名方法，则必须使用 super 关键字）。而 C++ 不一样，即便是函数签名一样，如果前面不加 virtual 是不能叫 Override 的，仍然属于 Overwrite 的概念。请看下面的例子：</p><p>用 C++ 写的话：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> B();</span><br><span class="line">    a-&gt;func(<span class="number">1</span>);</span><br><span class="line">    ((B*)a)-&gt;func(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>可以看到，C++必须要用子类类型的指针才能访问到子类的部分（建议看一本书，叫：Inside the C++ Object Model，中文叫：深入C++对象模型，里面讲对象的内存布局讲的很清楚），java 也一样，必须转成子类型的指针才能访问，否则 IDE 会报错提示你。</p><p>Java 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        test t = <span class="keyword">new</span> test();</span><br><span class="line">        A a = t.<span class="keyword">new</span> B();</span><br><span class="line">        a.fun(<span class="number">1</span>);</span><br><span class="line">        ((B)a).func(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>为什么 Java 代码里不像 C++ 代码里面那样，使用两个函数签名相同的函数？因为前面说过了，那样的话就变成 Override 了，只有在 C++ 里才能实现函数签名相同的 Overwrite（不使用virtual即可）。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>值传递和引用传递</title>
      <link href="/blog/2017/03/29/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
      <url>/blog/2017/03/29/%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>Java没有引用传递，本质上都是值传递，只不过如果传递的值可以是指针（Java没有指针，所以你也可以理解为对象，其实本质上还是指针）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getString</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        text = <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        String text = <span class="string">"world"</span>;</span><br><span class="line">        solution.getString(text);</span><br><span class="line">        System.out.println(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>text本质上是一个指针，而getString中的text则是另一个指针（一个局部变量），所以这里实际上有两个不同的text，而我们实际上改变的就是一个局部变量。所以输出结果是：world。也可以理解为形参和实参不是同一个对象，形参是一个局部变量，存在于寄存器或者当前栈帧，实参存在于上一级栈帧，和而被调用的函数，在它的执行过程中不会改变上一层栈帧的实参。</p><p>如果深入了解了C语言程序栈的构造，就能彻底明白函数调用的细节：<a href="https://liuqinh2s.github.io/blog/2018/10/08/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/#%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8">过程调用</a></p><p>值传递和引用传递是每个刚开始写代码的程序员的必经之坑，比如经典的swap函数交换，就是一个大坑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String text1, String text2)</span></span>&#123;</span><br><span class="line">        String temp = text1;</span><br><span class="line">        text1 = text2;</span><br><span class="line">        text2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        String text1 = <span class="string">"world"</span>;</span><br><span class="line">        String text2 = <span class="string">"hello"</span>;</span><br><span class="line">        solution.swap(text1, text2);</span><br><span class="line">        System.out.println(text1+<span class="string">" "</span>+text2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是：world hello</p><p>实际上我觉得这应该算得上是编程语言底层设计影响到上层使用的一个例子，不是那么自然，比较容易让人困惑。可以算作是一种封装的失败吧。补救方法在C中是使用指针，C++中是使用引用，Java中是使用对象包装一层。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常量池</title>
      <link href="/blog/2017/03/28/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
      <url>/blog/2017/03/28/%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>字符串由char数组实现，字符串以<code>\0</code>结尾，<code>\0</code>是ASCII的第一个字符，用bit表示也就是：<code>0000 0000</code>，这可以方便我们找到字符串的结尾。</p><blockquote><p>ASCII字符由一个字节表示，实际上第一版的ASCII字符只用到了7个bit，128个字符，扩展版的ASCII使用了8个bit。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">"0123456789\0"</span>);</span><br></pre></td></tr></table></figure><p>为了节省内存，C/C++把常量字符串放到常量池中，当几个指针被赋值了相同的字符串常量时，实际上它们会指向相同的内存地址。但用常量字符串初始化数组，情况却不同。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* str3 = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span>* str4 = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(str1==str2)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str1 and str2 are same.\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str1 and str2 are not same.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(str3==str4)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str3 and str4 are same.\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str3 and str4 are not same.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>str1 and str2 are not same.<br>str3 and str4 are same.</p><p>常量池虽然好用，但这样会造成一个问题，就是我们拿其中一个指针改了字符串内容，就会造成另一个指针指向的字符串也变了。为此像C#和Java等语言都将字符串类型设为不可变对象，改变字符串实际上是新建了一个字符串，这样就不会引起冲突了。但如果需要不停的改变就要不停的新建，这样就太影响效率，所以又提供了<code>StringBuilder</code>类，这个类是支持在原字符串上改动的。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge of CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组和指针的区别</title>
      <link href="/blog/2017/03/27/%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2017/03/27/%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>数组和指针的区别：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetSize</span><span class="params">(<span class="keyword">int</span> data[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])&#123;</span><br><span class="line">    <span class="keyword">int</span> data1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> size1 = <span class="keyword">sizeof</span>(data1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* data2 = data1;</span><br><span class="line">    <span class="keyword">int</span> size2 = <span class="keyword">sizeof</span>(data2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size3 = GetSize(data1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d\n"</span>, size1, size2, size3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是输出：20, 4, 4</p><a id="more"></a><p>sizeof是个关键字而不是函数，sizeof(data1)是求数组的大小，这里有5个int型元素，所以总共20个字节，data2声明为指针，尽管指向了一个数组，但本质上只是一个指针，所以sizeof(data2)的语义范围收缩了，无法仅通过一个指针得知其所指范围。在32位系统上一个指针是4字节，所以结果就是4。在C/C++中，当数组作为函数的参数进行传递时，数组就自动退化为同类型的指针，因此size3的结果也是4。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
