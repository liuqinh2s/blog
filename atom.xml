<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuqinh2s&#39; blog</title>
  
  <subtitle>Do something cool!</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://liuqinh2s.github.io/"/>
  <updated>2025-09-20T07:58:51.274Z</updated>
  <id>https://liuqinh2s.github.io/</id>
  
  <author>
    <name>liuqinh2s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码耦合</title>
    <link href="https://liuqinh2s.github.io/2025/09/18/%E4%BB%A3%E7%A0%81%E8%80%A6%E5%90%88/"/>
    <id>https://liuqinh2s.github.io/2025/09/18/代码耦合/</id>
    <published>2025-09-18T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;编程绕不开的一个话题：耦合&lt;/p&gt;
&lt;p&gt;耦合其实是个中性词，代码模块之间要相互协作完成任务，就必定要耦合。&lt;strong&gt;耦合即：一方对另一方的假设&lt;/strong&gt;。你不可能对协作的对象不做任何假设，所以其实有些耦合是必须的。我们要解决的是非必要的，不良的耦合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如无必要，不要使代码耦合，过度耦合会加速代码腐烂（比如：难加新功能，难修 bug）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对另一方做尽可能少的假设其实只是手段之一，而且这种手段势必会让代码变得更加抽象复杂。另一种手段就是：制定标准和建立知识库，大家用共同的标准和共有的知识去沟通，就会非常顺畅，反之则寸步难行。所以当你觉得你们的项目程序写得稀烂，先不要关注过度耦合的问题，先看看是不是连标准都没制定，公共知识库都没有建立，人员不知道不遵守既定标准和知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liuqinh2s.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Figma笔记</title>
    <link href="https://liuqinh2s.github.io/2025/08/22/Figma%E7%AC%94%E8%AE%B0/"/>
    <id>https://liuqinh2s.github.io/2025/08/22/Figma笔记/</id>
    <published>2025-08-22T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;早就听闻 Figma 市值非常高（大概好几年前吧），把 Adobe PhotoShop 都给干下去了。以前只是听闻 Figma 用起来比 PhotoShop 更简单所以才深受用户喜爱，现在感觉事情并没有那么简单，Figma 市值之所以那么高肯定是有原因的，原因应该是盈利确实很好，市占率确实很高，因为我发现它好像是专门做 UI 设计的工具，而随便一想就知道这块蛋糕在现在这个时代是特别大的。&lt;/p&gt;
&lt;p&gt;我的东家也是做白板类项目的，不过也是做垂直领域，EDA，项目地址在此：&lt;a href=&quot;https://pro.lceda.cn/editor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;嘉立创 EDA 专业版&lt;/a&gt;。我所了解的其他白板项目有这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://excalidraw.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Excalidraw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://songlh.top/paint-board/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;paint-board&lt;/a&gt;，&lt;a href=&quot;https://github.com/LHRUN/paint-board?tab=readme-ov-file&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LHRUN/paint-board: 🎨 A powerful multi-end drawing board that brings together a lot of creative brushes to experience a whole new range of drawing effects!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yft.design/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yft-design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kkoomen/pointless&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pointless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见能结合具体业务，垂直发展，才是白板项目能否壮大的关键。而具体业务也有大有小，UI 设计，海报设计这些用户面大所以相应的市值也非常高。&lt;/p&gt;
    
    </summary>
    
    
      <category term="UI设计" scheme="https://liuqinh2s.github.io/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>仓鼠导航</title>
    <link href="https://liuqinh2s.github.io/2025/08/22/%E4%BB%93%E9%BC%A0%E5%AF%BC%E8%88%AA/"/>
    <id>https://liuqinh2s.github.io/2025/08/22/仓鼠导航/</id>
    <published>2025-08-22T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近又开始想自己做做项目了，这个项目我思考了好几年，早就想做，但是一拖再拖。但最近愈发觉得，这个项目实在好，应该去做。理由如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个赛道我特别喜欢，我就喜欢收藏一些特别有趣的网站&lt;/li&gt;
&lt;li&gt;可以锻炼技术能力，光靠公司项目，很多技术还未尝试
        
      
    
    </summary>
    
    
      <category term="独立开发" scheme="https://liuqinh2s.github.io/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>git笔记</title>
    <link href="https://liuqinh2s.github.io/2025/08/20/git%E7%AC%94%E8%AE%B0/"/>
    <id>https://liuqinh2s.github.io/2025/08/20/git笔记/</id>
    <published>2025-08-20T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;git-add-的意义是什么，为什么要设计出这个？&quot;&gt;&lt;a href=&quot;#git-add-的意义是什么，为什么要设计出这个？&quot; class=&quot;headerlink&quot; title=&quot;git add 的意义是什么，为什么要设计出这个？&quot;&gt;&lt;/a&gt;git add
        
      
    
    </summary>
    
    
      <category term="git" scheme="https://liuqinh2s.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vue 总结</title>
    <link href="https://liuqinh2s.github.io/2025/08/11/Vue%E6%80%BB%E7%BB%93/"/>
    <id>https://liuqinh2s.github.io/2025/08/11/Vue总结/</id>
    <published>2025-08-11T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Vue 也是比较常用的前端框架，我这篇文章尝试总结一下 Vue 的常用知识点&lt;/p&gt;
&lt;h2 id=&quot;声明式编程-组件式开发&quot;&gt;&lt;a href=&quot;#声明式编程-组件式开发&quot; class=&quot;headerlink&quot; title=&quot;声明式编程 + 组件式开发&quot;&gt;&lt;/a&gt;声明式编程 + 组件式开发&lt;/h2&gt;&lt;p&gt;js 原生语言和 JQuery 这类库，都是命令式的编程，而 Vue 和 React 这类框架，则是声明式编程，或者说是数据驱动式编程。它们的区别在于是否要手动操作 DOM 更新视图。声明式编程只需要关注数据更新，而不用操心 DOM 的更新。&lt;/p&gt;
&lt;p&gt;早先的前端开发都是&lt;code&gt;html&lt;/code&gt;、&lt;code&gt;js&lt;/code&gt;、&lt;code&gt;css&lt;/code&gt;三类文件分离的。如果类比做人体的话，html 就像人体的骨骼，是个架子；js 就像人体的肌肉，可以让人体动起来；css 就像皮肤，负责外观。但现在前端编程又回到了融合它们三个的组件式开发的时代。因为组件式开发，封装性更强，这也意味着维护更简单，使用更方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://liuqinh2s.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>浏览器跨窗口通信总结</title>
    <link href="https://liuqinh2s.github.io/2025/07/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E7%AA%97%E5%8F%A3%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93/"/>
    <id>https://liuqinh2s.github.io/2025/07/24/浏览器跨窗口通信总结/</id>
    <published>2025-07-24T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;window-postMessage-（通用跨域方案）&quot;&gt;&lt;a href=&quot;#window-postMessage-（通用跨域方案）&quot; class=&quot;headerlink&quot; title=&quot;window.postMessage()（通用跨域方案）&quot;&gt;&lt;/a&gt;window.postMessage()（通用跨域方案）&lt;/h2&gt;&lt;p&gt;通过获得目标窗口引用（如 window.open()返回对象、iframe.contentWindow 或 window.opener），发送可序列化数据。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 发送方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; targetWindow = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.open(&lt;span class=&quot;string&quot;&gt;&#39;child.html&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;targetWindow.postMessage(&lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;https://example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 接收方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, (event)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(event.origin === &lt;span class=&quot;string&quot;&gt;&#39;https://example.com&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;优势：支持跨域通信，安全性高（需验证 event.origin）。&lt;br&gt;局限：需预先建立窗口引用关系，无法广播消息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="浏览器" scheme="https://liuqinh2s.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>常用 react hooks 总结</title>
    <link href="https://liuqinh2s.github.io/2025/07/21/%E5%B8%B8%E7%94%A8%20react%20hooks%20%E6%80%BB%E7%BB%93/"/>
    <id>https://liuqinh2s.github.io/2025/07/21/常用 react hooks 总结/</id>
    <published>2025-07-21T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近又开始面试了，然后发现基础还是不牢固，工作中用到的技术确实是比较有限的，平常还要多夯实基础，查漏补缺，不然面试的时候很多东西答不上来。今天面试官问 useCallback，我发现平常不用它，加上好久没复习，我已经全然不记得了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://liuqinh2s.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>我的互联网生活</title>
    <link href="https://liuqinh2s.github.io/2025/06/23/%E6%88%91%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E6%B4%BB/"/>
    <id>https://liuqinh2s.github.io/2025/06/23/我的互联网生活/</id>
    <published>2025-06-23T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经常打开手机漫无目的的刷着算法推荐的东西，有的时候觉得太过无聊粗俗。还是得认真审视一下自己的信息源。另外就是博客，尤其是个人博客的流量实在太低了，约等于 0，我打算还是把每天写的东西同步到流量大的平台。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://liuqinh2s.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>重新整理博客</title>
    <link href="https://liuqinh2s.github.io/2024/11/12/%E9%87%8D%E6%96%B0%E6%95%B4%E7%90%86%E5%8D%9A%E5%AE%A2/"/>
    <id>https://liuqinh2s.github.io/2024/11/12/重新整理博客/</id>
    <published>2024-11-12T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;记录信息最好的方式还是日志，就是按时间编排的意思。检索的最好方式是搜索，统计归纳最好的方式是标签（目录是树状，而标签是网状）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="方法论" scheme="https://liuqinh2s.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="观点" scheme="https://liuqinh2s.github.io/tags/%E8%A7%82%E7%82%B9/"/>
    
      <category term="做笔记" scheme="https://liuqinh2s.github.io/tags/%E5%81%9A%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>囚徒健身实践</title>
    <link href="https://liuqinh2s.github.io/2024/11/11/%E5%9B%9A%E5%BE%92%E5%81%A5%E8%BA%AB%E5%AE%9E%E8%B7%B5/"/>
    <id>https://liuqinh2s.github.io/2024/11/11/囚徒健身实践/</id>
    <published>2024-11-11T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;长期不运动的危害：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;筋膜粘连，肌肉活动受限，关节活动受限&lt;/li&gt;
&lt;li&gt;拮抗肌肉失衡，肌肉老损和退化，各处酸痛&lt;/li&gt;
&lt;li&gt;没有体能和力量&lt;/li&gt;
&lt;li&gt;很容易疲惫，精神萎靡&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分三个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;体能（有氧：跑步，跳绳）&lt;/li&gt;
&lt;li&gt;身体灵活度，柔韧性（拉伸）&lt;/li&gt;
&lt;li&gt;力量&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="健身" scheme="https://liuqinh2s.github.io/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>我对读书的看法</title>
    <link href="https://liuqinh2s.github.io/2024/08/26/%E6%88%91%E5%AF%B9%E8%AF%BB%E4%B9%A6%E7%9A%84%E7%9C%8B%E6%B3%95/"/>
    <id>https://liuqinh2s.github.io/2024/08/26/我对读书的看法/</id>
    <published>2024-08-26T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一直以来确实有点读书读傻了，如果我有小孩，我希望他价值观不要出问题。学校的价值观太有问题了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xiaohongshu.com/explore/6670e747000000000e032612&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;清华录取通知书和一个亿，小朋友如何选？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Gf421z7Px/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;高考失败=人生完蛋？复读考上交大，进入社会才发现学历只是一张纸，985 根本配不上学生的优秀&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;钱，财富那不是肮脏的东西。视金钱如粪是错的&lt;/li&gt;
&lt;li&gt;仁义礼智信，在贵族身上，那是大加成。在穷人身上，那是大枷锁。底层人敢闯敢拼低道德厚脸皮是大加成。&lt;/li&gt;
&lt;li&gt;社会是人跟人的社会。人际关系，比什么都重要。玩到极致，就是政治&lt;/li&gt;
&lt;li&gt;利益决定脑袋。也叫屁股决定脑袋。别人说什么都是站在自己的利益（或者志向）立场上说话的。&lt;/li&gt;
&lt;li&gt;高考是留给最底层孩子的通道。有实力的别去卷，或者花样卷。奶茶妹妹（刘强东老婆章泽天）健美操上清华，顾森（matrix67）信息竞赛银牌上北大，哪怕孙割（孙宇晨）也是自主招生加了分（虽然孙割分数并不低，离北大分数线还差几分）。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="观点" scheme="https://liuqinh2s.github.io/tags/%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>投资总结</title>
    <link href="https://liuqinh2s.github.io/2024/08/14/%E6%8A%95%E8%B5%84%E6%80%BB%E7%BB%93/"/>
    <id>https://liuqinh2s.github.io/2024/08/14/投资总结/</id>
    <published>2024-08-14T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;投资要做的是两方面的工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;价格低&lt;/li&gt;
&lt;li&gt;质量好&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你的投资标的，具备以上两个特征，那就可以赚到钱。这两个都做好了会不会亏钱，也会，因为很多人会受市场波动的影响，认为自己判断错了，从而割肉离场。所以优秀的投资人不光要学习基本的市场经济知识，还要有调查精神，还要有自信。&lt;/p&gt;
    
    </summary>
    
    
      <category term="投资" scheme="https://liuqinh2s.github.io/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>免费数字资源</title>
    <link href="https://liuqinh2s.github.io/2024/08/13/free-resource/"/>
    <id>https://liuqinh2s.github.io/2024/08/13/free-resource/</id>
    <published>2024-08-13T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;互联网时代发展到现在，什么都要收费了，而且不光要收费，使用体验还越来越差。比如听歌，看视频，往往都要下载好几个 APP，在好几个平台充会员。有没有什么办法可以免费获得这些资源呢？有的，下面分享一下我的经验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="信息差" scheme="https://liuqinh2s.github.io/tags/%E4%BF%A1%E6%81%AF%E5%B7%AE/"/>
    
  </entry>
  
  <entry>
    <title>作品版权证券化</title>
    <link href="https://liuqinh2s.github.io/2024/08/03/%E4%BD%9C%E5%93%81%E7%89%88%E6%9D%83%E8%AF%81%E5%88%B8%E5%8C%96/"/>
    <id>https://liuqinh2s.github.io/2024/08/03/作品版权证券化/</id>
    <published>2024-08-03T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.273Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单描述&quot;&gt;&lt;a href=&quot;#简单描述&quot; class=&quot;headerlink&quot; title=&quot;简单描述&quot;&gt;&lt;/a&gt;简单描述&lt;/h1&gt;&lt;p&gt;痛点描述：某人为了听某首喜爱的歌或观看喜爱的视频，给音乐，视频平台充了月会员，一个月后却听不了歌，甚至有些歌即便下载了还不让听。如果换做一本纸质书，我买了，就是我的，甚至我还可以借给别人看，所有权明明白白，我不是想听平台那么多歌，我就是想听我爱听的而已，很少的几首。所以能不能别再用租赁的形式听歌了！而且平台那么多，我甚至要充好几个平台，才能凑齐这些歌。&lt;/p&gt;
&lt;p&gt;把作品的版权上市证券化，举例：周杰伦的一首新歌，估值 500 万，上市分成 500 万股，每一股 1 块钱，但凡持有一股，即可听歌（观看权），但没有所有权（拿这首歌传播盈利）。所有持有者共同享受这首歌的收益。比如某个视频引用拿这首歌做 BGM，电视剧拿这首歌做片头曲等等，产生的收益按比例分红给所有持有者。建立一个平台，可以上架交易，平台不靠网易云音乐等收会员听歌的模式，而是靠交易手续费（比如千分之二的手续费）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="思考" scheme="https://liuqinh2s.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>星露谷物语</title>
    <link href="https://liuqinh2s.github.io/2024/08/03/%E6%98%9F%E9%9C%B2%E8%B0%B7%E7%89%A9%E8%AF%AD/"/>
    <id>https://liuqinh2s.github.io/2024/08/03/星露谷物语/</id>
    <published>2024-08-03T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近两年深度体验了一把星露谷物语，一直玩的是安卓版盗版的星露谷，上周末没忍住，终于还是买了 steam 上的正版星露谷物语，也算是向作者致敬，支持了一下作者。&lt;/p&gt;
&lt;p&gt;单机游戏玩通关了基本上就不会再想玩了，星露谷也一样。但玩下来之后发现，其实星露谷物语是个彩蛋类游戏，彩蛋实在是太多了，等待玩家去挖掘。&lt;/p&gt;
&lt;p&gt;我是一边看攻略一边玩的，基本上只有第一年累一点，第一年财富自由之后，后面就是开始搞各种乱七八糟的探索了。我是用上古水果酿酒实现财富自由的，这也是这个游戏最推荐的赚钱流派。&lt;/p&gt;
&lt;p&gt;下面按照我自己的理解写一下这个游戏的攻略：&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="https://liuqinh2s.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript如何实现节流和防抖函数</title>
    <link href="https://liuqinh2s.github.io/2023/12/05/JavaScript%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0/"/>
    <id>https://liuqinh2s.github.io/2023/12/05/JavaScript如何实现节流和防抖函数/</id>
    <published>2023-12-05T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;节流：throttle&lt;br&gt;防抖：debounce&lt;/p&gt;
&lt;p&gt;这两个是 JavaScript 开发中两个经常需要用到的工具函数，主要用于解决性能问题。节流的意思是针对某函数的连续调用，在一定时间内每隔一小段时间调用一次目标函数；防抖的意思是针对某函数的连续调用，只在一小段时间间隔后执行最后一次调用。&lt;/p&gt;
&lt;p&gt;常用的场景有：浏览器高频 DOM 事件的回调函数，比如 scroll，mousemove，resize 等&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liuqinh2s.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的var,let,const的区别</title>
    <link href="https://liuqinh2s.github.io/2023/11/23/JavaScript%E7%9A%84var,let,const%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liuqinh2s.github.io/2023/11/23/JavaScript的var,let,const的区别/</id>
    <published>2023-11-23T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首先&lt;code&gt;var&lt;/code&gt;,&lt;code&gt;let&lt;/code&gt;,&lt;code&gt;const&lt;/code&gt;都是用于定义变量，这是它们的共同点，那么它们的区别呢？&lt;/p&gt;
&lt;p&gt;其实还可以什么都不用，直接给变量赋值，这样的话，就是赋值给了全局对象（在浏览器上就是 window 对象）:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.a);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liuqinh2s.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>模拟实现JavaScript的bind方法</title>
    <link href="https://liuqinh2s.github.io/2023/11/22/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0JavaScript%E7%9A%84bind%E6%96%B9%E6%B3%95/"/>
    <id>https://liuqinh2s.github.io/2023/11/22/模拟实现JavaScript的bind方法/</id>
    <published>2023-11-22T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;bind 函数我们经常用到，主要用于换绑 this。其返回值是一个方法。此外我们还可以把一些参数固定下来，相当于封装了一个简易函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liuqinh2s.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>模拟实现JavaScript的apply和call方法</title>
    <link href="https://liuqinh2s.github.io/2023/11/21/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0JavaScript%E7%9A%84apply%E5%92%8Ccall%E6%96%B9%E6%B3%95/"/>
    <id>https://liuqinh2s.github.io/2023/11/21/模拟实现JavaScript的apply和call方法/</id>
    <published>2023-11-21T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;apply 和 call 的相同点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;都由一个函数调用&lt;/li&gt;
&lt;li&gt;第一个参数都是原函数的执行环境 this&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同点是：&lt;/p&gt;
&lt;p&gt;apply 的第二个参数接收原函数的所有参数，而 call 从第二个参数开始跟原函数一样是打散的&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F(arg1, arg2, ...)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F.apply(thisArg, [arg1, arg2, ...]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F.call(thisArg, arg1, arg2, ...);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要特别注意的是，如果是在非严格模式下，thisArg 如果为 null 或 undefined，就会被替换成全局对象（在浏览器中是 window）；如果为原始值，就会被替换成原始值的的自动包装对象。&lt;/p&gt;
&lt;p&gt;严格模式下，thisArg 传什么就是什么。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liuqinh2s.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象的继承有哪几种</title>
    <link href="https://liuqinh2s.github.io/2023/11/20/JavaScript%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%A7%E6%89%BF%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D/"/>
    <id>https://liuqinh2s.github.io/2023/11/20/JavaScript对象的继承有哪几种/</id>
    <published>2023-11-20T00:00:00.000Z</published>
    <updated>2025-09-20T07:58:51.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;javascript 高级程序设计中有写，对象的继承总共有六种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原型链继承，子原型是父原型的一个实例&lt;/li&gt;
&lt;li&gt;借用构造函数继承，子构造函数调用父构造函数&lt;/li&gt;
&lt;li&gt;组合式继承(组合 1 和 2)&lt;/li&gt;
&lt;li&gt;原型式继承&lt;/li&gt;
&lt;li&gt;寄生式继承&lt;/li&gt;
&lt;li&gt;寄生式组合继承（组合 3 和 5）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://liuqinh2s.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
